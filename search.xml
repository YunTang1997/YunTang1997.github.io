<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql变量</title>
      <link href="/2020/07/12/Mysql%E5%8F%98%E9%87%8F/"/>
      <url>/2020/07/12/Mysql%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a></li><li><a href="#系统变量">系统变量</a></li><li><a href="#自定义变量">自定义变量</a><ul><li><a href="#用户变量">用户变量</a></li><li><a href="#局部变量">局部变量</a></li></ul></li><li><a href="#用户变量和局部变量的对比">用户变量和局部变量的对比</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p>系统变量：</p><ol><li>全局变量<br>作用域：服务器每次启动将为所有全局变量赋初始值，针对于所有的会话（连接）有效，但是不能跨重启。</li><li>会话变量<br>作用域：仅仅针对当前会话（连接）有效。</li></ol></li><li><p>自定义变量：</p><ol><li>用户变量<br>作用域：针对与当前会话（连接）有效，同与会话变量的作用域，可以应用在任何地方，也就是begin end里面或者外面。</li><li>局部变量<br>作用域：仅仅在begin end之间有效。</li></ol></li></ol><hr><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 说明：变量由系统提供，不是用户定义，属于服务器层面。</span><br><span class="hljs-comment">-- 注意：如果是全局级别，则需要加global，如果是会话级别，则需要加session，如果不写，默认session。</span><br><br><span class="hljs-comment">-- 使用方法：</span><br><span class="hljs-comment">-- 1、查看所有的系统变量</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span>;  <span class="hljs-comment"># 查看会话变量</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> <span class="hljs-keyword">VARIABLES</span>;  <span class="hljs-comment"># 查看全局变量</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">SESSION</span> <span class="hljs-keyword">VARIABLES</span>;  <span class="hljs-comment"># 查看会话变量</span><br><br><span class="hljs-comment">-- 2、查看满足条件的部分系统变量</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span>|[<span class="hljs-keyword">SESSION</span>] <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%char%'</span>;<br><br><span class="hljs-comment">-- 3、查看指定的某个系统变量的值</span><br><span class="hljs-keyword">SELECT</span> @@<span class="hljs-keyword">GLOBAL</span>|[<span class="hljs-keyword">SESSION</span>].系统变量名;<br><br><span class="hljs-comment">-- 4、为某个系统变量赋值</span><br><span class="hljs-comment">-- 方式一：</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span>|[<span class="hljs-keyword">SESSION</span>] 系统变量名 = 值;<br><span class="hljs-comment">-- 方式二：</span><br><span class="hljs-keyword">SET</span> @@<span class="hljs-keyword">GLOBAL</span>|[<span class="hljs-keyword">SESSION</span>].系统变量名 = 值;<br></code></pre></td></tr></table></figure><hr><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">说明：变量是用户自定义的，不是由系统生成的</span><br><span class="hljs-comment">使用步骤：</span><br><span class="hljs-comment">声明</span><br><span class="hljs-comment">赋值</span><br><span class="hljs-comment">使用（查看、比较、运算等）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">对用户变量[赋值]有两种方式，一种是直接用“=”号，另一种是用“:=”号。</span><br><span class="hljs-comment">其区别在于使用set命令对用户变量进行赋值时，两种方式都可以使用；</span><br><span class="hljs-comment">当使用select语句对用户变量进行赋值时，只能使用“:=”方式，因为在select语句中，“=”号在declare语句专门用于定义局部变量。set语句是设置不同类型的变量，包括会话变量和全局变量。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 1、声明并初始化</span><br><span class="hljs-comment">-- 方式一：</span><br><span class="hljs-keyword">SET</span> @用户名变量=值;<br><span class="hljs-comment">-- 方式二：</span><br><span class="hljs-keyword">SET</span> @用户名变量:=值;<br><span class="hljs-comment">-- 方式三：</span><br><span class="hljs-keyword">SELECT</span> @用户名变量名:=值;<br><br><br><span class="hljs-comment">-- 2、赋值（更新用户名变量的值）</span><br><span class="hljs-comment">-- 方式一：</span><br><span class="hljs-keyword">SET</span> @用户名变量=值;<br><span class="hljs-keyword">SET</span> @用户名变量:=值;<br><span class="hljs-keyword">SELECT</span> @用户名变量名:=值; <span class="hljs-comment"># 在SELECT下只能用:=</span><br><span class="hljs-comment">-- 方式二：</span><br><span class="hljs-keyword">SELECT</span> 字段 <span class="hljs-keyword">INTO</span> @变量名 <span class="hljs-keyword">FROM</span> 表;<br><br><br><span class="hljs-comment">-- 3、使用（查看用户变量的值）</span><br><span class="hljs-keyword">SELECT</span> @用户变量名;<br><br><br><span class="hljs-comment">-- 案例：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">INTO</span> @<span class="hljs-keyword">count</span> <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-keyword">count</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1、声明</span><br><span class="hljs-keyword">DECLARE</span> 变量名 类型;<br><span class="hljs-keyword">DECLARE</span> 变量名 类型 <span class="hljs-keyword">DEFAULT</span> 值;<br><br><br><span class="hljs-comment">-- 2、赋值（注意和用户变量名的区别）</span><br><span class="hljs-comment">-- 方式一：</span><br><span class="hljs-keyword">SET</span> 局部变量=值;<br><span class="hljs-keyword">SET</span> 局部名变量:=值;<br><span class="hljs-keyword">SELECT</span> @局部变量名:=值;<br><span class="hljs-comment">-- 方式二：</span><br><span class="hljs-keyword">SELECT</span> 字段 <span class="hljs-keyword">INTO</span> 局部变量名 <span class="hljs-keyword">FROM</span> 表;<br><br><br><span class="hljs-comment">-- 3、使用</span><br><span class="hljs-keyword">SELECT</span> 局部变量名;<br></code></pre></td></tr></table></figure><hr><h2 id="用户变量和局部变量的对比"><a href="#用户变量和局部变量的对比" class="headerlink" title="用户变量和局部变量的对比"></a>用户变量和局部变量的对比</h2><table><thead><tr><th align="center">变量类型</th><th align="center">作用域</th><th align="center">定义和使用位置</th><th align="center">语法</th></tr></thead><tbody><tr><td align="center">用户变量</td><td align="center">当前会话</td><td align="center">会话的任何位置</td><td align="center">必须加@符号，不用限定类型</td></tr><tr><td align="center">局部变量</td><td align="center">begin end中</td><td align="center">只能在begin end中，且为第一句话</td><td align="center">一般不用加@符号，需要限定类型</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">案例：声明两个变量并赋初始值，求和，并打印<br>1、用户变量<br><span class="hljs-builtin-name">SET</span> @m = 1;<br><span class="hljs-builtin-name">SET</span> @n = 2;<br><span class="hljs-builtin-name">SET</span> @sum = @m + @n;<br>SELECT @sum;<br><br><br>2、局部变量<br>DECLARE m INT<span class="hljs-built_in"> DEFAULT </span>1;<br>DECLARE n INT<span class="hljs-built_in"> DEFAULT </span>2;<br>DECLARE sum INT;<br><span class="hljs-builtin-name">SET</span> sum = m + n;<br>SELECT sum;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java链表</title>
      <link href="/2020/07/08/Java%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/07/08/Java%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#单向链表">单向链表</a></li><li><a href="#双向链表">双向链表</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> main.java.linkedlist;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> YunTang</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedListDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        HeroNode node1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">"宋江"</span>, <span class="hljs-string">"及时雨"</span>);<br>        HeroNode node2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">"卢俊义"</span>, <span class="hljs-string">"玉麒麟"</span>);<br>        HeroNode node3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">"吴用"</span>, <span class="hljs-string">"智多星"</span>);<br>        HeroNode node4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">"林冲"</span>, <span class="hljs-string">"豹子头"</span>);<br><br><span class="hljs-comment">//        HeroNode node1 = new HeroNode(4, "宋江", "及时雨");</span><br><span class="hljs-comment">//        HeroNode node2 = new HeroNode(2, "卢俊义", "玉麒麟");</span><br><span class="hljs-comment">//        HeroNode node3 = new HeroNode(2, "吴用", "智多星");</span><br><span class="hljs-comment">//        HeroNode node4 = new HeroNode(1, "林冲", "豹子头");</span><br><br>        SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br>        singleLinkedList.addByOrder(node1);<br>        singleLinkedList.addByOrder(node2);<br>        singleLinkedList.addByOrder(node3);<br>        singleLinkedList.addByOrder(node4);<br><br>        singleLinkedList.update(<span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">"小卢"</span>, <span class="hljs-string">"管家"</span>)); <span class="hljs-comment">// 修改节点</span><br><br>        singleLinkedList.del(<span class="hljs-number">2</span>); <span class="hljs-comment">// 删除节点</span><br><br>        singleLinkedList.list();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 定义HeroNode，每个HeroNode对象就是一个节点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String nickname;<br>    <span class="hljs-keyword">public</span> HeroNode next; <span class="hljs-comment">// 指向后一个节点默认为null</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, String name, String nickname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.no = no;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"HeroNode&#123;"</span> +<br>                <span class="hljs-string">"no="</span> + no +<br>                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", nickname='"</span> + nickname + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> </span>&#123;<br><br>    <span class="hljs-comment">// 先初始化一个头节点，头节点不能动，不存放具体的数据</span><br>    <span class="hljs-keyword">private</span> HeroNode head = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">0</span>, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>);<br><br>    <span class="hljs-comment">/*返回头节点*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getHead</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">/*添加节点到单向链表*/</span><br>    <span class="hljs-comment">// 思路：找到当前链表的最后一个节点；将最后一个节点指向添加节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 由于头节点不能动，因此需要创建一个辅助指针temp</span><br>        HeroNode temp = head;<br>        <span class="hljs-comment">// 找到最后一个节点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">// 添加节点</span><br>        temp.next = heroNode;<br>    &#125;<br><br>    <span class="hljs-comment">/*遍历*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 判断链表是否为空</span><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">"此链表为空"</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        HeroNode temp = head.next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(temp.toString());<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*根据排名插入到指定的位置*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span><br>        <span class="hljs-comment">// 因为单链表，因为我们找的temp是位于添加位置的前一个节点，否则插入不了</span><br>        HeroNode temp = head;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 到达链表尾部</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no &gt; heroNode.no) &#123; <span class="hljs-comment">// 找到了添加为位置</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no) &#123; <span class="hljs-comment">// 希望添加的heroNode编号已然存在</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.printf(<span class="hljs-string">"相同的no:%d只能添加一个\n"</span>, heroNode.no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            heroNode.next = temp.next;<br>            temp.next = heroNode;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*修改节点的信息*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode newHerNode)</span> </span>&#123;<br><br>        HeroNode temp = head.next;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 已遍历完链表，没找到对应的no</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.no == newHerNode.no) &#123; <span class="hljs-comment">// 找到需要修改的节点</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            temp.nickname = newHerNode.nickname;<br>            temp.name = newHerNode.name;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">"编号为%d的节点不存在\n"</span>, newHerNode.no);<br>    &#125;<br><br>    <span class="hljs-comment">/*删除节点*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br><br>        HeroNode temp = head;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 已遍历完链表，没找到对应的no</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no == no) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.printf(<span class="hljs-string">"编号为%d的节点不存在\n"</span>, no);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        temp.next = temp.next.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> main.java.linkedlist;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> YunTang</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedListDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-comment">//        HeroNode2 node1 = new HeroNode2(1, "宋江", "及时雨");</span><br><span class="hljs-comment">//        HeroNode2 node2 = new HeroNode2(2, "卢俊义", "玉麒麟");</span><br><span class="hljs-comment">//        HeroNode2 node3 = new HeroNode2(3, "吴用", "智多星");</span><br><span class="hljs-comment">//        HeroNode2 node4 = new HeroNode2(4, "林冲", "豹子头");</span><br><br>        HeroNode2 node1 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">4</span>, <span class="hljs-string">"宋江"</span>, <span class="hljs-string">"及时雨"</span>);<br>        HeroNode2 node2 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">2</span>, <span class="hljs-string">"卢俊义"</span>, <span class="hljs-string">"玉麒麟"</span>);<br>        HeroNode2 node3 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">2</span>, <span class="hljs-string">"吴用"</span>, <span class="hljs-string">"智多星"</span>);<br>        HeroNode2 node4 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">1</span>, <span class="hljs-string">"林冲"</span>, <span class="hljs-string">"豹子头"</span>);<br><br>        DoubleLinkedList doubleLinkedList = <span class="hljs-keyword">new</span> DoubleLinkedList();<br>        doubleLinkedList.addByOrder(node1);<br>        doubleLinkedList.addByOrder(node2);<br>        doubleLinkedList.addByOrder(node3);<br>        doubleLinkedList.addByOrder(node4);<br><br>        doubleLinkedList.update(<span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">4</span>, <span class="hljs-string">"公孙胜"</span>, <span class="hljs-string">"入云龙"</span>)); <span class="hljs-comment">// 修改节点</span><br><br>        doubleLinkedList.del(<span class="hljs-number">3</span>);<br><br>        doubleLinkedList.list();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 定义HeroNode，每个HeroNode对象就是一个节点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode2</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String nickname;<br>    <span class="hljs-keyword">public</span> HeroNode2 prev; <span class="hljs-comment">// 执行前一个结点，默认为null</span><br>    <span class="hljs-keyword">public</span> HeroNode2 next; <span class="hljs-comment">// 执行后一个节点，默认为null</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, String name, String nickname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.no = no;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"HeroNode2&#123;"</span> +<br>                <span class="hljs-string">"no="</span> + no +<br>                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", nickname='"</span> + nickname + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span> </span>&#123;<br><br>    <span class="hljs-comment">/*初始化头节点*/</span><br>    <span class="hljs-keyword">private</span> HeroNode2 head = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">0</span>, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>);<br><br>    <span class="hljs-comment">/*获得头节点*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode2 <span class="hljs-title">getHead</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">/*添加节点到单向链表*/</span><br>    <span class="hljs-comment">// 思路：找到当前链表的最后一个节点；将最后一个节点的next指向添加节点，并将添加节点的prev指向最后一个节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode2 heroNode2)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 由于头节点不能动，因此需要创建一个辅助指针temp</span><br>        HeroNode2 temp = head;<br>        <span class="hljs-comment">// 找到最后一个节点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">// 添加节点，形成双向链表</span><br>        temp.next = heroNode2;<br>        heroNode2.prev = temp;<br>    &#125;<br><br>    <span class="hljs-comment">/*遍历双向链表*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 判断链表是否为空</span><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">"此链表为空"</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        HeroNode2 temp = head.next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(temp.toString());<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*根据排名插入到指定的位置*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroNode2 heroNode2)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span><br>        <span class="hljs-comment">// 因为单链表，因为我们找的temp是位于添加位置的前一个节点，否则插入不了</span><br>        HeroNode2 temp = head;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 到达链表尾部</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no &gt; heroNode2.no) &#123; <span class="hljs-comment">// 找到了添加为位置</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode2.no) &#123; <span class="hljs-comment">// 希望添加的heroNode编号已然存在</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.printf(<span class="hljs-string">"相同的no:%d只能添加一个\n"</span>, heroNode2.no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 注意temp是尾结点的情况</span><br>                heroNode2.next = temp.next;<br>                temp.next.prev = heroNode2;<br>            &#125;<br>            temp.next = heroNode2;<br>            heroNode2.prev = temp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*修改节点的信息*/</span><br>    <span class="hljs-comment">// 和单向链表一致</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode2 newHerNode2)</span> </span>&#123;<br><br>        HeroNode2 temp = head.next;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 已遍历完链表，没找到对应的no</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.no == newHerNode2.no) &#123; <span class="hljs-comment">// 找到需要修改的节点</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            temp.nickname = newHerNode2.nickname;<br>            temp.name = newHerNode2.name;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">"编号为%d的节点不存在\n"</span>, newHerNode2.no);<br>    &#125;<br><br>    <span class="hljs-comment">/*删除节点*/</span><br>    <span class="hljs-comment">// 1.对于双向链表，我们可以直接找到要删除的这个节点</span><br>    <span class="hljs-comment">// 2.找到后，自我删除即可</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br><br>        HeroNode2 temp = head.next;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 已遍历完链表，没找到对应的no</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.no == no) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.printf(<span class="hljs-string">"编号为%d的节点不存在\n"</span>, no);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        temp.prev.next = temp.next;<br>        <span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 如果删除的是最后一个节点，则不用执行下面的语句</span><br>            temp.next.prev = temp.prev;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection</title>
      <link href="/2020/07/07/Collection/"/>
      <url>/2020/07/07/Collection/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#基本框架">基本框架</a></li><li><a href="#常用方法">常用方法</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">Collection接口：</span><span class="hljs-title">[</span><span class="hljs-comment">单列</span><span class="hljs-title">]</span><span class="hljs-comment">集合，用来存储一个一个的</span><span class="hljs-title">[</span><span class="hljs-comment">对象</span><span class="hljs-title">]</span><br>    <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">List接口：存储有序的、可重复的数据。</span>  --&gt;<span class="hljs-comment">“动态”数组</span><br><span class="hljs-comment"></span>        <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">ArrayList、LinkedList、Vector</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span>    <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">Set接口：存储无序的、不可重复的数据。</span>   --&gt;<span class="hljs-comment">高中讲的“集合”</span><br><span class="hljs-comment"></span>        <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">HashSet、LinkedHashSet、TreeSet</span><br></code></pre></td></tr></table></figure><hr><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br><br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br><br>        <span class="hljs-comment">// add(Obeject e)：将元素e添加到集合coll中</span><br>        coll.add(<span class="hljs-string">"AA"</span>);<br>        coll.add(<span class="hljs-string">"BB"</span>);<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"DD"</span>));<br>        coll.add(<span class="hljs-number">123</span>); <span class="hljs-comment">// 自动装箱</span><br>        coll.add(<span class="hljs-keyword">new</span> Date());<br><br>        <span class="hljs-comment">// size()：获取添加元素的个数</span><br>        System.out.println(coll.size()); <span class="hljs-comment">// 4</span><br><br>        <span class="hljs-comment">//addall(Collection coll1)：将coll1集合中的元素添加到当前的集合中</span><br>        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();<br>        coll1.add(<span class="hljs-number">456</span>);<br>        coll1.add(<span class="hljs-string">"CC"</span>);<br>        coll.addAll(coll1);<br>        System.out.println(coll.size()); <span class="hljs-comment">// 6</span><br>        System.out.println(coll);<br><br>        <span class="hljs-comment">// isEmpty()：判断当前集合是否为空</span><br>        System.out.println(coll.isEmpty());<br><br>        <span class="hljs-comment">// clear()：清空集合元素</span><br><span class="hljs-comment">//        coll.clear();</span><br><br>        <span class="hljs-comment">// contains(Object obj)：判断当前集合中是否包含obj</span><br>        <span class="hljs-comment">// 我们在判断时会调用obj对象所在类的[equals方法]</span><br>        System.out.println(coll.contains(<span class="hljs-number">123</span>));<br>        System.out.println(coll.contains(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"DD"</span>)));<br><br>        <span class="hljs-comment">// containsall(Collection coll1)：判断形参coll1中的所有元素是否都存在于当前集合中</span><br>        Collection coll2 = Arrays.asList(<span class="hljs-number">123</span>, <span class="hljs-number">45678</span>);<br>        System.out.println(coll.containsAll(coll2));<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br><br>        <span class="hljs-comment">// add(Obeject e)：将元素e添加到集合coll中</span><br>        coll.add(<span class="hljs-string">"AA"</span>);<br>        coll.add(<span class="hljs-string">"BB"</span>);<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"DD"</span>));<br>        coll.add(<span class="hljs-number">123</span>); <span class="hljs-comment">// 自动装箱</span><br><br>        <span class="hljs-comment">// remove(Object obj)：从当前集合中移除obj</span><br>        coll.remove(<span class="hljs-number">123</span>);<br>        System.out.println(coll);<br><br>        <span class="hljs-comment">// removeall(Collection coll1)：差集：从当前集合中移除coll1中所有的元素</span><br>        Collection coll1 = Arrays.asList(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>);<br>        coll.removeAll(coll1);<br>        System.out.println(coll);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"AA"</span>));<br>        coll.add(<span class="hljs-string">"BB"</span>);<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">// retainAll(Collection coll1)：交集：获取当前集合和coll集合的交集，[并返回给当前集合]</span><br><span class="hljs-comment">//        Collection coll1 = Arrays.asList(123, 456, 789);</span><br><span class="hljs-comment">//        coll.retainAll(coll1);</span><br><span class="hljs-comment">//        System.out.println(coll);</span><br><br>        <span class="hljs-comment">// equals(Object obj)：要想返回true，需要当前集合和形参集合的元素都相同</span><br>        Collection coll2 = <span class="hljs-keyword">new</span> ArrayList();<br>        coll2.add(<span class="hljs-number">123</span>);<br>        coll2.add(<span class="hljs-number">456</span>);<br>        coll2.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"AA"</span>));<br>        coll2.add(<span class="hljs-string">"BB"</span>);<br>        coll2.add(<span class="hljs-keyword">false</span>);<br><br>        System.out.println(coll.equals(coll2));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"AA"</span>));<br>        coll.add(<span class="hljs-string">"BB"</span>);<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">// hashCode()：返回当前对象的哈希值</span><br>        System.out.println(coll.hashCode());<br><br>        <span class="hljs-comment">// 集合---&gt;数组：：toArray()</span><br>        Object[] objects = coll.toArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.length; i++) &#123;<br>            System.out.print(objects[i] + <span class="hljs-string">"\t"</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 数组---&gt;集合：调用Arrays类的[静态方法]asList()</span><br>        List&lt;String&gt; strings = Arrays.asList(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"AA"</span>, <span class="hljs-string">"BB"</span>, <span class="hljs-string">"CC"</span>&#125;);<br>        System.out.println(strings);<br><br>        List&lt;<span class="hljs-keyword">int</span>[]&gt; arr1 = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">123</span>, <span class="hljs-number">456</span>&#125;);<br>        System.out.println(arr1.size()); <span class="hljs-comment">// 1</span><br><br>        List&lt;Integer&gt; arr2 = Arrays.asList(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>);<br>        System.out.println(arr2.size()); <span class="hljs-comment">// 2</span><br><br>        List&lt;Integer&gt; arr3 = Arrays.asList(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">123</span>), <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">456</span>));<br>        System.out.println(arr3.size()); <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-comment">// iterator()：返回Iterator接口的实例，用于遍历集合元素。放在IteratorTest.java中测试</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql锁机制</title>
      <link href="/2020/07/05/Mysql%E9%94%81%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/07/05/Mysql%E9%94%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#定义">定义</a></li><li><a href="#锁的分类">锁的分类</a></li><li><a href="#表锁偏读">表锁（偏读）</a></li><li><a href="#行锁偏写">行锁（偏写）</a></li><li><a href="#页锁了解">页锁（了解）</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>&#8195;&#8195;锁是计算机协调多个进程或线程并发访问某一资源的机制。</p><hr><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><p>&#8195;&#8195;按数据操作的类型（读、写）分：</p><ul><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li><li>写锁（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。</li></ul><p>&#8195;&#8195;<code>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好</code>，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很耗资源的事情（涉及获取，检查，释放锁等动作），因此数据库系统需要在高并发响应和系统性能两方面进行平衡，这样就产生了“锁粒度（Lock granularity）”的概念。<br>&#8195;&#8195;一种提高共享资源并发发性的方式是<code>让锁定对象更有选择性</code>。尽量只锁定需要修改的部分数据，而不是所有的资源。更理想的方式是，只对会修改的数据片进行精确的锁定。任何时候，在给定的资源上，锁定的数据量越少，则系统的并发程度越高，只要相互之间不发生冲突即可。<br>&#8195;&#8195;按对数据操作的粒度分：</p><ul><li>表锁</li><li>行锁</li></ul><hr><h2 id="表锁（偏读）"><a href="#表锁（偏读）" class="headerlink" title="表锁（偏读）"></a>表锁（偏读）</h2><p>&#8195;&#8195;特点：<code>偏向MyISAM存储引擎（默认表锁），开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">SHOW OPEN TABLES;  <span class="hljs-comment"># 查看各个数据库中各表的加锁情况</span><br>LOCK TABLE 表名<span class="hljs-number">1</span> read(write), 表名<span class="hljs-number">2</span> read(write), ...;  <span class="hljs-comment"># 手动给某些表加读锁或者写锁</span><br>UNLOCK TABLES;  <span class="hljs-comment"># 解锁</span><br>SHOW STATUS LIKE <span class="hljs-string">'table%'</span>;  <span class="hljs-comment"># 表锁分析</span><br><span class="hljs-comment"># Table_locks_immediate：产生表级锁定的次数，表示可以立即获取锁的查询次数，每次立即获取锁值加1。</span><br><span class="hljs-comment"># Table_locks_waited：出现表级锁争用发生等待的次数（不能立即获取锁的次数，每等待一次增加1），此值高则说明存在着较严重的表级锁争用情况。</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;假设两个会话session1和session2连接至同一数据库，若通过session1给数据库中某一表添加<code>读锁</code>，则：</p><ul><li>session1可以读取该表，但无权修改本表和读取该数据库中的其它表，直至给该表解锁。</li><li>session2可以读取该表和该数据库的其它表，但是若修改此表会发生<code>阻塞</code>，直至给该表解锁。</li></ul><p>&#8195;&#8195;假设两个会话session1和session2连接至同一数据库，若通过session1给数据库中某一表添加<code>写锁</code>，则：</p><ul><li>session1可以读取该表和修改该表，但无权读取该数据哭的其它表。</li><li>session2可以读取该数据库的其它表，若读取该表会发生<code>阻塞</code>，直至给该表解锁。<br>&#8195;&#8195;<code>MyISAM</code>在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。 </li></ul><table><thead><tr><th align="center">锁类型</th><th align="center">他人可读</th><th align="center">他人可写</th></tr></thead><tbody><tr><td align="center">读锁</td><td align="center">可</td><td align="center">不可</td></tr><tr><td align="center">写锁</td><td align="center">不可</td><td align="center">不可</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>&#8195;&#8195;<code>简而言之，就是读锁会阻塞写，但是不会堵塞读，而写锁则会把读和写都堵塞</code>。此外，MyISAM的读写锁调度是<code>写优先</code>，这也是MyISAM不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，大量更新会使查询很难得到锁，从而造成永久阻塞。</p><hr><h2 id="行锁（偏写）"><a href="#行锁（偏写）" class="headerlink" title="行锁（偏写）"></a>行锁（偏写）</h2><p>&#8195;&#8195;特点：<code>偏向InnoDB存储引擎（默认行锁），开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高</code>。InnoDB与MyISAM的最大不同有两点：一是<code>支持事务（TRANSACTION）</code>；二是采用了<code>行锁</code>。<br>&#8195;&#8195;并发事务处理带来的问题：</p><ul><li>更新丢失（Lost Update）：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题——<code>最后的更新覆盖了由其他事务所做的更新</code>。</li><li>脏对（Dirty Reads）：事务A读取到了事务B已修改但<code>尚未提交</code>的的数据，还在这个数据基础上做了操作。</li><li>不可重复读（Non-Repeatable Reads）：一个事务范围内<code>两个相同的查询</code>却返回了<code>不同数据</code>。</li><li>幻读（Phantom Reads）：事务A读取到了事务B提交的<code>新增数据</code>。</li></ul><p><img src="/2020/07/05/Mysql%E9%94%81%E6%9C%BA%E5%88%B6/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="事务隔离级别">&#8195;&#8195;假设两个会话session1和session2连接至同一数据库，两个会话不能同时对<code>同一张表的同一行</code>进行写操作，即若session1对表中某一行进行写操作，但是没有<code>commit</code>，同时session2对该行也进行写操作，便会发生阻塞现象，直至session1 commit。<br>&#8195;&#8195;<font color="red">注意：varchar不用’’导致系统自动转换类型, 行锁会变为表锁</font>。<br>&#8195;&#8195;另外，当我们用<code>范围条件</code>而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；<code>对于键值在条件范围内但并不存在的记录，叫做间隙（GAP）</code>，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的<code>间隙锁（GAP Lock）</code>。<br>&#8195;&#8195;间隙锁的危害：间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据，进而影响性能。<br><img src="/2020/07/05/Mysql%E9%94%81%E6%9C%BA%E5%88%B6/%E9%97%B4%E9%9A%99%E9%94%81.png" alt="间隙锁">&#8195;&#8195;给SELECT加锁（给某些行加锁）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT 语句 LOCK IN SHARE MODE;  <span class="hljs-comment"># Mysql会对查询结果中的每行都加共享锁（读锁）</span><br><span class="hljs-comment"># 举例：SELECT * FROM table WHERE 筛选条件 LOCK IN SHARE MODE;</span><br>SELECT 语句 FOR UPDATE;  <span class="hljs-comment"># Mysql会对查询结果中的每行都加排他锁（写锁）</span><br><span class="hljs-comment"># 举例：SELECT * FROM table WHERE 筛选条件 FOR UPDATE;</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;行锁的分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SHOW STATUS LIKE <span class="hljs-string">'innodb_row_lock%'</span>;<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;上述查询结果及含义：</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">Innodb_row_lock_current_waits</td><td align="center">当前正在等待锁定的数量</td></tr><tr><td align="center">Innodb_row_lock_time（重要）</td><td align="center">从系统启动到现在锁定总时间长度</td></tr><tr><td align="center">Innodb_row_lock_time_avg（重要）</td><td align="center">每次等待所花平均时间</td></tr><tr><td align="center">Innodb_row_lock_time_max</td><td align="center">从系统启动到现在等待最常的一次所花的时间</td></tr><tr><td align="center">Innodb_row_lock_waits（重要）</td><td align="center">系统启动后到现在总共等待的次数</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p>&#8195;&#8195;行锁优化建议：</p><ol><li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。</li><li>尽可能较少检索条件，避免间隙锁。</li><li>尽量控制事务大小，减少锁定资源量和时间长度。</li><li>锁住某行后，尽量不要去调别的行或表，赶紧处理被锁住的行然后释放掉锁。</li><li>涉及相同表的事务，对于调用表的顺序尽量保持一致。</li><li>在业务环境允许的情况下，尽可能低级别事务隔离。</li></ol><hr><h2 id="页锁（了解）"><a href="#页锁（了解）" class="headerlink" title="页锁（了解）"></a>页锁（了解）</h2><p>&#8195;&#8195;开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引优化</title>
      <link href="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
      <url>/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#索引优化分析">索引优化分析</a><ul><li><a href="#单表查询优化">单表查询优化</a></li><li><a href="#关联查询优化">关联查询优化</a></li><li><a href="#索引失效的情况">索引失效的情况</a><ul><li><a href="#最佳左前缀法则">最佳左前缀法则</a></li><li><a href="#索引中使用函数">索引中使用函数</a></li><li><a href="#索引中使用范围">索引中使用范围</a></li><li><a href="#使用select-">使用select *</a></li><li><a href="#使用不等于-或者">使用不等于（!= 或者&lt;&gt;）</a></li><li><a href="#使用is-null或者is-not-nul">使用is null或者is not nul</a></li><li><a href="#使用like">使用like</a></li><li><a href="#字符串varchar不加">字符串varchar不加’’</a></li><li><a href="#使用or">使用or</a></li><li><a href="#总结">总结</a></li><li><a href="#口诀">口诀</a></li></ul></li></ul></li><li><a href="#inexists优化">in、exists优化</a></li><li><a href="#order-by优化">order by优化</a><ul><li><a href="#补充">补充</a></li></ul></li><li><a href="#group-by优化">group by优化</a></li><li><a href="#查询截取分析">查询截取分析</a><ul><li><a href="#慢查询日志">慢查询日志</a><ul><li><a href="#介绍">介绍</a></li><li><a href="#日志分析工具mysqldumpslow">日志分析工具（mysqldumpslow）</a></li></ul></li></ul></li><li><a href="#show-profile">show profile</a></li><li><a href="#全局查询日志">全局查询日志</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="索引优化分析"><a href="#索引优化分析" class="headerlink" title="索引优化分析"></a>索引优化分析</h2><h3 id="单表查询优化"><a href="#单表查询优化" class="headerlink" title="单表查询优化"></a>单表查询优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT<br>id <br>FROM<br>article <br>WHERE<br>category_id = <span class="hljs-number">1</span> <br>AND comments &gt; <span class="hljs-number">1</span> <br>ORDER BY<br>views DESC <br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/%E5%8D%95%E8%A1%A8%E4%BC%98%E5%8C%961.png" alt="单表优化1">&#8195;&#8195;很显然，type是ALL，extra里还出现了Using filesort，所以必须优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建索引</span><br>CREATE INDEX idx_article_ccv ON article ( category_id, comments, views );<br><br>EXPLAIN SELECT<br>id <br>FROM<br>article <br>WHERE<br>category_id = <span class="hljs-number">1</span> <br>AND comments &gt; <span class="hljs-number">1</span> <br>ORDER BY<br>views DESC <br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/%E5%8D%95%E8%A1%A8%E4%BC%98%E5%8C%962.png" alt="单表优化2">&#8195;&#8195;type变成了range，这是可以忍受的。但是extra里使用了Using filesort，所以需要继续优化。<br>&#8195;&#8195;我们已经建立了索引，为什么会没有用呢？<br>&#8195;&#8195;这是因为按照BTree索引的工作原理，先排序category_id。如果遇到相同的category_id则再排序comments，如果遇到相同的comments则再排序views。由于comments字段在联合索引里处于中间位置，且comments &gt; 1条件是一个范围值（所谓 range），所以MySQL无法利用索引再对后面的views部分进行检索，即<code>range类型查询字段后面的索引无效</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除已创建索引</span><br>DROP INDEX idx_article_ccv ON article;<br><span class="hljs-comment"># 重新创建索引</span><br>CREATE INDEX idx_article_cv ON article( category_id, views );<br><br>EXPLAIN SELECT<br>id <br>FROM<br>article <br>WHERE<br>category_id = <span class="hljs-number">1</span> <br>AND comments &gt; <span class="hljs-number">1</span> <br>ORDER BY<br>views DESC <br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/%E5%8D%95%E8%A1%A8%E4%BC%98%E5%8C%963.png" alt="单表优化3">&#8195;&#8195;可以看到：type变为了ref，extra中的Using filesort 也消失了，结果非常理想。</p><hr><h3 id="关联查询优化"><a href="#关联查询优化" class="headerlink" title="关联查询优化"></a>关联查询优化</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 左连接</span><br>EXPLAIN SELECT<br>* <br>FROM<br><span class="hljs-class"><span class="hljs-keyword">class</span></span><br>LEFT JOIN book ON class.card = book.card;<br></code></pre></td></tr></table></figure><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%961.png" alt="关联查询优化1">&#8195;&#8195;可以发现：type有All。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建右表索引</span><br>CREATE INDEX idx_book_card ON book( card );<br><span class="hljs-comment"># 左连接</span><br>EXPLAIN SELECT<br>* <br>FROM<br><span class="hljs-class"><span class="hljs-keyword">class</span></span><br>LEFT JOIN book ON class.card = book.card;<br></code></pre></td></tr></table></figure><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%962.png" alt="关联查询优化2">&#8195;&#8195;可以看：到第二行的type变为了ref，rows也变成了1，优化比较明显。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除左表索引</span><br>DROP INDEX idx_book_card ON book;<br><span class="hljs-comment"># 创建左表索引</span><br>CREATE INDEX idx_class_card ON class( card );<br><span class="hljs-comment"># 左连接</span><br>EXPLAIN SELECT<br>* <br>FROM<br><span class="hljs-class"><span class="hljs-keyword">class</span></span><br>LEFT JOIN book ON class.card = book.card;<br></code></pre></td></tr></table></figure><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%963.png" alt="关联查询优化3">&#8195;&#8195;可以发现：type第二行又变回了ALL。这是由<code>左连接特性</code>决定的。<code>LEFT JOIN条件用于确定如何从右表搜索行，左边一定都有，所以右边是我们的关键点，一定需要建立索引</code>。<br>&#8195;&#8195;总结：使用<code>left join</code>需要给<code>右表（被驱动表）</code>建立索引；使用<code>right join</code>需要给<code>左表（被驱动表）</code>建立索引。<br>&#8195;&#8195;建议：</p><ol><li>保证被驱动表join字段已经建立索引。</li><li>left join/right join时，选择小表作为驱动表，大表作为被驱动表。</li><li>inner join时，mysql会自己将小结果集的表选为驱动表。</li><li>子查询尽量不要放在被驱动表，有可能使用不到索引。若必须用到子查询，可将子查询设置为驱动表，因为驱动表的type肯定是all，而子查询返回的结果表没有索引，必定也是all。</li><li>优先优化嵌套循环的内层循环。</li></ol><hr><h3 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">CREATE INDEX idx_staffs_nameAgePos ON staffs(NAME, age, pos);  <span class="hljs-comment"># 创建索引</span><br></code></pre></td></tr></table></figure><hr><h4 id="最佳左前缀法则"><a href="#最佳左前缀法则" class="headerlink" title="最佳左前缀法则"></a>最佳左前缀法则</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE NAME = <span class="hljs-string">'July'</span>;  <span class="hljs-comment"># 索引有效</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME = <span class="hljs-string">'July'</span> AND age = <span class="hljs-number">25</span>;  <span class="hljs-comment"># 索引有效</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME = <span class="hljs-string">'July'</span> AND age = <span class="hljs-number">25</span> AND pos = <span class="hljs-string">'dev'</span>;  <span class="hljs-comment"># 索引有效</span><br>EXPLAIN SELECT * FROM staffs WHERE age = <span class="hljs-number">25</span> AND pos = <span class="hljs-string">'dev'</span>;  <span class="hljs-comment"># 索引失效</span><br>EXPLAIN SELECT * FROM staffs WHERE pos = <span class="hljs-string">'dev'</span>;  <span class="hljs-comment"># 索引失效</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME = <span class="hljs-string">'July'</span> AND pos = <span class="hljs-string">'dev'</span>;  <span class="hljs-comment"># 索引部分有效</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p><hr><h4 id="索引中使用函数"><a href="#索引中使用函数" class="headerlink" title="索引中使用函数"></a>索引中使用函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE left( NAME, <span class="hljs-number">4</span> ) = <span class="hljs-string">'July'</span>;  <span class="hljs-comment"># 索引失效</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描。</p><hr><h4 id="索引中使用范围"><a href="#索引中使用范围" class="headerlink" title="索引中使用范围"></a>索引中使用范围</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE NAME = <span class="hljs-string">'july'</span> AND age &gt; <span class="hljs-number">25</span> AND pos = <span class="hljs-string">'manager'</span>;  <span class="hljs-comment"># 索引部分有效</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;存储引擎不能使用索引中范围条件右边的列。</p><hr><h4 id="使用select"><a href="#使用select" class="headerlink" title="使用select *"></a>使用select *</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT NAME, age, pos FROM staffs WHERE NAME = <span class="hljs-string">'july'</span> AND age = <span class="hljs-number">25</span> AND pos = <span class="hljs-string">'manager'</span>;  <span class="hljs-comment"># extra为Using index</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME = <span class="hljs-string">'july'</span> AND age = <span class="hljs-number">25</span> AND pos = <span class="hljs-string">'manager'</span>;  <span class="hljs-comment"># extra为Null</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *。</p><hr><h4 id="使用不等于（-或者-lt-gt-）"><a href="#使用不等于（-或者-lt-gt-）" class="headerlink" title="使用不等于（!= 或者&lt;&gt;）"></a>使用不等于（!= 或者&lt;&gt;）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE NAME != <span class="hljs-string">'july'</span>;  <span class="hljs-comment"># 索引失效</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME &lt;&gt; <span class="hljs-string">'july'</span>;  <span class="hljs-comment"># 索引失效</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;mysql在使用不等于（!= 或者&lt;&gt;）的时候无法使用索引会导致全表扫描。</p><hr><h4 id="使用is-null或者is-not-nul"><a href="#使用is-null或者is-not-nul" class="headerlink" title="使用is null或者is not nul"></a>使用is null或者is not nul</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE NAME IS NOT NULL;  <span class="hljs-comment"># 索引失效</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME IS NULL;  <span class="hljs-comment"># 索引有效</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;is not null也无法使用索引，但是is null是可以使用索引的。</p><hr><h4 id="使用like"><a href="#使用like" class="headerlink" title="使用like"></a>使用like</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE NAME LIKE <span class="hljs-string">'%july%'</span>;  <span class="hljs-comment"># 索引失效</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME LIKE <span class="hljs-string">'%july'</span>;  <span class="hljs-comment"># 索引失效</span><br>EXPLAIN SELECT * FROM staffs WHERE NAME LIKE <span class="hljs-string">'july%'</span>;  <span class="hljs-comment"># 索引有效</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用like关键字的时候，%放右边会使用索引。如果一定要使用%char%的形式，则需要用覆盖索引。</p><hr><h4 id="字符串varchar不加’’"><a href="#字符串varchar不加’’" class="headerlink" title="字符串varchar不加’’"></a>字符串varchar不加’’</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE `NAME` = <span class="hljs-string">'2000'</span>;  <span class="hljs-comment"># 索引有效</span><br>EXPLAIN SELECT * FROM staffs WHERE `NAME` = <span class="hljs-number">2000</span>;  <span class="hljs-comment"># 索引失效（SELECT语句也能查询出结果，因为mysql会自动隐性类型转换）</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;字符串不加单引号索引失效。</p><hr><h4 id="使用or"><a href="#使用or" class="headerlink" title="使用or"></a>使用or</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">EXPLAIN SELECT * FROM staffs WHERE NAME = <span class="hljs-string">'july'</span> OR age = <span class="hljs-number">23</span>;  <span class="hljs-comment"># 索引失效</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;用or来连接时会索引失效。</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&#8195;&#8195;假设index(a, b, c)。</p><table><thead><tr><th align="center">Where语句</th><th align="center">索引是否被使用</th></tr></thead><tbody><tr><td align="center">where a = 3</td><td align="center">Y，使用到a</td></tr><tr><td align="center">where a = 3 and b = 5</td><td align="center">Y，使用到a，b</td></tr><tr><td align="center">where a = 3 and b = 5 and c = 4</td><td align="center">Y，使用到a，b，c</td></tr><tr><td align="center">where b = 3 或者 where b = 3 and c = 4  或者 where c = 4</td><td align="center">N</td></tr><tr><td align="center">where a = 3 and c = 5</td><td align="center">使用到a，但是c不可以，因为b中间断了</td></tr><tr><td align="center">where a = 3 and b &gt; 4 and c = 5</td><td align="center">使用到a和b，c不能用在范围之后，b后断了</td></tr><tr><td align="center">where a = 3 and b like ‘kk%’ and c = 4</td><td align="center">Y，使用到a，b，c</td></tr><tr><td align="center">where a = 3 and b like ‘%kk’ and c = 4</td><td align="center">Y，只用到a</td></tr><tr><td align="center">where a = 3 and b like ‘%kk%’ and c = 4</td><td align="center">Y，只用到a</td></tr><tr><td align="center">where a = 3 and b like ‘k%kk%’ and c = 4</td><td align="center">Y，使用到a，b，c</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><hr><h4 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h4><ol><li>全职匹配我最爱，最左前缀要遵守；</li><li>带头大哥不能死，中间兄弟不能断（永远符合最佳左前缀原则）；</li><li>索引列上少计算，范围之后全失效；</li><li>like百分写最右，覆盖索引不写*；</li><li>不等空值要少用，varchar引号不可丢。</li></ol><hr><h2 id="in、exists优化"><a href="#in、exists优化" class="headerlink" title="in、exists优化"></a>in、exists优化</h2><p>&#8195;&#8195;优化原则：<code>小表驱动大表</code>，即小的数据集驱动大的数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT  * FROM A WHERE id IN (SELECT id FROM B);<br><span class="hljs-comment"># ①先执行SELECT id FROM B;</span><br><span class="hljs-comment"># ②再执行SELECT * FROM A WHERE A.id = B.id;</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;当B表的数据集小于A表时，用<code>IN</code>优于<code>EXISTS</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT * FROM A WHERE EXISTS (SELECT <span class="hljs-number">1</span> FROM B WHERE B.id = A.id);<br><span class="hljs-comment"># ①先执行SELECT * FROM A;</span><br><span class="hljs-comment"># ②再执行SELECT * FROM B WHERE B.id = A.id;</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;exists语法说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT ... FROM table WHERE EXISTS (subquery);<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<code>将主查询中的数据放到子查询中做验证，根据验证结果（true/false）来决定主查询的数据结果是否得以保留</code>。因为<code>EXISTS (subquery)</code>的结果只是true或者false，所以子查询中的<code>SELECT 1</code>可以是<code>SELECT *、SELECT &#39;X&#39;以及SELECT 常量</code>，实际执行时MySQL会忽略SELECT的结果。</p><hr><h2 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h2><p>&#8195;&#8195;尽量使用<code>Index</code>方式排序，避免使用<code>FileSort</code>方式排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">CREATE INDEX idx_A_ageBrith ON tblA (age, Birth);<br></code></pre></td></tr></table></figure><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/order_by1.png" alt="order_by1"><br><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/order_by2.png" alt="order_br2">&#8195;&#8195;总结：尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀原则。<br><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/order_by%E6%80%BB%E7%BB%93.png" alt="order_by总结">&#8195;&#8195;第二种情况中，<code>where a = const and b &gt; const order by b, c</code>不会出现<code>using filesort</code>，因为order by后的b用到了索引，b、c两个衔接上了。而<code>where a = const and b &gt; const order by c</code>将会出现<code>using filesort</code>，因为<code>b用了范围索引</code>且order by后只用了c没有衔接上。</p><hr><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>&#8195;&#8195;如果不在索引列上，filesort有两种算法：<code>双路排序</code>和<code>单路排序</code>。<br>&#8195;&#8195;双路排序：MySQL4.1之前是使用双路排序，字面意思就是两次扫描磁盘，最终得到数据，读取行指针和order by列，对它们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。从<code>磁盘</code>取排序字段，在<code>buffer（缓存）</code>进行排序，再从磁盘取其他字段。取一批数据，要对磁盘进行了两次扫描，众所周知I\O是很耗时的，所以在MySQL4.1之后，出现了第二种改进的算法，就是单路排序。<br>&#8195;&#8195;从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后将扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据，并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。但是它有一个缺点：在sort_buffer中，单路排序比双路排序要多占用很多空间，因为单路排序是把所有字段都取出, 所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再去取sort_buffer容量大小，再排，…，从而多次I/O。<br>&#8195;&#8195;总的来说，单路算法优于双路算法。为了解决上述出现的问题，有一下三种解决方案：</p><ul><li>增大<code>sort_buffer_size</code>参数（单路排序的内存大小）。不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的。</li><li>增大<code>max_length_for_sort_data</code>参数（单次排序字段大小）。提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率。</li><li><code>去掉select后面不需要的字段</code>。使用order by时同时使用select *是不可取的。</li></ul><hr><h2 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h2><ul><li>group by实质是<code>先排序后进行分组</code>，遵照索引建的最佳左前缀。</li><li>当无法使用索引列，增大<code>max_length_for_sort_data</code>参数的设置和增大<code>sort_buffer_size</code>参数的设置。</li><li>where高于having，能写在where限定的条件就不要去having限定。</li></ul><hr><h2 id="查询截取分析"><a href="#查询截取分析" class="headerlink" title="查询截取分析"></a>查询截取分析</h2><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>&#8195;&#8195;MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值（默认&gt;10s）的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。<code>默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数</code>（MySQL版本5.6）。当然，<code>如果不是调优需要的话，一般不建议启动该参数</code>，因为开启慢查询日志会或多或少带来一定的性能影响。（在MySQL8.0中慢查询日志默认是开启的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SHOW VARIABLES LIKE <span class="hljs-string">'%slow_query_log%'</span>;  <span class="hljs-comment"># 查询慢查询日志开启情况以及慢日志存储路径</span><br>SET GLOBAL slow_query_log = <span class="hljs-number">1</span>;  <span class="hljs-comment"># 开启了慢查询日志只对当前数据库生效，如果MySQL重启后则会失效。</span><br>SHOW VARIABLES LIKE <span class="hljs-string">'%long_query_time%'</span>;  <span class="hljs-comment"># 查看阈值大小，系统默认阈值&gt;10秒</span><br>SET GLOBAL long_query_time = n;  <span class="hljs-comment"># 修改阈值大小为&gt;n秒</span><br>SHOW GLOBAL STATUS LIKE <span class="hljs-string">'%Slow_queries%'</span>;  <span class="hljs-comment"># 查询已产生的慢日志条数</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;如果需要永久开启慢日志查询（Windows环境），需要在<code>D:\software\MySQL\Data</code>（MySQL的安装目录下的Data文件夹下）找到<code>my.ini</code>（Linux环境下寻找<code>my.cnf</code>文件）配置文件并在<code>[mysqld]</code>下增加或修改参数<br>slow_query_log和slow_query_log_file，然后重启MySQL服务器。即将如下两行配置进my.ini文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">slow_query_log=<span class="hljs-number">1</span><br>slow_query_log_file=慢查询日志文件路径<br></code></pre></td></tr></table></figure><hr><h4 id="日志分析工具（mysqldumpslow）"><a href="#日志分析工具（mysqldumpslow）" class="headerlink" title="日志分析工具（mysqldumpslow）"></a>日志分析工具（mysqldumpslow）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mysqldumpslow -s r -t <span class="hljs-number">10</span> 慢查询日志路径  <span class="hljs-comment"># 得到返回记录集最多的10个SQL</span><br>mysqldumpslow -s c -t <span class="hljs-number">10</span> 慢查询日志路径  <span class="hljs-comment"># 得到访问次数最多的10个SQL</span><br>mysqldumpslow -s t -t <span class="hljs-number">10</span> -g <span class="hljs-string">"left join"</span> 慢查询日志路径  <span class="hljs-comment"># 得到按照时间排序的前10条里面含有左连接的查询语句</span><br>mysqldumpslow -s r -t <span class="hljs-number">10</span> 慢查询日志路径 | more  <span class="hljs-comment"># 结合 | 和more使用</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;mysqldumpslow命令各选项以及含义如下：</p><table><thead><tr><th align="center">选线</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">s</td><td align="center">按照何种方式排序</td></tr><tr><td align="center">c</td><td align="center">访问次数</td></tr><tr><td align="center">l</td><td align="center">锁定时间</td></tr><tr><td align="center">r</td><td align="center">返回记录</td></tr><tr><td align="center">t</td><td align="center">查询时间</td></tr><tr><td align="center">al</td><td align="center">平均锁定时间</td></tr><tr><td align="center">ar</td><td align="center">平均返回记录</td></tr><tr><td align="center">at</td><td align="center">平均查询时间</td></tr><tr><td align="center">t</td><td align="center">返回前面多少条数据</td></tr><tr><td align="center">g</td><td align="center">搭配正则表达式，大小写不敏感</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><hr><h2 id="show-profile"><a href="#show-profile" class="headerlink" title="show profile"></a>show profile</h2><p>&#8195;&#8195;MySQL提供可以用来分析当前会话中语句执行的<code>资源消耗</code>情况，可以用于SQL的调优的测量。默认情况下，参数处于关闭状态，并保存<code>最近15次</code>的运行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SHOW VARIABLES LIKE <span class="hljs-string">'profiling'</span>;  <span class="hljs-comment"># 查看当前show profiling是否开启</span><br>SET profiling = NO;  <span class="hljs-comment"># 开启show profiling功能</span><br>SHOW profiles;  <span class="hljs-comment"># 运行SQL语句以后，查看结果</span><br>SHOW profile [cpu, block io] FOR query n;  <span class="hljs-comment"># n为SHOW profiles结果中的query ID;</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;show profile选项及含义：</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ALL</td><td align="center">显示所有的开销信息</td></tr><tr><td align="center">BLOCK IO</td><td align="center">显示块IO相关开销</td></tr><tr><td align="center">CONTEXT SWITCHES</td><td align="center">上下文切换相关开销</td></tr><tr><td align="center">CPU</td><td align="center">显示CPU相关开销信息</td></tr><tr><td align="center">IPC</td><td align="center">显示发送和接收相关开销信息</td></tr><tr><td align="center">MEMORY</td><td align="center">显示内存相关开销信息</td></tr><tr><td align="center">PAGE FAULTS</td><td align="center">显示页面错误相关开销信息</td></tr><tr><td align="center">SOURCE</td><td align="center">显示和Source_function，Source_file，Source_line相关的开销信息</td></tr><tr><td align="center">SWAPS</td><td align="center">显示交换次数相关开销的信息</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p><img src="/2020/07/04/Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/show_profiles.png" alt="show_profile">&#8195;&#8195;如果查询结果中出现如下结果SQL必须优化：</p><ul><li><code>converting HEAP to MyISAM</code>：查询结果太大，内存都不够用往磁盘写。</li><li><code>Creating tmp table</code>：创建临时表。</li><li><code>Copying to tmp table on disk</code>：内存中临时表复制到磁盘，非常消耗内存。</li><li><code>locked</code></li></ul><hr><h2 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SET GLOBAL general_log = <span class="hljs-number">1</span>;  <span class="hljs-comment"># 开启全局查询日志功能</span><br><span class="hljs-comment"># 全局日志可以存放到日志文件中，也可以存放到Mysql系统表中，存放到日志中性能更好一些</span><br>SET GLOBAL log_output = <span class="hljs-string">'TABLE'</span>;  <span class="hljs-comment"># 存放到Mysql系统表中，此后所编写的sql语句，将会记录到mysql库里的general_log表</span><br>SELECT * FROM mysql.general_log;  <span class="hljs-comment"># 查看日志</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;全局查询日志功能同样可以去配置文件添加，Windows（my.ini文件）、Linux（my.cnf文件）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">general_log=<span class="hljs-number">1</span>  <span class="hljs-comment"># 开启 </span><br>general_log_file=/path/logfile  <span class="hljs-comment"># 设置路径</span><br>log_output=FILE  <span class="hljs-comment"># 输出格式</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;尽量不要在生产环境开启这个功能。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql explain</title>
      <link href="/2020/06/30/Mysql_explain/"/>
      <url>/2020/06/30/Mysql_explain/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#explain简介">explain简介</a><ul><li><a href="#定义">定义</a></li><li><a href="#作用">作用</a></li><li><a href="#使用语法">使用语法</a></li></ul></li><li><a href="#id重要">id（重要）</a><ul><li><a href="#含义">含义</a></li><li><a href="#id相同">id相同</a></li><li><a href="#id不同">id不同</a></li><li><a href="#id有相同的也有不同的">id有相同的，也有不同的</a></li></ul></li><li><a href="#select_type">select_type</a><ul><li><a href="#含义-1">含义</a></li><li><a href="#simple">simple</a></li><li><a href="#primary">primary</a></li><li><a href="#derived">derived</a></li><li><a href="#subquery">subquery</a></li><li><a href="#dependent-subquery">dependent subquery</a></li><li><a href="#uncacheable-subqurey">uncacheable subqurey</a></li><li><a href="#unionunion-result">union、union result</a></li></ul></li><li><a href="#table">table</a></li><li><a href="#type重要">type（重要）</a><ul><li><a href="#含义-2">含义</a></li><li><a href="#system">system</a></li><li><a href="#const">const</a></li><li><a href="#eq_ref">eq_ref</a></li><li><a href="#ref">ref</a></li><li><a href="#range">range</a></li><li><a href="#allindex">all、index</a></li></ul></li><li><a href="#possible_keys">possible_keys</a></li><li><a href="#key重要">key（重要）</a></li><li><a href="#key_len">key_len</a></li><li><a href="#ref-1">ref</a></li><li><a href="#rows重要">rows（重要）</a></li><li><a href="#extra重要">extra（重要）</a><ul><li><a href="#含义-3">含义</a></li><li><a href="#using-filesort重要">Using filesort（重要）</a></li><li><a href="#using-temporary重要">Using temporary（重要）</a></li><li><a href="#using-index重要">Using index（重要）</a></li><li><a href="#using-where">Using where</a></li><li><a href="#using-join-buffer">Using join buffer</a></li><li><a href="#impossible-where">Impossible where</a></li><li><a href="#select-tables-optimized-away">Select tables optimized away</a></li><li><a href="#distinct">Distinct</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="explain简介"><a href="#explain简介" class="headerlink" title="explain简介"></a>explain简介</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>&#8195;&#8195;使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的，分析你的查询语句或是表结构的性能瓶颈。</p><hr><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>表的读取顺序</li><li>哪些索引可以使用</li><li>数据读取操作的操作类型</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><hr><h3 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Explain + SQL语句<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;得到如下信息：<br><img src="/2020/06/30/Mysql_explain/%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.png" alt="基本信息"></p><hr><h2 id="id（重要）"><a href="#id（重要）" class="headerlink" title="id（重要）"></a>id（重要）</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>&#8195;&#8195;select查询的序列号，包含一组数字，<code>表示查询中执行select子句或操作表的顺序</code>。</p><hr><h3 id="id相同"><a href="#id相同" class="headerlink" title="id相同"></a>id相同</h3><p>&#8195;&#8195;id相同，执行顺序由上至下。<br>&#8195;&#8195;举例：<br><img src="/2020/06/30/Mysql_explain/id%E7%9B%B8%E5%90%8C.png" alt="id相同">&#8195;&#8195;可以看到<code>id</code>为1、1、1，<code>table</code>列从上往下t1、t3、t2为三张表的执行顺序。</p><hr><h3 id="id不同"><a href="#id不同" class="headerlink" title="id不同"></a>id不同</h3><p>&#8195;&#8195;id不同，如果是<code>子查询</code>，id的序号会递增，<code>id值越大优先级越高，越先被执行</code>。<br>&#8195;&#8195;举例：<br><img src="/2020/06/30/Mysql_explain/id%E4%B8%8D%E5%90%8C.png" alt="id不同">&#8195;&#8195;可以看到<code>id</code>为1、2、3递增，<code>table</code>列t3、t2、t1（id从大到小）为三张表的执行顺序。</p><hr><h3 id="id有相同的，也有不同的"><a href="#id有相同的，也有不同的" class="headerlink" title="id有相同的，也有不同的"></a>id有相同的，也有不同的</h3><p>&#8195;&#8195;<code>id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</code>。<br>&#8195;&#8195;举例：<br><img src="/2020/06/30/Mysql_explain/%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8.png" alt="同时存在">&#8195;&#8195;可以看到<code>id</code>为1、1、2，<code>table</code>列t3、derived2、t2为三张表的执行顺序。<br>&#8195;&#8195;说明：derived2（衍生表）–&gt;derived + 2（2表示由id=2的查询衍生出来的表。<code>type</code>肯定是<code>all</code>，<code>因为衍生的表没有建立索引</code>）</p><hr><h2 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h2><h3 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h3><p>&#8195;&#8195;查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。<br><img src="/2020/06/30/Mysql_explain/select_type%E6%9C%89%E5%93%AA%E4%BA%9B.png" alt="select_type有哪些"></p><hr><h3 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h3><p>&#8195;&#8195;简单的select查询,查询中不包含子查询或者UNION。<br><img src="/2020/06/30/Mysql_explain/simple.png" alt="simple"></p><hr><h3 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h3><p>&#8195;&#8195;查询中若包含任何复杂的子部分，最外层查询则被标记为Primary。<br><img src="/2020/06/30/Mysql_explain/primary.png" alt="primary"></p><hr><h3 id="derived"><a href="#derived" class="headerlink" title="derived"></a>derived</h3><p>&#8195;&#8195;在FROM列表中包含的子查询被标记为DERIVED（衍生）MySQL会递归执行这些子查询, 把结果放在临时表里。<br><img src="/2020/06/30/Mysql_explain/derived.png" alt="derived"></p><hr><h3 id="subquery"><a href="#subquery" class="headerlink" title="subquery"></a>subquery</h3><p>&#8195;&#8195;在SELECT或WHERE列表中包含了子查询。<br><img src="/2020/06/30/Mysql_explain/subquery.png" alt="subquery"></p><hr><h3 id="dependent-subquery"><a href="#dependent-subquery" class="headerlink" title="dependent subquery"></a>dependent subquery</h3><p>&#8195;&#8195;在SELECT或WHERE列表中包含了子查询,子查询基于外层。<br><img src="/2020/06/30/Mysql_explain/dependent_subquery.png" alt="dependent_subquery">&#8195;&#8195;dependent subquery与subquery的区别：</p><ul><li>依赖子查询：子查询结果为多值。</li><li>子查询：查询结果为单值。</li></ul><hr><h3 id="uncacheable-subqurey"><a href="#uncacheable-subqurey" class="headerlink" title="uncacheable subqurey"></a>uncacheable subqurey</h3><p>&#8195;&#8195;无法被缓存的子查询。<br><img src="/2020/06/30/Mysql_explain/uncacheable_subqurey.png" alt="uncacheable_subqurey">&#8195;&#8195;上图中的<code>@@</code>表示查的环境参数，没办法缓存。</p><hr><h3 id="union、union-result"><a href="#union、union-result" class="headerlink" title="union、union result"></a>union、union result</h3><ul><li>union：若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中,外层SELECT将被标记为：DERIVED。</li><li>union result：从UNION表获取结果的SELECT。</li></ul><p><img src="/2020/06/30/Mysql_explain/union.png" alt="union"></p><hr><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>&#8195;&#8195;显示这一行的数据是关于哪张表的。</p><hr><h2 id="type（重要）"><a href="#type（重要）" class="headerlink" title="type（重要）"></a>type（重要）</h2><h3 id="含义-2"><a href="#含义-2" class="headerlink" title="含义"></a>含义</h3><p>&#8195;&#8195;<code>显示查询使用了何种类型</code>，从<code>最好到最差</code>（常用）依次是：<font color="red">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</font>。<br>&#8195;&#8195;一般来说，得保证查询<code>至少达到range级别</code>，<code>最好能达到ref</code>。<br><img src="/2020/06/30/Mysql_explain/type%E6%9C%89%E5%93%AA%E4%BA%9B.png" alt="type有哪些"></p><hr><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><p>&#8195;&#8195;表<code>只有一行记录</code>（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计。</p><hr><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>&#8195;&#8195;表示<code>通过索引一次就找到了</code>,const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快如将主键置于where列表中，MySQL就能将该查询转换为一个常量。<br><img src="/2020/06/30/Mysql_explain/const.png" alt="const"></p><hr><h3 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h3><p>&#8195;&#8195;唯一性索引扫描，对于每个索引键，<code>表中只有一条记录与之匹配</code>。常见于主键或唯一索引扫描。<br><img src="/2020/06/30/Mysql_explain/eq_ref.png" alt="eq_ref"></p><hr><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>&#8195;&#8195;非唯一性索引扫描，<code>返回匹配某个单独值的所有行</code>。本质上也是一种索引访问，<code>它返回所有匹配某个单独值的行</code>，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。<br><img src="/2020/06/30/Mysql_explain/ref.png" alt="ref"></p><hr><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>&#8195;&#8195;<code>只检索给定范围的行</code>，使用一个索引来选择行。key列显示使用了哪个索引一般就是在你的where语句中出现了<code>between、&lt;、&gt;、in</code>等的查询，这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。<br><img src="/2020/06/30/Mysql_explain/range1.png" alt="range1"><br><img src="/2020/06/30/Mysql_explain/range2.png" alt="range2"></p><hr><h3 id="all、index"><a href="#all、index" class="headerlink" title="all、index"></a>all、index</h3><ul><li>all：Full Table Scan，将遍历全表以找到匹配的行。</li><li>index：index类型只遍历索引树。</li><li>区别：Full Index Scan，<code>index与all区别为index类型只遍历索引树</code>。这通常比all快，因为索引文件通常比数据文件小。（也就是说虽然all和index都是读全表，但index是从<code>索引</code>中读取的，而all是从<code>硬盘</code>中读的）</li></ul><p><img src="/2020/06/30/Mysql_explain/index.png" alt="index"></p><hr><h2 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h2><p>&#8195;&#8195;显示<code>可能</code>应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，<code>但不一定被查询实际使用</code>。</p><hr><h2 id="key（重要）"><a href="#key（重要）" class="headerlink" title="key（重要）"></a>key（重要）</h2><p>&#8195;&#8195;<code>实际使用的索引</code>，如果为NULL，则没有使用索引。查询中若使用了<code>覆盖索引</code>，<code>则该索引和查询的select字段重叠</code>。（查询的字段<code>顺序</code>和<code>个数</code>与存在的<code>索引</code>完全一致）<br><img src="/2020/06/30/Mysql_explain/key.png" alt="key">&#8195;&#8195;上图中<code>id</code>为表<code>t1</code>的主键。</p><hr><h2 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h2><p>&#8195;&#8195;表示索引中使用的<code>字节数</code>，可通过该列计算查询中使用的索引的长度（<code>在不损失精确度的情况下，长度越短越好</code>）。key_len字段显示值是索引字段的<code>最大可能长度</code>，<code>并非实际使用长度</code>，即key_len是根据表定义计算得到的，不是通过表内检索得到的。<br><img src="/2020/06/30/Mysql_explain/key_len.png" alt="key_len">&#8195;&#8195;计算规则：<br><img src="/2020/06/30/Mysql_explain/%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97.png" alt="如何计算">&#8195;&#8195;总结一下：</p><ul><li>char(30) utf8 –&gt; key_len = 30 * 3 + 1  表示<code>utf8</code>格式需要 *3 （跟数据类型有关）</li><li>允许为NULL+1，不允许+0</li><li>动态类型+2（动态类型包括：varchar，detail text()截取字符窜）<br>&#8195;&#8195;计算过程：<br><img src="/2020/06/30/Mysql_explain/%E8%AE%A1%E7%AE%97.png" alt="计算"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">第一组：key_len = deptno(int) + null + ename(varchar(<span class="hljs-number">20</span>) * <span class="hljs-number">3</span> + 动态 = <span class="hljs-number">4</span> + <span class="hljs-number">1</span> + <span class="hljs-number">20</span> * <span class="hljs-number">3</span> + <span class="hljs-number">2</span> = <span class="hljs-number">67</span><br>第二组：key_len = deptno(int) + null = <span class="hljs-number">4</span> + <span class="hljs-number">1</span> = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>&#8195;&#8195;<code>索引利用的越充分（利用的索引越多），查询效率越高</code>。<br><img src="/2020/06/30/Mysql_explain/%E6%98%AF%E5%90%A6%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8.png" alt="是否充分利用"><br><img src="/2020/06/30/Mysql_explain/%E7%BB%93%E6%9E%9C.png" alt="结果"></li></ul><hr><h2 id="ref-1"><a href="#ref-1" class="headerlink" title="ref"></a>ref</h2><p>&#8195;&#8195;<code>哪些列或常量被用于查找索引列上的值</code>。<br><img src="/2020/06/30/Mysql_explain/ref_new.png" alt="ref_new">&#8195;&#8195;ref列的第二行<code>mytest.emp.deptno</code>表示：mytest数据库中的emp表的deptno字段。</p><hr><h2 id="rows（重要）"><a href="#rows（重要）" class="headerlink" title="rows（重要）"></a>rows（重要）</h2><p>&#8195;&#8195;根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数。（越少越好）</p><hr><h2 id="extra（重要）"><a href="#extra（重要）" class="headerlink" title="extra（重要）"></a>extra（重要）</h2><h3 id="含义-3"><a href="#含义-3" class="headerlink" title="含义"></a>含义</h3><p>&#8195;&#8195;包含不适合在其他列中显示，但<code>十分重要的额外信息</code>。</p><hr><h3 id="Using-filesort（重要）"><a href="#Using-filesort（重要）" class="headerlink" title="Using filesort（重要）"></a>Using filesort（重要）</h3><p>&#8195;&#8195;说明MySQL会对数据使用一个<code>外部的</code>索引排序，而不是按照表内的索引顺序进行读取。MySQL中<code>无法利用索引</code>完成的排序操作称为<code>“文件排序”</code>。<br><img src="/2020/06/30/Mysql_explain/using_filesort%E5%89%8D.png" alt="using_filesort前">&#8195;&#8195;给<code>ename</code>加上了索引：<br><img src="/2020/06/30/Mysql_explain/using_filesort%E5%90%8E.png" alt="using_filesort前">&#8195;&#8195;<font color="red">查询中排序的字段，排序字段若通过<code>索引</code>去访问将大大提高排序速度</font>。</p><hr><h3 id="Using-temporary（重要）"><a href="#Using-temporary（重要）" class="headerlink" title="Using temporary（重要）"></a>Using temporary（重要）</h3><p>&#8195;&#8195;使用了<code>临时表</code>保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序<code>order by</code>和分组查询<code>group by</code>。<br><img src="/2020/06/30/Mysql_explain/using_temporary%E5%89%8D.png" alt="using_temporary前"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">create index idx_deptno_ename on emp(deptno,ename)<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;创建符合索引<code>emp(deptno,ename)</code>：<br><img src="/2020/06/30/Mysql_explain/using_temporary%E5%90%8E.png" alt="using_temporary后"></p><hr><h3 id="Using-index（重要）"><a href="#Using-index（重要）" class="headerlink" title="Using index（重要）"></a>Using index（重要）</h3><ul><li>表示相应的select操作中使用了<code>覆盖索引</code>(Covering Index)，避免访问了表的数据行，效率较好。</li><li>如果<code>同时出现Using where</code>，表明<code>索引被用来执行索引键值的查找</code>。</li><li>如果<code>没有同时出现Using where</code>，表明<code>索引只是用来读取数据而非利用索引执行查找</code>。</li><li>覆盖索引说明：<blockquote><p>一个索引包含了(或覆盖了)[select子句]与查询条件[Where子句]中所有需要的字段就叫做覆盖索引。<br>举例：select id , name from t_xxx where age=18;若有一个组合索引  idx_id_name_age_xxx 包含了(覆盖了)id，name，age三个字段。查询时直接将建立了索引的列读取出来了，而不需要去查找所在行的其他数据，因此很高效。<br>如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</p></blockquote></li></ul><hr><h3 id="Using-where"><a href="#Using-where" class="headerlink" title="Using where"></a>Using where</h3><p>&#8195;&#8195;表明使用了<code>where</code>过滤。</p><hr><h3 id="Using-join-buffer"><a href="#Using-join-buffer" class="headerlink" title="Using join buffer"></a>Using join buffer</h3><p>&#8195;&#8195;使用了<code>连接缓存</code>。（出现在当两个表连接时）</p><hr><h3 id="Impossible-where"><a href="#Impossible-where" class="headerlink" title="Impossible where"></a>Impossible where</h3><p>&#8195;&#8195;<code>where子句的值总是false</code>，不能用来获取任何元组。<br><img src="/2020/06/30/Mysql_explain/impossible_where.png" alt="impossible_where"></p><hr><h3 id="Select-tables-optimized-away"><a href="#Select-tables-optimized-away" class="headerlink" title="Select tables optimized away"></a>Select tables optimized away</h3><p>&#8195;&#8195;在没有group by子句的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</p><hr><h3 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h3><p>&#8195;&#8195;在找到第一个匹配的元组后立即停止找同样的值。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引</title>
      <link href="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#索引简介">索引简介</a><ul><li><a href="#定义">定义</a></li><li><a href="#优势">优势</a></li><li><a href="#劣势">劣势</a></li></ul></li><li><a href="#索引分类">索引分类</a><ul><li><a href="#主键索引主键">主键索引（主键）</a></li><li><a href="#单值索引">单值索引</a></li><li><a href="#唯一索引">唯一索引</a></li><li><a href="#复合索引">复合索引</a></li><li><a href="#语法总结">语法总结</a></li></ul></li><li><a href="#btree索引">BTree索引</a><ul><li><a href="#b树">B+树</a></li><li><a href="#b树和b树的区别">B树和B+树的区别</a></li><li><a href="#myisam索引结构示意图">MyISAM索引结构示意图</a></li><li><a href="#innodb索引结构示意图">InnoDB索引结构示意图</a></li></ul></li><li><a href="#需要创建索引的情况">需要创建索引的情况</a></li><li><a href="#不需要创建索引的情况">不需要创建索引的情况</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>&#8195;&#8195;除数据本身之外，数据库还维护着一个<code>满足特定查找算法的数据结构</code>，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现<code>高级查找算法</code>，这种<code>数据结构</code>就是<code>索引</code>（可以简单理解为：排好序的快速查找数据结构）。<br>&#8195;&#8195;下图是索引方式的示例：<br><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="搜索二叉树"><br>&#8195;&#8195;左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址。为了加快Col2的查找，可以维护一个右边所示的<code>二叉查找树</code>，每个结点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到相应数据，从而快速的检索出符合条件的记录。<br>&#8195;&#8195;平常所说的索引，如果没有特别指明，都是指<code>B树（多路搜索树，并不一定是二叉的）结构组织的索引</code>。其中<code>聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引</code>默认都是使用<code>B+树索引</code>，统称<code>索引</code>。当然，除了B+树这种类型的索引之外，还有哈希索引（hash index）等。<br>&#8195;&#8195;一般来说索引本身也很大，不可能全部储存在内存中，因此索引往往<code>以文件的形式储存在磁盘</code>上。<br>&#8195;&#8195;<code>二叉树</code>很可能会发生<code>两边不平衡</code>的情况，而B-TREE会自动根据两边的情况自动调结，使两端无限趋近于平衡状态，可以使性能最稳定。但它也有弊端：当<code>插入/修改操作过多</code>时，<code>B-TREE会不断调整平衡，消耗性能</code>，从侧面说明了索引不是越多越好。</p><hr><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>提高数据检索的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li></ul><hr><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的。</li><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。<code>因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段</code>，都会调整因为更新所带来的键值变化后的索引信息。</li><li>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</li></ul><hr><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="主键索引（主键）"><a href="#主键索引（主键）" class="headerlink" title="主键索引（主键）"></a>主键索引（主键）</h3><p>&#8195;&#8195;设定为主键后数据库会自动建立索引，<code>innodb为聚簇索引</code>。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一（随表一起建索引）</span><br><span class="hljs-comment"># 注意：使用AUTO_INCREMENT关键字的列必须有索引(只要有索引就行)。</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>), customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    PRIMARY KEY(id) <br>);<br><span class="hljs-comment"># 方式二（单独建主键索引）</span><br>ALTER TABLE customer ADD PRIMARY KEY customer(customer_no);<br><br><span class="hljs-comment"># 删除建主键索引</span><br>ALTER TABLE customer DROP PRIMARY KEY;<br><br><span class="hljs-comment"># 修改建主键索引</span><br><span class="hljs-comment"># 必须先删除掉（DROP）原索引，再新建（ADD）索引</span><br></code></pre></td></tr></table></figure><hr><h3 id="单值索引"><a href="#单值索引" class="headerlink" title="单值索引"></a>单值索引</h3><p>&#8195;&#8195;即一个索引只包含单个列，一个表可以有多个单列索引。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一（随表一起建索引）</span><br><span class="hljs-comment"># 随表一起建立的索引，索引名同列名（customer_name）</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>), customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    KEY (customer_name)  <br>);<br><span class="hljs-comment"># 方式二（单独建索引）</span><br>CREATE INDEX idx_customer_name ON customer(customer_name); <br><br><span class="hljs-comment"># 删除索引</span><br>DROP INDEX idx_customer_name ON customer;<br></code></pre></td></tr></table></figure><hr><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>&#8195;&#8195;索引列的值必须唯一，但允许有空值。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 建立唯一索引时必须保证所有的值是唯一的（除了null），若有重复数据，会报错。</span><br><span class="hljs-comment"># 方式一（随表一起建索引）</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED  AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>),customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    UNIQUE (customer_no)<br>);<br><span class="hljs-comment"># 方式二（单独建索引）</span><br>CREATE UNIQUE INDEX idx_customer_no ON customer(customer_no); <br><br><span class="hljs-comment"># 删除索引</span><br>DROP INDEX idx_customer_no ON customer;<br></code></pre></td></tr></table></figure><hr><h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><p>&#8195;&#8195;即一个索引包含多个列。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一（随表一起建索引）</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED  AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>), customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    KEY (customer_no,customer_name)<br>);<br><span class="hljs-comment"># 单独建索引</span><br>CREATE INDEX idx_no_name ON customer(customer_no, customer_name); <br><br><span class="hljs-comment"># 删除索引</span><br>DROP INDEX idx_no_name ON customer;<br></code></pre></td></tr></table></figure><hr><h3 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建</span><br><span class="hljs-comment"># 方式一</span><br>CREATE [UNIOUE] INDEX indexName ON mytable(columnname(length));<br><span class="hljs-comment"># 方式二</span><br>ALTER mytable ADD [UNIQUE] INDEX [indexName] ON (columnname(length));<br><br><span class="hljs-comment"># 删除</span><br>DROP INDEX [indexName] ON mytable; <br><br><span class="hljs-comment"># 查看</span><br>SHOW INDEX FROM table_name;<br></code></pre></td></tr></table></figure><hr><h2 id="BTree索引"><a href="#BTree索引" class="headerlink" title="BTree索引"></a>BTree索引</h2><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/BTree%E7%B4%A2%E5%BC%95.png" alt="BTree索引"></p><ul><li>一颗b树，<code>浅蓝色</code>的块我们称之为一个<code>磁盘块</code>，可以看到每个磁盘块包含几个<code>数据项</code>（深蓝色）和<code>指针</code>（黄色）。</li><li>如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。</li><li>真实的数据存在于<code>叶子结点</code>即3、5、9、10、13、15、28、29、36、60、75、79、90、99。</li><li><code>非叶子结点不存储真实的数据，只存储指引搜索方向的数据项</code>，如17、35并不真实存在于数据表中。<br>&#8195;&#8195;如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。<br>&#8195;&#8195;真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</li></ul><hr><h3 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h3><ul><li><code>B树的关键字和记录是放在一起的，叶子结点可以看作外部结点，不包含任何信息</code>；<code>B+树非叶子结点中只有关键字和指向下一个结点的索引，记录只放在叶子结点中</code>。（一次查询可能进行两次i/o操作）</li><li>在B树中，越靠近根结点的记录查找时间越快，只要找到关键字即可确定记录的存在；而B+树中每个记录的查找时间基本是一样的，都需要从根结点走到叶子结点，而且在叶子结点中还要再比较关键字。从这个角度看B树的性能好像要比B+树好，而在实际应用中却是B+树的性能要好些。<code>因为B+树的非叶子结点不存放实际的数据，这样每个结点可容纳的元素个数比B-树多，树高比B树小，这样带来的好处是减少磁盘访问次数</code>。尽管B+树找到一个记录所需的比较次数要比B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，因此实际中B+树的性能可能还会好些，而且<code>B+树的叶子结点使用指针连接在一起，方便顺序遍历（例如查看一个目录下的所有文件，一个表中的所有记录等）</code>，这也是很多<code>数据库</code>和<code>文件系统</code>使用B+树的缘故。 </li></ul><p>&#8195;&#8195;为什么说B+树比B树更适合实际应用中操作系统的文件索引和数据库索引？</p><ol><li><code>B+树的磁盘读写代价更低</code>。B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</li><li><code>B+树的查询效率更加稳定</code>。由于非叶结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。<blockquote><p>结论在内存有限的情况下，B+树永远比B树好。无限内存则后者方便。</p></blockquote></li></ol><hr><h3 id="MyISAM索引结构示意图"><a href="#MyISAM索引结构示意图" class="headerlink" title="MyISAM索引结构示意图"></a>MyISAM索引结构示意图</h3><p><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/MyISAM.png" alt="MyISAM"></p><hr><h3 id="InnoDB索引结构示意图"><a href="#InnoDB索引结构示意图" class="headerlink" title="InnoDB索引结构示意图"></a>InnoDB索引结构示意图</h3><p><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/InnoDB.png" alt="InnoDB"></p><hr><h2 id="需要创建索引的情况"><a href="#需要创建索引的情况" class="headerlink" title="需要创建索引的情况"></a>需要创建索引的情况</h2><ol><li>主键自动建立唯一索引。</li><li>频繁作为查询条件的字段应该创建索引（WHERE后面的语句）。</li><li>查询中与其它表关联的字段，外键关系建立索引。</li><li>单键/组合索引的选择问题（在高并发下倾向创建组合索引）。</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度（GROUP BY和ORDER BY后面的字段有索引大大提高效率）。</li><li>查询中统计或者分组字段。</li></ol><hr><h2 id="不需要创建索引的情况"><a href="#不需要创建索引的情况" class="headerlink" title="不需要创建索引的情况"></a>不需要创建索引的情况</h2><ol><li>表记录太少。</li><li>经常增删改的表（索引虽然提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件）。</li><li>WHERE条件里用不到的字段不创建索引。</li><li>数据<code>重复且分布平均</code>的表字段，因此应该只为经常查询和经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux RPM和YUM</title>
      <link href="/2020/06/24/Linux%20RPM%E5%92%8CYUM/"/>
      <url>/2020/06/24/Linux%20RPM%E5%92%8CYUM/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#rpm">RPM</a><ul><li><a href="#rpm介绍">RPM介绍</a></li><li><a href="#查询指令">查询指令</a></li><li><a href="#卸载指令">卸载指令</a></li><li><a href="#rpm包的安装">RPM包的安装</a></li></ul></li><li><a href="#yum">YUM</a><ul><li><a href="#介绍">介绍</a></li><li><a href="#基本指令">基本指令</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><h3 id="RPM介绍"><a href="#RPM介绍" class="headerlink" title="RPM介绍"></a>RPM介绍</h3><p>&#8195;&#8195;一种用于<code>互联网下载包的打包及安装工具</code>，它包含在某些Linux分发版中。它生成具有<code>.RPM</code>扩展名的文件。RPM是<code>RedHat Package Manager</code>（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p><hr><h3 id="查询指令"><a href="#查询指令" class="headerlink" title="查询指令"></a>查询指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -q rpm软件包名称  <span class="hljs-comment"># 查询软件包是否安装</span><br>rpm -qa  <span class="hljs-comment"># 查询安装的所有软件包  </span><br>rpm –qa | grep rpm软件包名称  <span class="hljs-comment"># 查询已安装的软件名称</span><br>rpm -qi rpm软件包名称  <span class="hljs-comment"># 查询软件包信息</span><br>rpm -ql rpm软件包名称  <span class="hljs-comment"># 查询软件包中的文件</span><br>rpm -qf 文件路径  <span class="hljs-comment"># 查询文件所属的软件包</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;举例：查询是否安装firefox。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -qa | grep firefox<br><span class="hljs-comment"># 结果：firefox-45.0.1-1.el6.centos.x86_64.rpm</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;对上述结果的说明：</p><ul><li>名称：firefox</li><li>版本号：45.0.1-1 </li><li>适用操作系统：el6.centos.x86_64，表示centos6.x的64位系统</li><li>如果是<code>i686</code>、<code>i386</code>表示<code>32位系统</code>，<code>noarch</code>表示<code>通用</code>。</li></ul><hr><h3 id="卸载指令"><a href="#卸载指令" class="headerlink" title="卸载指令"></a>卸载指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -e rpm软件包名称  <span class="hljs-comment"># 卸载软件</span><br>rpm -e --nodeps rpm软件包名称  <span class="hljs-comment"># 强制卸载软件</span><br></code></pre></td></tr></table></figure><hr><h3 id="RPM包的安装"><a href="#RPM包的安装" class="headerlink" title="RPM包的安装"></a>RPM包的安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -ivh RPM包路径<br><span class="hljs-comment"># i = install 安装</span><br><span class="hljs-comment"># v = verbose 提示</span><br><span class="hljs-comment"># h = hash 进度条</span><br></code></pre></td></tr></table></figure><hr><h2 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&#8195;&#8195;Yum是一个Shell软件包管理器。<code>基于RPM包管理</code>，能够从指定的服务器自动下载RPM包并且安装，可以<code>自动处理依赖性关系</code>，并且一次安装所有依赖的软件包。</p><hr><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">yum list | grep 软件包名称  <span class="hljs-comment"># 查询yum服务器是否有需要安装的软件</span><br>yum install 软件包名称 下载安装  <span class="hljs-comment"># 安装指定的yum包</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程管理</title>
      <link href="/2020/06/23/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2020/06/23/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#基本介绍">基本介绍</a></li><li><a href="#显示系统执行的进程">显示系统执行的进程</a></li><li><a href="#终止进程">终止进程</a></li><li><a href="#服务service管理">服务(service)管理</a><ul><li><a href="#service管理指令">service管理指令</a></li><li><a href="#查看服务名">查看服务名</a></li><li><a href="#chkconfig指令">chkconfig指令</a></li></ul></li><li><a href="#动态监控进程">动态监控进程</a></li><li><a href="#监控网络状态">监控网络状态</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>在LINUX中，<code>每个执行的程序（代码）</code>都称为一个<code>进程</code>， 每一个进程都分配一个ID号。</li><li>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</li><li>每个进程都可能以两种方式存在的。<code>前台与后台</code>，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行[<code>sshd, crond</code>]。 </li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</li></ul><hr><h2 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">ps -a  <span class="hljs-comment"># 显示当前终端的所有进程信息</span><br>ps -u  <span class="hljs-comment"># 已用户的格式显示进程信息</span><br>ps -x  <span class="hljs-comment"># 显示后台进程运行的参数</span><br>ps -aux | more<br>ps -aux | grep 进程名<br><span class="hljs-comment"># ps -aux | grep sshd  # 查看远程登陆服务进程</span><br>ps -aux | grep bash  <span class="hljs-comment"># 查看终端进程</span><br><span class="hljs-comment"># ps -aux | grep crond</span><br>ps -ef | more  <span class="hljs-comment"># 全格式显示当前所有的进程，-e显示所有进程，-f全格式</span><br>pstree -p  <span class="hljs-comment"># 以进程树的形式，显示进程的PID</span><br>pstree -u  <span class="hljs-comment"># 以进程树的形式，显示进程的所属用户</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;ps显示的信息选项：</p><table><thead><tr><th align="center">字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">USER</td><td align="center">用户名</td></tr><tr><td align="center">PID</td><td align="center">进程识别号</td></tr><tr><td align="center">PPID</td><td align="center">父进程ID</td></tr><tr><td align="center">%CPU</td><td align="center">占用的CPU</td></tr><tr><td align="center">%MEN</td><td align="center">占用内存</td></tr><tr><td align="center">VSZ</td><td align="center">使用的虚拟内存（KB）</td></tr><tr><td align="center">RSS</td><td align="center">使用的物理内存（KB）</td></tr><tr><td align="center">TTY</td><td align="center">终端机号</td></tr><tr><td align="center">STAT</td><td align="center">进程的状态 s：休眠 r：运行 z：僵死</td></tr><tr><td align="center">START</td><td align="center">启动时间</td></tr><tr><td align="center">TIME</td><td align="center">此进程所消耗CPU时间</td></tr><tr><td align="center">COMMAND</td><td align="center">进程执行时的命令行（如果过长会被截断显示）</td></tr></tbody></table><hr><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">kill [<span class="hljs-number">-9</span>] 进程号  <span class="hljs-comment"># 通过进程号杀死进程 -9强制终止</span><br>killall 进程名称  <span class="hljs-comment"># 通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</span><br></code></pre></td></tr></table></figure><hr><h2 id="服务-service-管理"><a href="#服务-service-管理" class="headerlink" title="服务(service)管理"></a>服务(service)管理</h2><h3 id="service管理指令"><a href="#service管理指令" class="headerlink" title="service管理指令"></a>service管理指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">service 服务名 [start | stop | restart | reload | status]<br><span class="hljs-comment"># 在CentOS7.0后 不再使用service，而是systemctl</span><br></code></pre></td></tr></table></figure><hr><h3 id="查看服务名"><a href="#查看服务名" class="headerlink" title="查看服务名"></a>查看服务名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">setup -&gt; 系统服务<br>ls -al /etc/init.d/<br></code></pre></td></tr></table></figure><hr><h3 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">chkconfig 服务名 --list  <span class="hljs-comment"># 查看某项服务</span><br>chkconfig --list | grep 服务名  <span class="hljs-comment"># 查找某项服务</span><br>chkconfig 服务名 on/off  <span class="hljs-comment"># 关闭或开启某项服务（所有运行级别）</span><br>chkconfig --level n 服务名 on/off  <span class="hljs-comment"># 可以指定某个服务，某各个运行级别，开启或关闭</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<font color="red">注意：chkconfig重新设置服务重启后机器才会按设置的状态运行</font>。</p><hr><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><p>&#8195;&#8195;<code>top</code>与<code>ps</code>命令很相似，它们都用来显示正在执行的进程。Top与ps最大的不同之处，在于<code>top在执行一段时间可以更新正在运行的的进程</code>（默认每3秒变化一次）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">top [选项]<br>iotop  <span class="hljs-comment"># 动态监控磁盘读写</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;top常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">更能</th></tr></thead><tbody><tr><td align="center">-d 秒数</td><td align="center">指定top命令每隔几秒更新，默认是3秒在top命令的交互模式当中可以执行的命令</td></tr><tr><td align="center">-i</td><td align="center">使top不显示任何闲置或者僵死进程</td></tr><tr><td align="center">-p</td><td align="center">通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><p><img src="/2020/06/23/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%8A%A8%E6%80%81%E8%BF%9B%E7%A8%8B.png" alt="动态进程"></p><p>&#8195;&#8195;涉及到的<code>交互操作</code>：</p><table><thead><tr><th align="center">操作</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">P</td><td align="center">以CPU使用率排序，默认就是此项</td></tr><tr><td align="center">M</td><td align="center">以内存的使用率排序</td></tr><tr><td align="center">N</td><td align="center">以PID排序</td></tr><tr><td align="center">q</td><td align="center">退出top</td></tr><tr><td align="center">k</td><td align="center">终止进程</td></tr></tbody></table><hr><h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">netstat -an  <span class="hljs-comment"># 按一定顺序排列输出</span><br>netstat -p  <span class="hljs-comment"># 显示哪个进程在调用</span><br>netstat –anp | grep sshd  <span class="hljs-comment"># 查看服务名为 sshd 的服务的信息</span><br>netstat –tunlp  <span class="hljs-comment"># 查看监听的端口</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux组管理和权限管理</title>
      <link href="/2020/06/23/%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2020/06/23/%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#查看文件的所有者">查看文件的所有者</a></li><li><a href="#修改文件所有者">修改文件所有者</a></li><li><a href="#修改文件所在的组">修改文件所在的组</a></li><li><a href="#改变用户所在组">改变用户所在组</a></li><li><a href="#linux权限">Linux权限</a><ul><li><a href="#基本介绍">基本介绍</a></li><li><a href="#rwx权限详解">rwx权限详解</a></li><li><a href="#修改权限">修改权限</a><ul><li><a href="#方式一通过---变更权限">方式一（通过+ 、-、= 变更权限）</a></li><li><a href="#方式二通过数字变更权限">方式二（通过数字变更权限）</a></li></ul></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="查看文件的所有者"><a href="#查看文件的所有者" class="headerlink" title="查看文件的所有者"></a>查看文件的所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ls -l<br>ls -al<br>ls –ahl<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -R 如果是目录，则使其下所有子文件或目录递归生效</span><br>chown [-R] 用户名 文件名  <span class="hljs-comment"># 改变文件的所有者</span><br>chown [-R] 所有者:所有组 文件名  <span class="hljs-comment"># 改变用户的所有者和所有组</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root创建一个文件apple.txt，然后将其所有者修改成tom。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch apple.txt<br>chown tom apple.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所在的组"><a href="#修改文件所在的组" class="headerlink" title="修改文件所在的组"></a>修改文件所在的组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -R 如果是目录，则使其下所有子文件或目录递归生效</span><br>chgrp [-R] 组名 文件名<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root用户创建文件orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch orange.txt<br>ls -al<br>chgrp police orange.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h2><p>&#8195;&#8195;在添加用户时，可以指定将该用户添加到哪个组中，同样的用 <code>root的管理权限</code>可以改变某个用户所在的组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">usermod –g 组名 用户名<br>usermod –d 目录名 用户名  <span class="hljs-comment"># 改变该用户登陆的初始目录</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;创建一个bandit（土匪组）将tom这个用户从原来所在的police组，修改到 bandit。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">groupadd bandit<br>usermod -g bandit tom<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p>-rwxrw-r– 1 root police 1213 Feb 2 09:39 abc.txt</p></blockquote><p>&#8195;&#8195;<strong>说明：</strong></p><ol><li><code>第0位</code>确定文件类型（说明：<code>-:普通文件</code>，<code>d:目录</code>，<code>l: 连接文件</code>，<code>c: 字符设备文件[键盘,鼠标]</code>， <code>b: 块设备文件[硬盘]</code>）。</li><li><code>第1-3位</code>确定<code>所有者</code>（该文件的所有者）拥有该文件的权限。<code>r：读</code> ， <code>w：写权限</code>，<code>x：执行权限</code>。  </li><li><code>第4-6位</code>确定<code>所属组</code>（同用户组的）拥有该文件的权限。</li><li><code>第7-9位</code>确定<code>其他用户</code>拥有该文件的权限。 </li><li><code>1</code>：如果是<code>文件</code>，表示<code>硬链接的数目</code>， 如果是<code>目录</code>，则表示<code>有多少个子目录</code>。</li><li><code>1213</code>： 表示<code>文件大小（字节）</code>，如果是<code>目录</code>，则统一为<code>4096</code>字节。</li><li><code>其余内容</code>：<code>最后修改时间</code>和<code>文件名</code>。</li></ol><hr><h3 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h3><p>&#8195;&#8195;<strong>rwx作用到<code>文件</code>：</strong></p><ol><li>[r]代表可读（read）: 可以读取，查看。</li><li>[w]代表可写（write）: <code>可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</code>。</li><li>[x]代表可执行（execute）:可以被执行。<br>&#8195;&#8195;<strong>rwx作用到<code>目录</code>：</strong></li><li>[r]代表可读（read）: 可以读取，ls查看目录内容。</li><li>[w]代表可写（write）: 可以修改，目录内创建 + 删除 + 重命名目录。</li><li>[x]代表可执行（execute）:可以进入该目录。 </li></ol><ul><li><font color="red">注意rwx可用数字表示为：r = 4，w = 2，x = 1 因此rwx = 4 + 2 + 1 = 7</font>。</li></ul><hr><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><h4 id="方式一（通过-、-、-变更权限）"><a href="#方式一（通过-、-、-变更权限）" class="headerlink" title="方式一（通过+ 、-、= 变更权限）"></a>方式一（通过+ 、-、= 变更权限）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># u：所有者  g：所有组  o：其他人  a：所有人（u、g、o的总和）</span><br>chmod u=rwx, g=rx, o=x  文件、目录  <span class="hljs-comment"># 表示：给所有者rwx，给所在组的用户rx，给其他人x</span><br>chmod o+w 文件、目录  <span class="hljs-comment"># 表示：给其它用户增加w的权限</span><br>chmod a-x 文件、目录  <span class="hljs-comment"># 表示：给所有用户去掉x权限</span><br></code></pre></td></tr></table></figure><hr><h4 id="方式二（通过数字变更权限）"><a href="#方式二（通过数字变更权限）" class="headerlink" title="方式二（通过数字变更权限）"></a>方式二（通过数字变更权限）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># r=4 w=2 x=1 rwx=4+2+1=7</span><br>chmod <span class="hljs-number">751</span> 文件、目录  <span class="hljs-comment"># 相当于chmod u=rwx, g=rx, o=x 文件、目录</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux磁盘分区、挂载</title>
      <link href="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/"/>
      <url>/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#linux分区">Linux分区</a><ul><li><a href="#原理介绍">原理介绍</a></li><li><a href="#硬盘说明">硬盘说明</a></li><li><a href="#查看所有设备光驱mediau盘硬盘挂载情况">查看所有设备(光驱/media，u盘，硬盘)挂载情况</a></li></ul></li><li><a href="#案例向linux虚拟机中添加一块新硬盘">案例（向Linux虚拟机中添加一块新硬盘）</a><ul><li><a href="#虚拟机添加硬盘">虚拟机添加硬盘</a></li><li><a href="#分区">分区</a></li><li><a href="#格式化">格式化</a></li><li><a href="#挂载">挂载</a></li><li><a href="#设置自动挂载">设置自动挂载</a></li></ul></li><li><a href="#磁盘情况查询">磁盘情况查询</a><ul><li><a href="#查询系统整体磁盘使用情况">查询系统整体磁盘使用情况</a></li><li><a href="#查询指定目录的磁盘占用情况">查询指定目录的磁盘占用情况</a></li><li><a href="#磁盘工作实用指令">磁盘工作实用指令</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><ol><li>Linux来说无论有几个分区，分给哪一目录使用，<code>它归根结底就只有一个根目录</code>，一个独立且唯一的文件结构 , Linux中每个分区都是用来组成整个文件系统的一部分。</li><li>Linux采用了一种叫“载入”的处理方法，<code>它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来</code>。这时要载入的一个分区将使它的存储空间在一个目录下获得。</li><li>示意图：<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD.png" alt="磁盘挂载"></li></ol><hr><h3 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h3><ol><li>Linux硬盘分<code>IDE硬盘</code>和<code>SCSI硬盘</code>，目前基本上是SCSI硬盘。</li><li>对于IDE硬盘，驱动器标识符为“hdx~”。<ol><li>“hd”表明分区所在设备的类型，这里是指IDE硬盘。</li><li>“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）。</li><li>“~”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。</li><li>例如：hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区,hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。 </li></ol></li><li>对于SCSI硬盘则标识为“sdx~”。<ol><li>“sd”来表示分区所在设备的类型，这里指SCSI硬盘。</li><li>其余则和IDE硬盘的表示方法一样。</li><li>例如：sdb1表示第2块scsi硬盘的第1个分区。</li></ol></li></ol><hr><h3 id="查看所有设备-光驱-media，u盘，硬盘-挂载情况"><a href="#查看所有设备-光驱-media，u盘，硬盘-挂载情况" class="headerlink" title="查看所有设备(光驱/media，u盘，硬盘)挂载情况"></a>查看所有设备(光驱/media，u盘，硬盘)挂载情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lsblk<br>lsblk -f<br></code></pre></td></tr></table></figure><hr><h2 id="案例（向Linux虚拟机中添加一块新硬盘）"><a href="#案例（向Linux虚拟机中添加一块新硬盘）" class="headerlink" title="案例（向Linux虚拟机中添加一块新硬盘）"></a>案例（向Linux虚拟机中添加一块新硬盘）</h2><h3 id="虚拟机添加硬盘"><a href="#虚拟机添加硬盘" class="headerlink" title="虚拟机添加硬盘"></a>虚拟机添加硬盘</h3><p>&#8195;&#8195;在<code>VMware</code>主页的<code>虚拟机</code>菜单中，选择<code>设置</code>，然后设备列表里添加硬盘，然后一直<code>下一步</code>，中间只有选择磁盘大小的地方需要修改，直到完成。然后<code>重启系统</code>（才能识别）。<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E6%B7%BB%E5%8A%A0%E7%A3%81%E7%9B%98.png" alt="添加磁盘"></p><hr><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fdisk /dev/sdb<br></code></pre></td></tr></table></figure><p>输入以上命令以后会涉及到以下的指令：</p><table><thead><tr><th align="center">指令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">m</td><td align="center">显示命令列表</td></tr><tr><td align="center">p</td><td align="center">显示磁盘分区同fdisk –l</td></tr><tr><td align="center">n</td><td align="center">新增分区</td></tr><tr><td align="center">d</td><td align="center">删除分区</td></tr><tr><td align="center">w</td><td align="center">写入并退出</td></tr></tbody></table><p>&#8195;&#8195;开始分区后输入<code>n</code>，<code>新增分区</code>，然后选择<code>p</code>，分区类型为<code>主分区</code>。两次回车默认剩余全部空间。最后输入<code>w写入分区</code>并退出，若不保存退出输入q。<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E5%88%86%E5%8C%BA.png" alt="分区"></p><hr><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">mkfs -t ext4 /dev/sdb1  <span class="hljs-comment"># ext4是分区类型</span><br></code></pre></td></tr></table></figure><hr><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">mkdir /home/newdisk  <span class="hljs-comment"># 先创建硬盘挂载路径</span><br><span class="hljs-comment"># mount 设备名称 挂载目录</span><br>mount /dev/sdb1 /home/newdisk  <span class="hljs-comment"># 挂载命令</span><br><span class="hljs-comment"># umount 设备名称 或者 挂载目录</span><br>umount /dev/sdb1  <span class="hljs-comment"># 断开挂载</span><br>umount /home/newdisk  <span class="hljs-comment"># 断开挂载</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<font color="red">用命令行挂载重启后会失效。</font></p><hr><h3 id="设置自动挂载"><a href="#设置自动挂载" class="headerlink" title="设置自动挂载"></a>设置自动挂载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">vim /etc/fstab<br></code></pre></td></tr></table></figure><p><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E6%B0%B8%E4%B9%85%E6%8C%82%E8%BD%BD.png" alt="永久挂载"><br>&#8195;&#8195;通过修改/etc/fstab实现挂载，添加完成后执行<code>mount –a</code>即刻生效。</p><hr><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><h3 id="查询系统整体磁盘使用情况"><a href="#查询系统整体磁盘使用情况" class="headerlink" title="查询系统整体磁盘使用情况"></a>查询系统整体磁盘使用情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df -lh<br></code></pre></td></tr></table></figure><hr><h3 id="查询指定目录的磁盘占用情况"><a href="#查询指定目录的磁盘占用情况" class="headerlink" title="查询指定目录的磁盘占用情况"></a>查询指定目录的磁盘占用情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">du -h /目录<br>du -ach --max-depth= <span class="hljs-number">1</span> /usr  <span class="hljs-comment"># 查询 /usr目录的磁盘占用情况，深度为1</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-s</td><td align="center">指定目录占用大小汇总</td></tr><tr><td align="center">-h</td><td align="center">带计量单位</td></tr><tr><td align="center">-a</td><td align="center">含文件</td></tr><tr><td align="center">–max-depth=1</td><td align="center">子目录深度</td></tr><tr><td align="center">-c</td><td align="center">列出明细的同时，增加汇总值</td></tr></tbody></table><h3 id="磁盘工作实用指令"><a href="#磁盘工作实用指令" class="headerlink" title="磁盘工作实用指令"></a>磁盘工作实用指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计/home文件夹下[文件]的个数（^为定位符）</span><br>ls –l /home/ | grep <span class="hljs-string">"^-"</span> | wc -l<br><span class="hljs-comment"># 统计/home文件夹下[目录]的个数</span><br>ls –l /home/ | grep <span class="hljs-string">"^d"</span> | wc -l<br><span class="hljs-comment"># 统计/home文件夹下[文件]的个数，包括子文件夹里的</span><br>ls –lR /home/ | grep <span class="hljs-string">"^-"</span> | wc -l<br><span class="hljs-comment"># 统计/home文件夹下[目录]的个数，包括子文件夹里的</span><br>ls –lR /home/ | grep <span class="hljs-string">"^d"</span> | wc -l<br><span class="hljs-comment"># 以树状显示home目录结构，使用yum来安装tree指令</span><br>yum install -y tree<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;树状显示home结构：<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/tree.png" alt="tree"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux crond任务调度</title>
      <link href="/2020/06/23/Linux%20crond%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
      <url>/2020/06/23/Linux%20crond%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a></li><li><a href="#基本语法">基本语法</a></li><li><a href="#举例说明">举例说明</a></li><li><a href="#5个占位符">5个占位符</a></li><li><a href="#参数细节">参数细节</a></li><li><a href="#特定时间执行任务案例">特定时间执行任务案例</a></li><li><a href="#任务调度应用实例">任务调度应用实例</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&#8195;&#8195;任务调度：是指系统在某个时间执行的特定的命令或程序。<br>&#8195;&#8195;任务调度分类：</p><ol><li>系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等。</li><li>个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。</li></ol><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">crontab [选项]<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;crontab常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">编辑crontab定时任务</td></tr><tr><td align="center">-l</td><td align="center">查询crontab任务</td></tr><tr><td align="center">-r</td><td align="center">删除当前用户所有的crontab任务</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">service crond restart  <span class="hljs-comment"># 重启任务调度</span><br></code></pre></td></tr></table></figure><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>&#8195;&#8195;每小时的每分钟执行“ls –l /etc/ &gt; /tmp/to.txt”命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">crontab –e  <span class="hljs-comment"># 设置个人任务调度</span><br>*/<span class="hljs-number">1</span> * * * * ls –l  /etc/ &gt; /tmp/to.txt  <span class="hljs-comment"># 接着输入任务到调度文件（注意*号之间均有一个空格）</span><br>:wq<br></code></pre></td></tr></table></figure><hr><h2 id="5个占位符"><a href="#5个占位符" class="headerlink" title="5个占位符"></a>5个占位符</h2><table><thead><tr><th align="center">项目</th><th align="center">含义</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">第一个“*”</td><td align="center">一小时当中的第几分钟</td><td align="center">0-59</td></tr><tr><td align="center">第二个“*”</td><td align="center">一天当中的第几小时</td><td align="center">0-23</td></tr><tr><td align="center">第三个“*”</td><td align="center">一个月当中的第几天</td><td align="center">1-31</td></tr><tr><td align="center">第四个“*”</td><td align="center">一年当中的第几月</td><td align="center">1-12</td></tr><tr><td align="center">第五个“*”</td><td align="center">一周当中的星期几</td><td align="center">0-7（0和7都代表星期日）</td></tr></tbody></table><hr><h2 id="参数细节"><a href="#参数细节" class="headerlink" title="参数细节"></a>参数细节</h2><table><thead><tr><th align="center">特殊符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次的意思。</td></tr><tr><td align="center">,</td><td align="center">代表不连续的时间。比如“0 8,12,16 * * * 命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令</td></tr><tr><td align="center">-</td><td align="center">代表连续的时间范围。比如“0 5 * * 1-6命令”，代表在周一到周六的凌晨5点0分执行命令</td></tr><tr><td align="center">*/n</td><td align="center">代表每隔多久执行一次。比如“*/10 * * * *”命令，代表每隔10分钟就执行一遍命令</td></tr></tbody></table><hr><h2 id="特定时间执行任务案例"><a href="#特定时间执行任务案例" class="headerlink" title="特定时间执行任务案例"></a>特定时间执行任务案例</h2><table><thead><tr><th align="center">时间</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">45 22 * * *</td><td align="center">在22点45分执行命令</td></tr><tr><td align="center">0 17 * * 1</td><td align="center">每周一的17点0分执行命令</td></tr><tr><td align="center">0 5 1,15 * *</td><td align="center">每月1号和15号的凌晨5点0分执行命令</td></tr><tr><td align="center">40 4 * * 1-5</td><td align="center">每周一到周五的凌晨4点40分执行命令</td></tr><tr><td align="center">*/10 4 * * *</td><td align="center">每天的凌晨4点，每隔10分钟执行一次命令</td></tr><tr><td align="center">0 0 1,15 * 1</td><td align="center">每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。非常容易让管理员混乱</td></tr></tbody></table><hr><h2 id="任务调度应用实例"><a href="#任务调度应用实例" class="headerlink" title="任务调度应用实例"></a>任务调度应用实例</h2><p>&#8195;&#8195;案例1：每隔1分钟，就将当前的日期信息，追加到/tmp/mydate.log文件中。</p><ol><li>编写文件/home/mytask1.sh内容为“date &gt;&gt; /tmp/mydate.log”<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">touch /home/mystack1.sh<br>vim /home/mystack1.sh<br>文件中输入date &gt;&gt; /tmp/mydate.log<br>:wq<br></code></pre></td></tr></table></figure></li><li>给mytask1.sh一个可执行权限<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chmod <span class="hljs-number">744</span> /home/mystack1.sh<br></code></pre></td></tr></table></figure></li><li>设置个人任务调度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">crontab -e<br>输入*/<span class="hljs-number">1</span> * * * * /home/mystack1.sh<br></code></pre></td></tr></table></figure></li><li>退出保存<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">:wq<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux组管理和权限管理</title>
      <link href="/2020/06/23/Linux%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2020/06/23/Linux%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#查看文件的所有者">查看文件的所有者</a></li><li><a href="#修改文件所有者">修改文件所有者</a></li><li><a href="#修改文件所在的组">修改文件所在的组</a></li><li><a href="#改变用户所在组">改变用户所在组</a></li><li><a href="#linux权限">Linux权限</a><ul><li><a href="#基本介绍">基本介绍</a></li><li><a href="#rwx权限详解">rwx权限详解</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="查看文件的所有者"><a href="#查看文件的所有者" class="headerlink" title="查看文件的所有者"></a>查看文件的所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ls -l<br>ls -al<br>ls –ahl<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chown 用户名 文件名<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root创建一个文件apple.txt，然后将其所有者修改成tom。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch apple.txt<br>chown tom apple.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所在的组"><a href="#修改文件所在的组" class="headerlink" title="修改文件所在的组"></a>修改文件所在的组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chgrp 组名 文件名<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root用户创建文件orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch orange.txt<br>ls -al<br>chgrp police orange.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h2><p>&#8195;&#8195;在添加用户时，可以指定将该用户添加到哪个组中，同样的用 <code>root的管理权限</code>可以改变某个用户所在的组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">usermod –g 组名 用户名<br>usermod –d 目录名 用户名  <span class="hljs-comment"># 改变该用户登陆的初始目录</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;创建一个bandit（土匪组）将tom这个用户从原来所在的police组，修改到 bandit。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">groupadd bandit<br>usermod -g bandit tom<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p>-rwxrw-r– 1 root police 1213 Feb 2 09:39 abc.txt</p></blockquote><p>&#8195;&#8195;<strong>说明：</strong></p><ol><li><code>第0位</code>确定文件类型（说明：<code>-:普通文件</code>，<code>d:目录</code>，<code>l: 连接文件</code>，<code>c: 字符设备文件[键盘,鼠标]</code>， <code>b: 块设备文件[硬盘]</code>）。</li><li><code>第1-3位</code>确定<code>所有者</code>（该文件的所有者）拥有该文件的权限。<code>r：读</code> ， <code>w：写权限</code>，<code>x：执行权限</code>。  </li><li><code>第4-6位</code>确定<code>所属组</code>（同用户组的）拥有该文件的权限。</li><li><code>第7-9位</code>确定<code>其他用户</code>拥有该文件的权限。 </li><li><code>1</code>：如果是<code>文件</code>，表示<code>硬链接的数目</code>， 如果是<code>目录</code>，则表示<code>有多少个子目录</code>。</li><li><code>1213</code>： 表示<code>文件大小（字节）</code>，如果是<code>目录</code>，则统一为<code>4096</code>字节。</li><li><code>其余内容</code>：<code>最后修改时间</code>和<code>文件名</code>。</li></ol><hr><h3 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h3><p>&#8195;&#8195;<strong>rwx作用到<code>文件</code>：</strong></p><ol><li>[r]代表可读(read): 可以读取，查看。</li><li>[w]代表可写(write): <code>可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</code>。</li><li>[x]代表可执行(execute):可以被执行。<br>&#8195;&#8195;<strong>rwx作用到<code>目录</code>：</strong></li><li>[r]代表可读(read): 可以读取，ls查看目录内容。</li><li>[w]代表可写(write): 可以修改，目录内创建 + 删除 + 重命名目录。</li><li>[x]代表可执行(execute):可以进入该目录。 </li></ol><ul><li><font color="red">注意rwx可用数字表示为：r = 4，w = 2，x = 1 因此rwx = 4 + 2 + 1 = 7</font>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/06/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/06/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#开机重启和用户登录">开机、重启和用户登录</a></li><li><a href="#用户注销">用户注销</a></li><li><a href="#用户管理">用户管理</a></li><li><a href="#用户组管理">用户组管理</a></li><li><a href="#用户和组的相关文件">用户和组的相关文件</a></li><li><a href="#指定运行级别">指定运行级别</a><ul><li><a href="#应用">应用</a></li></ul></li><li><a href="#帮助指令">帮助指令</a></li><li><a href="#文件目录指令">文件目录指令</a></li><li><a href="#日期时间指令">日期时间指令</a></li><li><a href="#搜索查找指令">搜索查找指令</a><ul><li><a href="#find">find</a></li><li><a href="#locate">locate</a></li><li><a href="#grep">grep</a></li></ul></li><li><a href="#压缩和解压指令">压缩和解压指令</a><ul><li><a href="#gizp">gizp</a></li><li><a href="#gunzip">gunzip</a></li><li><a href="#zip">zip</a></li><li><a href="#unzip">unzip</a></li><li><a href="#tar">tar</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="开机、重启和用户登录"><a href="#开机、重启和用户登录" class="headerlink" title="开机、重启和用户登录"></a>开机、重启和用户登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">shutdwon -h now  <span class="hljs-comment"># 立刻关机</span><br>shutdwon -h <span class="hljs-number">1</span>  <span class="hljs-comment"># 1分钟以后关机</span><br>shutdwon -r now  <span class="hljs-comment"># 立刻重启计算机</span><br>halt  <span class="hljs-comment"># 立刻关机，同1</span><br>reboot  <span class="hljs-comment"># 立刻重启，同3</span><br>sync  <span class="hljs-comment"># 把内存的数据同步到磁盘</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<font color="red">注意：不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中，防止数据丢失。</font></p><hr><h2 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">logout  <span class="hljs-comment"># 注意该命令在图形运行界面无效</span><br></code></pre></td></tr></table></figure><hr><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">useradd [选项] 用户名  <span class="hljs-comment"># 默认家里目录路径为/home/用户名</span><br>useradd -d 路径 用户名  <span class="hljs-comment"># 为创建用户名并指定家目录路径</span><br>passwd 用户名  <span class="hljs-comment"># 为该用户名添加密码</span><br>userdel 用户名  <span class="hljs-comment"># 删除用户名并且保留该用户的家目录</span><br>userdel -r 用户名  <span class="hljs-comment"># 删除用户名以及该用户的家目录</span><br>id 用户名  <span class="hljs-comment"># 查看用户信息</span><br>su - 用户名  <span class="hljs-comment"># 切换用户名，输入exit返回原用户</span><br></code></pre></td></tr></table></figure><p><font color="red">&#8195;&#8195;删除用户时，一般会保留家目录。</font></p><hr><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><blockquote><p>组，类似于角色，系统可以对有共性的多个用户进行管理。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">groupadd 组名  <span class="hljs-comment"># 创建组</span><br>groupdel 组名  <span class="hljs-comment"># 删除组</span><br>uesradd -g 用户组 用户名  <span class="hljs-comment"># 创建用户名同时指定其所属组名（不加-g参数，默认用户名所属组名和用户名相同）</span><br>uesrmod -g 用户组 用户名  <span class="hljs-comment"># 修改用户的组</span><br></code></pre></td></tr></table></figure><hr><h2 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a>用户和组的相关文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /etc/passwd<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;以上路径下的文件为<code>用户（user）</code>的配置文件，记录用户的各种信息。<br>&#8195;&#8195;其中每行的含义为：<br>&#8195;&#8195;<font color="red">用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录Shell</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /etc/shadow<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;以上路径下的文件为<code>口令</code>配置文件。<br>&#8195;&#8195;其中每行的含义为：<br>&#8195;&#8195;<font color="red">登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /etc/group<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;以上路径下的文件为<code>组（group）</code>的配置文件，记录Linux包含组的各种信息。<br>&#8195;&#8195;其中每行的含义为：<br>&#8195;&#8195;<font color="red">组名：口令：组标识号：组内用户表</font></p><hr><h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><ul><li>0：关机</li><li>1：单用户（找回丢失密码）</li><li>2：多用户状态没有网络服务</li><li>3：<font color="red">多用户状态有网络服务</font></li><li>4：系统未使用保留给用户（保留）</li><li>5：<font color="red">图形界面</font></li><li>6：系统重启</li></ul><p>&#8195;&#8195;常用运行级别为3和5。<br>&#8195;&#8195;要修改默认的运行级别可修改文件<code>/etc/inittab的id:5:initdefault:这一行中的数字。</code><br>&#8195;&#8195;切换运行级别命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">init[<span class="hljs-number">0123456</span>]  <span class="hljs-comment"># 切换运行级别</span><br></code></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>&#8195;&#8195;问：如果忘记了root密码，如何找回root密码？<br>&#8195;&#8195;答：进入<code>单用户模式</code>，然后修改root密码，因为进入单用户模式，root不需要密码就可以登陆。具体过程如下：</p><ol><li>开机<br></li><li>在引导时输入<code>回车键</code><br></li><li>在界面输入<code>e</code><br></li><li>选中界面第二行（编辑内核）<br></li><li>输入<code>e</code><br></li><li>在界面最后一行输入<code>空格和1</code><br></li><li>输入<code>回车键</code><br></li><li>输入<code>b</code><br></li><li>此时进入单用户模式<br></li><li>单用户模式下利用<code>passwd</code>修改root密码<br></li></ol><hr><h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">man [命令或配置文件]  <span class="hljs-comment"># 功能描述，获得帮助信息</span><br>help 命令  <span class="hljs-comment"># 共能描述：获得shell内置命令的帮助信息</span><br></code></pre></td></tr></table></figure><hr><h2 id="文件目录指令"><a href="#文件目录指令" class="headerlink" title="文件目录指令"></a>文件目录指令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">pwd  <span class="hljs-comment"># 显示当前工作目录的绝对路径</span><br>ls -[a l]  <span class="hljs-comment"># -a：显示当前目录所有的文件和目录，包括隐藏文件；-l：以列表的方式显示信息</span><br>cd 路径  <span class="hljs-comment"># 切换到指定的路径</span><br>cd ~或者cd :  <span class="hljs-comment"># 回到家目录</span><br>cd ..  <span class="hljs-comment"># 回到当前路径的上一级目录</span><br>mkdir [-p] 要创建的目录  <span class="hljs-comment"># -p表示要创建多级目录</span><br>rmdir 空目录  <span class="hljs-comment"># 删除空目录</span><br>rm -rf 非空目录或文件  <span class="hljs-comment"># 删除非空目录或文件，-r表示递归删除，-f强制删除不提示</span><br>touch 文件名称.后缀名  <span class="hljs-comment"># 创建文件</span><br>[\]cp [-r] 文件 目标路径  <span class="hljs-comment"># 拷贝文件到指定目录，\表示强制覆盖，-r表示递归复制</span><br>scp -r $pdir/$fname $user@hadoop$host:$pdir/$fname  <span class="hljs-comment"># scp（secure copy）安全拷贝，可以实现服务器与服务器之间的数据拷贝。（from server1 to server2）</span><br><span class="hljs-comment"># 命令 递归 要拷贝的文件路径/名称 目的用户@主机:目的路径/名称</span><br>rsync -rvl $pdir/$fname $user@hadoop$host:$pdir/$fname  <span class="hljs-comment"># rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点（参数详情见下面表格）</span><br><span class="hljs-comment"># 命令 选项参数 要拷贝的文件路径/名称 目的用户@主机:目的路径/名称</span><br>mv 文件 目标路径 <span class="hljs-comment"># 移动文件与目录</span><br>mv 旧文件名 新文件名  <span class="hljs-comment"># 文件重命名</span><br>cat [-n] 文件 [| more] <span class="hljs-comment"># 查看文件内容（只能查看不能修改），-n表示显示行号，more表示分页显示（用空格换页）</span><br>tac 文件名  <span class="hljs-comment"># 从文件最后一行显示信息，与cat相反</span><br>nl 文件名  <span class="hljs-comment"># 查看文件内容，默认显示行号</span><br>more 文件名  <span class="hljs-comment"># 查看文件内容（详情见下面表格）</span><br>less 文件名  <span class="hljs-comment"># 查看文件内容（详情见下面表格）</span><br>&gt;  <span class="hljs-comment"># 输出重定向</span><br>&gt;&gt;  <span class="hljs-comment"># 追加</span><br>ls -l &gt; 文件  <span class="hljs-comment"># 列表的内容写入文件中（覆盖写），文件不存在就创建文件，否则覆盖</span><br>ls -al &gt;&gt; 文件  <span class="hljs-comment"># 列表的内容追加到文件的末尾</span><br>cat 文件<span class="hljs-number">1</span> &gt; 文件<span class="hljs-number">2</span>  <span class="hljs-comment"># 将文件1的内容覆盖到文件2</span><br>echo  <span class="hljs-comment"># 输出内容到控制台</span><br>echo $PATH  <span class="hljs-comment"># 输出环境变量</span><br>echo 内容 &gt;&gt; 文件  <span class="hljs-comment"># 将内容追加到文件</span><br>head [-n] [行数] 文件  <span class="hljs-comment"># 默认显示文件前10行，利用参数可以指定输出前多少行</span><br>tail [-n] [行数] 文件  <span class="hljs-comment"># 默认显示文件后10行，利用参数可以指定输出后多少行</span><br>tail -n +行数 文件  <span class="hljs-comment"># 从规定的“行数”开始显示，显示后面的文件内容</span><br>tail -f 文件  <span class="hljs-comment"># 实时追踪文件的所有更新</span><br>ln  <span class="hljs-comment"># 软连接符号</span><br>ln -s [原文件或目录][软链接名]  <span class="hljs-comment"># 给原文件创建一个软链接（快捷方式）</span><br>rm -rf 软链接  <span class="hljs-comment"># 删除软链接（注意软链接后面不要跟/，否则报错“资源忙”）</span><br>history  <span class="hljs-comment"># 查看已执行过的历史命令，也可以执行历史命令</span><br>history n  <span class="hljs-comment"># 查看后n行历史指令</span><br>!n  <span class="hljs-comment"># 执行第n个历史指令</span><br></code></pre></td></tr></table></figure><p><code>rsync</code>参数含义：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">递归</td></tr><tr><td align="center">-v</td><td align="center">显示复制过程</td></tr><tr><td align="center">-l</td><td align="center">拷贝符号链接</td></tr></tbody></table><p><code>more</code>指令</p><table><thead><tr><th align="center">操作</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">向下换一页</td></tr><tr><td align="center">Enter</td><td align="center">向下翻一行</td></tr><tr><td align="center">q</td><td align="center">立刻离开more，不再显示该文件内容</td></tr><tr><td align="center">Ctrl + f</td><td align="center">向下滚动一屏</td></tr><tr><td align="center">Ctrl + b</td><td align="center">返回上一屏</td></tr><tr><td align="center">=</td><td align="center">输出当前的行号</td></tr><tr><td align="center">:f</td><td align="center">输出文件名和当前的行号</td></tr></tbody></table><p><code>less</code>指令：</p><table><thead><tr><th align="center">操作</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">向下换一页</td></tr><tr><td align="center">Enter</td><td align="center">向下翻一行</td></tr><tr><td align="center">[pagedown]</td><td align="center">向下翻动一页</td></tr><tr><td align="center">[pageup]</td><td align="center">向上翻动一页</td></tr><tr><td align="center">/字串</td><td align="center">向下搜寻[字串]的共能；n：向下查找，N：向上查找</td></tr><tr><td align="center">?字串</td><td align="center">向上搜寻[字串]的共能；n：向上查找，N：向下查找</td></tr><tr><td align="center">q</td><td align="center">离开less</td></tr></tbody></table><p><font color="red">注意：less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据需要显示加载内容，对于显示大型文件具有较高的效率。</font><br>&#8195;&#8195;补充<code>xsync</code>脚本，它的作用是：循环复制文件到所有节点的相同目录下。具体脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#1 获取输入参数个数，如果没有参数，直接退出</span><br>pcount=$<span class="hljs-comment">#</span><br><span class="hljs-keyword">if</span>((pcount==<span class="hljs-number">0</span>)); then<br>echo no args;<br>exit;<br>fi<br><br><span class="hljs-comment">#2 获取文件名称</span><br>p1=$<span class="hljs-number">1</span><br>fname=`basename $p1`<br>echo fname=$fname<br><br><span class="hljs-comment">#3 获取上级目录到绝对路径</span><br>pdir=`cd -P $(dirname $p1); pwd`<br>echo pdir=$pdir<br><br><span class="hljs-comment">#4 获取当前用户名称</span><br>user=`whoami`<br><br><span class="hljs-comment">#5 循环</span><br><span class="hljs-keyword">for</span>((host=<span class="hljs-number">103</span>; host&lt;<span class="hljs-number">105</span>; host++)); do<br>        echo ------------------- hadoop$host --------------<br>        rsync -rvl $pdir/$fname $user@hadoop$host:$pdir<br>done<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<code>cat</code>进阶使用：显示文件的1000行到3000行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cat filename | tail -n + <span class="hljs-number">1000</span> | head -n <span class="hljs-number">2000</span><br>cat filename | head -n <span class="hljs-number">3000</span> | tail -n +<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><blockquote><p>head -n 1000：显示前1000行<br>tail -n 1000：显示后1000行<br>tail -n + 1000：从第1000行开始显示，显示1000行以后的内容</p></blockquote><p>&#8195;&#8195;如果使用<code>sed</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sed -n <span class="hljs-string">'1000, 3000p'</span> filename<br></code></pre></td></tr></table></figure><hr><h2 id="日期时间指令"><a href="#日期时间指令" class="headerlink" title="日期时间指令"></a>日期时间指令</h2><table><thead><tr><th align="center">基本语法</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">date</td><td align="center">显示当前时间</td></tr><tr><td align="center">date “+%Y”</td><td align="center">显示当前年份</td></tr><tr><td align="center">date “+%m”</td><td align="center">显示当前月份</td></tr><tr><td align="center">date “+%d”</td><td align="center">显示当前是哪一天</td></tr><tr><td align="center"><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code></td><td align="center">显示年月日时分秒</td></tr><tr><td align="center"><code>date -s 字符串时间</code></td><td align="center">设置系统时间</td></tr><tr><td align="center">cal</td><td align="center">显示日历</td></tr><tr><td align="center">cal 年份</td><td align="center">显示所指年份的全部日历</td></tr></tbody></table><hr><h2 id="搜索查找指令"><a href="#搜索查找指令" class="headerlink" title="搜索查找指令"></a>搜索查找指令</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>&#8195;&#8195;<code>从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">find [搜索范围] [选项] 文件名或文件用户或文件大小<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;find命令常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">-name 文件名</td><td align="center">按照指定的文件名查找文件</td></tr><tr><td align="center">-user 文件用户</td><td align="center">查找属于指定用户名的所有文件</td></tr><tr><td align="center">-size +n[K, M, …]</td><td align="center">按照指定的文件大小查找文件（+n：大于n，-n：小于n，n：等于n），注意单位要大写</td></tr></tbody></table><p>&#8195;&#8195;注意：其中文件名、用户名支持<code>通配符</code>。</p><hr><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>&#8195;&#8195;快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。<br>&#8195;&#8195;<font color="red">由于locate指令基于数据库进行查询，所以第一次运行前，必须使用<code>updatedb</code>指令创建locate数据库。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">updatedb  <span class="hljs-comment"># 创建locate数据库</span><br>locate 文件名  <span class="hljs-comment"># 查找文件名</span><br></code></pre></td></tr></table></figure><hr><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>&#8195;&#8195;过滤查找，<code>管道符“|”</code>，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">grep [选项] 查找内容或源文件<br><span class="hljs-comment"># 举例</span><br>cat hello.txt | grep [选项] hello<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;grep命令常用选项：</p><table><thead><tr><th align="center">选项</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">-n</td><td align="left">显示匹配行及行号</td></tr><tr><td align="center">-i</td><td align="left">忽略大小写</td></tr></tbody></table><hr><h2 id="压缩和解压指令"><a href="#压缩和解压指令" class="headerlink" title="压缩和解压指令"></a>压缩和解压指令</h2><h3 id="gizp"><a href="#gizp" class="headerlink" title="gizp"></a>gizp</h3><p>&#8195;&#8195;压缩文件，只能将文件压缩为<code>*.gz</code>文件，且<code>不保留原文件</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gzip 文件名<br></code></pre></td></tr></table></figure><hr><h3 id="gunzip"><a href="#gunzip" class="headerlink" title="gunzip"></a>gunzip</h3><p>&#8195;&#8195;解压gz压缩文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gunzip 文件名.gz<br></code></pre></td></tr></table></figure><hr><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>&#8195;&#8195;压缩文件或<code>目录</code>为<code>*.zip</code>文件，且保留<code>原文件</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">zip [-r] 文件名.zip 将要压缩的内容  <span class="hljs-comment"># -r表示递归压缩（压缩目录时使用）</span><br></code></pre></td></tr></table></figure><hr><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>&#8195;&#8195;解压zip文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">unzip [-d 目录] 文件名.zip  <span class="hljs-comment"># -d指定解压后文件的存放目录</span><br></code></pre></td></tr></table></figure><hr><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>&#8195;&#8195;打包指令，最后打包的文件是<code>.tar.gz</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">tar [选项] 文件名.tar.gz 打包内容<br><span class="hljs-comment"># 举例1：将当前目录下的a.txt和b.txt文件打包压缩成a.tar.gz文件</span><br>tar -zcvf a.tar.zg a.txt b.txt<br><span class="hljs-comment"># 举例2：将a.tar.zg解压当当前目录</span><br>tar -zxvf a.tar.gz<br><span class="hljs-comment"># 举例3：将a.tar.zg解压到/opt/目录</span><br>tar -zxvf a.tar.zg -C /opt/  <span class="hljs-comment"># 解压到指定目录，则该目录必须存在</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;tar指令常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">产生.tar打包文件</td></tr><tr><td align="center">-v</td><td align="center">显示详细信息</td></tr><tr><td align="center">-f</td><td align="center">指定压缩后的文件名</td></tr><tr><td align="center">-z</td><td align="center">打包同时压缩</td></tr><tr><td align="center">-x</td><td align="center">解包.tar文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS高可用(HA)理论概述</title>
      <link href="/2020/06/19/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/06/19/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#ha概述">HA概述</a></li><li><a href="#hdfs-ha的工作机制">HDFS HA的工作机制</a></li><li><a href="#hdfs-ha的工作要点">HDFS HA的工作要点</a></li><li><a href="#hdfs-ha自动故障转移工作机制">HDFS-HA自动故障转移工作机制</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="HA概述"><a href="#HA概述" class="headerlink" title="HA概述"></a>HA概述</h2><ul><li>所谓HA（High Available），即高可用（7*24小时不中断服务）。</li><li>实现高可用最关键的策略是<font color="red">消除单点故障</font>。HA严格来说应该分成各个组件的HA机制：HDFS的HA和YARN的HA。</li><li>在老版本Hadoop2.0之前，在HDFS集群中<code>NameNode存在单点故障（SPOF）</code>。</li><li>NameNode主要在以下两个方面影响HDFS集群：<ol><li><em>NameNode机器发生意外，如宕机，集群将无法使用，直到管理员重启。</em></li><li><em>NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用。</em></li></ol></li><li>HDFS HA功能通过配置<code>Active/Standby</code>两个NameNodes实现在集群中对NameNode的<code>热备</code>来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器。</li></ul><hr><h2 id="HDFS-HA的工作机制"><a href="#HDFS-HA的工作机制" class="headerlink" title="HDFS HA的工作机制"></a>HDFS HA的工作机制</h2><p>&#8195;&#8195;通过双NameNode消除单点故障。</p><hr><h2 id="HDFS-HA的工作要点"><a href="#HDFS-HA的工作要点" class="headerlink" title="HDFS HA的工作要点"></a>HDFS HA的工作要点</h2><blockquote><p><strong>元数据管理方式需要改变：</strong><br>内存中各自保存一份元数据；Edits日志只有<code>active状态</code>的NameNode节点可以做<code>写</code>操作；两个NameNode都可以读取Edits；共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）。</p><p><strong>需要一个状态管理功能模块：</strong><br><font color="red">实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在NameNode节点，利用zk进行状态标识，当需要进行状态切换时，由zkfailover来负责切换，切换时需要防止brain split现象的发生。</font></p><p><strong>必须保证两个NameNode之间能够ssh无密码登录。</strong></p><p><strong>隔离（Fence），即同一时刻仅仅有一个NameNode对外提供服务。</strong></p></blockquote><hr><h2 id="HDFS-HA自动故障转移工作机制"><a href="#HDFS-HA自动故障转移工作机制" class="headerlink" title="HDFS-HA自动故障转移工作机制"></a>HDFS-HA自动故障转移工作机制</h2><p>&#8195;&#8195;自动故障转移为HDFS部署增加了两个新组件：<code>ZooKeeper</code>和<code>ZKFailoverController（ZKFC）</code>进程。<br>&#8195;&#8195;<font color="red">ZooKeeper是维护少量协调数据，通知客户端这些数据的改变和监视客户端故障的高可用服务。</font> HA的自动故障转移依赖于ZooKeeper的以下功能：  </p><ol><li><strong>故障检测：</strong> 集群中的每个NameNode在ZooKeeper中维护了一个持久会话，如果机器崩溃，ZooKeeper中的会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移。  </li><li><strong>现役NameNode选择：</strong> ZooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的<code>排外锁以表明它应该成为现役NameNode。</code><br></li></ol><p>&#8195;&#8195;ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p><ol><li><strong>健康监测：</strong> ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。<br></li><li><strong>ZooKeeper会话管理：</strong> 当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个<code>特殊的znode锁</code>，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除。<br></li><li><strong>基于ZooKeeper的选择：</strong> 如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为Active。故障转移进程与前面描述的手动故障转移相似，首先如果必要保护之前的现役NameNode，然后本地NameNode转换为Active状态。<br><br>&#8195;&#8195;HDFS-HA故障转移机制如下图所示：<img src="/2020/06/19/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/HDFS-HA%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E6%9C%BA%E5%88%B6.png" alt="HDFS-HA故障转移机制"></li></ol><blockquote><p>说明：上述内容是我学习b站<a href="https://space.bilibili.com/302417610?spm_id_from=333.788.b_765f7570696e666f.2" target="_blank" rel="noopener">尚硅谷官方</a>分享的公开课<a href="https://www.bilibili.com/video/BV1cW411r7c5" target="_blank" rel="noopener">尚硅谷Hadoop教程(hadoop框架精讲)</a>总结得出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysq流程控制结构</title>
      <link href="/2020/06/17/Mysql%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2020/06/17/Mysql%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a></li><li><a href="#分支结构">分支结构</a></li><li><a href="#案例">案例</a></li><li><a href="#循环结构">循环结构</a></li><li><a href="#案例-1">案例</a></li><li><a href="#经典案例">经典案例</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>顺序结构：程序从上往下依次执行。</li><li>分支结构：程序从两条或多条路径中选择一条去执行。</li><li>循环结构：程序在满足一定条件的基础上，重复执行一段代码。</li></ol><hr><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- 1、if结构</span><br>/*<br>功能：<br>实现简单的双支结构<br>语法：<br><span class="hljs-keyword">IF</span> (表达式<span class="hljs-number">1</span>, 表达式<span class="hljs-number">2</span>， 表达式<span class="hljs-number">3</span>)<br>执行顺序：<br>如果表达式<span class="hljs-number">1</span>成立，则<span class="hljs-keyword">IF</span>函数返回表达式<span class="hljs-number">2</span>的值，否则返回表达式<span class="hljs-number">3</span>的值<br>应用场景：<br>任何地方<br>*/<br><br>/*<br>功能：<br>实现多重分支<br>语法：<br><span class="hljs-keyword">IF</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 语句<span class="hljs-number">1</span>;<br>ELSEIF 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 语句<span class="hljs-number">2</span>;<br>...<br>[<span class="hljs-keyword">ELSE</span> 语句n;]<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br>应用场景：<br><span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>中<br>*/<br><br><br><span class="hljs-comment">-- 2、case结构</span><br>/*<br>情况<span class="hljs-number">1</span>：<br>类似于java中switch语句，一般用于实现的等值判断<br>语法<span class="hljs-number">1</span>：<br><span class="hljs-keyword">CASE</span> 变量|表达式|字段<br><span class="hljs-keyword">WHEN</span> 要判断的值 <span class="hljs-keyword">THEN</span> 返回的值<span class="hljs-number">1</span><br><span class="hljs-keyword">WHEN</span> 要判断的值 <span class="hljs-keyword">THEN</span> 返回的值<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">ELSE</span> 要返回的值n<br><span class="hljs-keyword">END</span>;<br><br>语法<span class="hljs-number">2</span>：<br><span class="hljs-keyword">CASE</span> 变量|表达式|字段<br><span class="hljs-keyword">WHEN</span> 要判断的值 <span class="hljs-keyword">THEN</span> 返回的语句<span class="hljs-number">1</span>;<br><span class="hljs-keyword">WHEN</span> 要判断的值 <span class="hljs-keyword">THEN</span> 返回的语句<span class="hljs-number">2</span>；<br>...<br><span class="hljs-keyword">ELSE</span> 要返回的语句n;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><br><br>情况<span class="hljs-number">2</span>：<br>类似于java中的多重<span class="hljs-keyword">IF</span>语句，一般用于实现区间判断<br>语法<span class="hljs-number">1</span>：<br><span class="hljs-keyword">CASE</span> <br><span class="hljs-keyword">WHEN</span> 要判断的条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 返回的值<span class="hljs-number">1</span><br><span class="hljs-keyword">WHEN</span> 要判断的条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 返回的值<span class="hljs-number">2</span><br>...<br><span class="hljs-keyword">ELSE</span> 要返回的值n<br><span class="hljs-keyword">END</span>;<br><br>语法<span class="hljs-number">2</span>：<br><span class="hljs-keyword">CASE</span> <br><span class="hljs-keyword">WHEN</span> 要判断的条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 返回的语句<span class="hljs-number">1</span>;<br><span class="hljs-keyword">WHEN</span> 要判断的条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 返回的语句<span class="hljs-number">2</span>;<br>...<br><span class="hljs-keyword">ELSE</span> 要返回的语句n;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><br><br>特点：<br>可以作为表达式（语法<span class="hljs-number">1</span>），嵌套在其他语句中使用，可以放在任何地方，<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>中或<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>的外面<br>可以作为独立的语句（语法<span class="hljs-number">2</span>），只能放在<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>中<br>如果<span class="hljs-keyword">when</span>中的值满足或条件成立，则执行对应的<span class="hljs-keyword">then</span>后面的语句，并且结束<span class="hljs-keyword">case</span>；如果都不满足，则执行<span class="hljs-keyword">else</span>中的语句或值<br><span class="hljs-keyword">else</span>可以省略，如果<span class="hljs-keyword">else</span>省略了，并且所有的<span class="hljs-keyword">when</span>语句都不满足，则返回null<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 案例1：创建存储过程，根据传入的成绩，来显示等级，比如传入的成绩：90-100，显示A，80-90，显示B，60-80，显示C，否则，显示D（case作为独立的语句）</span><br><span class="hljs-keyword">DELIMITER</span> $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> test_case(<span class="hljs-keyword">IN</span> score <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> score &gt;= <span class="hljs-number">90</span> <span class="hljs-keyword">AND</span> score &lt;= <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">'A'</span>;<br><span class="hljs-keyword">WHEN</span> score &gt;= <span class="hljs-number">80</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">'B'</span>;<br><span class="hljs-keyword">WHEN</span> score &gt;= <span class="hljs-number">60</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">'C'</span>;<br><span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-string">'D'</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><span class="hljs-keyword">end</span> $<br><br><span class="hljs-keyword">CALL</span> test_case(<span class="hljs-number">95</span>);<br><br><br><span class="hljs-comment">-- 案例2：创建函数，根据传入的成绩，来显示等级，比如传入的成绩：90-100，显示A，80-90，显示B，60-80，显示C，否则，显示D（if实现多重分支结构）</span><br><span class="hljs-keyword">DELIMITER</span> $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> test_if ( score <span class="hljs-type">INT</span> ) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">CHAR</span> <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">IF</span> score &gt;= <span class="hljs-number">90</span> <span class="hljs-keyword">AND</span> score &lt;= <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">RETURN</span> <span class="hljs-string">'A'</span>; <br>ELSEIF score &gt;= <span class="hljs-number">80</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">RETURN</span> <span class="hljs-string">'B'</span>;<br>ELSEIF score &gt;= <span class="hljs-number">60</span> <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">RETURN</span> <span class="hljs-string">'C'</span>;<br><span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">RETURN</span> <span class="hljs-string">'D'</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>; <br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">SELECT</span> test_if(<span class="hljs-number">86</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">/*<br>分类：<br><span class="hljs-keyword">while</span>、<span class="hljs-keyword">loop</span>、repeat<br>循环控制：<br>iterate类似于<span class="hljs-keyword">continue</span>，结束本次循环，继续下一次<br>leave 类似于break，结束当前循环<br>*/<br><br>/*<br><span class="hljs-keyword">while</span>语法：<br>[标签:]<span class="hljs-keyword">WHILE</span> 循环条件 <span class="hljs-keyword">DO</span><br>循环体;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span>[标签];<br>*/<br><br>/*<br><span class="hljs-keyword">loop</span>语法：<br>[标签:]<span class="hljs-keyword">LOOP</span><br>循环体;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">LOOP</span>[标签];<br><br>可以用来模拟简单的死循环<br>*/<br><br>/*<br>repeat语法：<br>[标签:]REPEAT<br>循环体;<br><span class="hljs-keyword">UNTIL</span> 结束循环的条件;<br><span class="hljs-keyword">END</span> REPEAT[标签];<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 案例1：批量插入，根据次数插入到admin表中多条记录</span><br><span class="hljs-keyword">DELIMITER</span> $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> pro_while ( <span class="hljs-keyword">IN</span> insertcount <span class="hljs-type">INT</span> ) <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span><br>i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">WHILE</span><br>i &lt;= insertcount <span class="hljs-keyword">DO</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">admin</span> ( username, `<span class="hljs-keyword">password</span>` )<br><span class="hljs-keyword">VALUES</span><br>( CONCAT(<span class="hljs-string">'Rose'</span>, i), <span class="hljs-string">'666'</span> );<br><span class="hljs-keyword">SET</span> i = i + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span>;<br><span class="hljs-keyword">END</span>$<br><br><span class="hljs-keyword">CALL</span> pro_while(<span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>;<br><br><br><span class="hljs-comment">-- 案例2：批量插入，根据次数插入到admin表中多条记录，如果次数超过次数&gt;20则停止</span><br><span class="hljs-keyword">DELIMITER</span> $ <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> pro_while1(<span class="hljs-keyword">IN</span> insertcount <span class="hljs-type">INT</span>) <br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SET</span> @i=<span class="hljs-number">1</span>;<br>a:<span class="hljs-keyword">WHILE</span> @i &lt;= insertcount <span class="hljs-keyword">DO</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">admin</span>(username, `<span class="hljs-keyword">password</span>`) <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">'Tom'</span>, @i), <span class="hljs-string">'888'</span>);<br><span class="hljs-keyword">IF</span> @i &gt;= <span class="hljs-number">20</span> <span class="hljs-keyword">THEN</span> LEAVE a;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-keyword">SET</span> @i = @i + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span> a;<br><span class="hljs-keyword">END</span>$<br><br><span class="hljs-keyword">CALL</span> pro_while1(<span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>;<br><br><br><span class="hljs-comment">-- 案例2：批量插入，根据次数插入到admin表中多条记录，偶数次不插入，奇数次插入</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">admin</span>;<br><span class="hljs-keyword">DELIMITER</span> $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> pro_while3(<span class="hljs-keyword">IN</span> insertcount <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SET</span> @i=<span class="hljs-number">-1</span>;<br>a:<span class="hljs-keyword">WHILE</span> @i &lt;= insertcount <span class="hljs-keyword">DO</span><br><span class="hljs-keyword">SET</span> @i = @i + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">IF</span> @i % <span class="hljs-number">2</span> = <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> ITERATE a;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">admin</span>(username, `<span class="hljs-keyword">password</span>`) <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">'Lucy'</span>, @i), <span class="hljs-string">'999'</span>);<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span> a;<br><span class="hljs-keyword">END</span>$<br><br><span class="hljs-keyword">CALL</span> pro_while3(<span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-- 经典案例：已知表stringcontent，其中字段：id 自增长， content varchar(20)，向该表插入指定个数的，随机的连续字符串<br>DROP TABLE stringcontent;<br>CREATE TABLE <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> EXISTS stringcontent (<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>content VARCHAR ( 26 )<br>);<br><br><br>DELIMITER $<br>CREATE PROCEDURE test_randstr_insert(<span class="hljs-keyword">IN</span> insertcount INT)<br>BEGIN<br>DECLARE i INT<span class="hljs-built_in"> DEFAULT </span>1; # 定义一个循环变量i，表示插入的次数<br>DECLARE str VARCHAR(26)<span class="hljs-built_in"> DEFAULT </span><span class="hljs-string">'abcdefghijklmnopqrstuvwxyz'</span>;<br>DECLARE startindex INT<span class="hljs-built_in"> DEFAULT </span>1; # 代表起始索引<br>DECLARE len INT<span class="hljs-built_in"> DEFAULT </span>1; # 代表截取的字符的长度<br><span class="hljs-keyword">WHILE</span> i &lt;= insertcount <span class="hljs-keyword">DO</span><br><span class="hljs-builtin-name">SET</span> startindex = FLOOR(RAND() * 26 + 1); # 产生一个随机的整数，代表起始索引1-&gt;26<br><span class="hljs-builtin-name">SET</span> len = FLOOR(RAND() * (26 - startindex + 1) + 1); # 产生一个随机整数，代表截取长度，1-&gt;(26 - startindex + 1)<br>INSERT INTO stringcontent(content) VALUES(SUBSTR(str, startindex, len));<br><span class="hljs-builtin-name">SET</span> i = i + 1;<br>END <span class="hljs-keyword">WHILE</span>;<br>END$<br><br><br>CALL test_randstr_insert(10);<br>SELECT * <span class="hljs-keyword">FROM</span> stringcontent;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql函数</title>
      <link href="/2020/06/17/Mysql%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/17/Mysql%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#含义">含义</a></li><li><a href="#函数和存储过程的区别">函数和存储过程的区别</a></li><li><a href="#创建语法">创建语法</a></li><li><a href="#调用语法">调用语法</a></li><li><a href="#案例">案例</a></li><li><a href="#查看函数过程">查看函数过程</a></li><li><a href="#删除函数">删除函数</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>&#8195;&#8195;含义：一组预先编译好的sql语句的集合，理解成批处理语句。</p><ol><li>提高代码的重要性。</li><li>简化操作。</li><li>减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。</li></ol><hr><h2 id="函数和存储过程的区别"><a href="#函数和存储过程的区别" class="headerlink" title="函数和存储过程的区别"></a>函数和存储过程的区别</h2><p>&#8195;&#8195;存储过程：可以有0个返回，也可以有多个返回，适合做批量的插入、批量的更新。<br>&#8195;&#8195;函数：有且仅有一个返回，适合做处理数据后返回一个结果。</p><hr><h2 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ruby">CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型<br><span class="hljs-keyword">BEGIN</span><br>函数体<br><span class="hljs-keyword">END</span> $<br><br>/*<br>注意：<br><span class="hljs-number">1</span>、参数列表包含两个部分：<br>参数名和参数类型<br><br><span class="hljs-number">2</span>、函数体：<br>肯定有<span class="hljs-keyword">return</span>语句，如果没有会报错。如果<span class="hljs-keyword">return</span>语句没有放在函数体的最后也不报错，但不建议。<br><br><span class="hljs-number">3</span>、<span class="hljs-keyword">return</span>值：<br>函数体如果仅有一句话，则可以省略<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span><br>使用delimiter语句设置结束标记<br>*<span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><hr><h2 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">SELECT</span> 函数名(参数列表)<br></code></pre></td></tr></table></figure><hr><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> log_bin_trust_function_creators = <span class="hljs-literal">TRUE</span>; <span class="hljs-comment"># mysql8.0不设置会报错（开启创建函数功能）</span><br><br><span class="hljs-comment">-- 案例1：返回公司员工个数（无参有返回）</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> myf1 () <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">INT</span> <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span><br>res <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<span class="hljs-comment"># 定义局部变量（也可以定义用户变量）</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">INTO</span> res <span class="hljs-comment"># 赋值</span><br><span class="hljs-keyword">FROM</span><br>employees;<br>RETURN res; <span class="hljs-comment"># 返回值</span><br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">SELECT</span> myf1()$<br><br><br><span class="hljs-comment">-- 案例2：根据员工名，返回它的工资（有返回值）</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> myf2 (empname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> )) <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span><br>res <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">SELECT</span><br>salary * (<br><span class="hljs-number">1</span> + <span class="hljs-keyword">IFNULL</span>( commission_pct, <span class="hljs-number">0</span> )) * <span class="hljs-number">12</span> <span class="hljs-keyword">INTO</span> res<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span><br>Last_name = empname;<br>RETURN res;<br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">SELECT</span> myf2(<span class="hljs-string">'Kochhar'</span>)$<br><br><br><span class="hljs-comment">-- 案例3：根据部门名，返回该部门的平均工资</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> myf3;<br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> myf3 (<br>depname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> )) <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SET</span> @res = <span class="hljs-number">0</span>; <span class="hljs-comment"># 定义用户变量</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">AVG</span>( salary ) <span class="hljs-keyword">INTO</span> @res <span class="hljs-comment"># 赋值</span><br><span class="hljs-keyword">FROM</span><br>employees e<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> e.department_id = d.department_id <br><span class="hljs-keyword">WHERE</span><br>d.department_name = depname;<br>RETURN @res; <span class="hljs-comment"># 返回值</span><br><br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">SELECT</span> myf3(<span class="hljs-string">'Adm'</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="查看函数过程"><a href="#查看函数过程" class="headerlink" title="查看函数过程"></a>查看函数过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> 函数名;<br></code></pre></td></tr></table></figure><hr><h2 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> 函数名;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql存储过程</title>
      <link href="/2020/06/17/Mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/06/17/Mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#含义">含义</a></li><li><a href="#创建语法">创建语法</a></li><li><a href="#调用方法">调用方法</a></li><li><a href="#使用案例">使用案例</a></li><li><a href="#带in模式的存储过程">带in模式的存储过程</a></li><li><a href="#带out模式的存储过程">带out模式的存储过程</a></li><li><a href="#带inout模式的存储过程">带inout模式的存储过程</a></li><li><a href="#删除存储过程">删除存储过程</a></li><li><a href="#查看存储过程的信息">查看存储过程的信息</a></li><li><a href="#注意">注意</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>&#8195;&#8195;含义：一组预先编译好的sql语句的集合，理解成批处理语句。</p><ol><li>提高代码的重要性。</li><li>简化操作。</li><li>减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。</li></ol><hr><h2 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> 存储过程的名字 <span class="hljs-params">(参数列表)</span></span><br><span class="hljs-function"><span class="hljs-title">BEGIN</span></span><br><span class="hljs-function">存储过程体（一组合法的<span class="hljs-title">sql</span>语句）</span><br><span class="hljs-function"><span class="hljs-title">END</span> $</span><br><span class="hljs-function"></span><br><span class="hljs-function">/*</span><br><span class="hljs-function">注意：</span><br><span class="hljs-function">1、参数列表包含三部分</span><br><span class="hljs-function">参数模式   参数名    参数类型</span><br><span class="hljs-function"><span class="hljs-title">IN</span>        <span class="hljs-title">stuname</span>   <span class="hljs-title">VARCHAR</span><span class="hljs-params">(20)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">参数模式：</span><br><span class="hljs-function"><span class="hljs-title">IN</span>：该参数可以作为输入，也就是说该参数需要调用方传入值</span><br><span class="hljs-function"><span class="hljs-title">OUT</span>：该参数可以作为输出，也就是该参数可以作为返回值</span><br><span class="hljs-function"><span class="hljs-title">INOUT</span>：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</span><br><span class="hljs-function"></span><br><span class="hljs-function">2、如果存储过程体仅仅只有一句话，<span class="hljs-title">begin</span> <span class="hljs-title">end</span>可以省略。</span><br><span class="hljs-function">   存储过程体中的每条<span class="hljs-title">sql</span>语句的结尾要求必须加分号。</span><br><span class="hljs-function">   存储过程体结尾可以使用<span class="hljs-title">delimited</span>重新设置。</span><br><span class="hljs-function">语法：</span><br><span class="hljs-function"> <span class="hljs-title">DELIMITER</span> 结束标记</span><br><span class="hljs-function">案例：</span><br><span class="hljs-function"> <span class="hljs-title">DELIMITER</span> $</span><br><span class="hljs-function">*/</span><br></code></pre></td></tr></table></figure><hr><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">CALL</span> 存储过程<span class="hljs-comment">(实参列表)</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">-- 案例<span class="hljs-number">1</span>：插入admin表中五条记录<br><br>-- 创建<br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">myp1</span> <span class="hljs-params">()</span> <span class="hljs-title">BEGIN</span></span><br><span class="hljs-function"><span class="hljs-title">INSERT</span> <span class="hljs-title">INTO</span> <span class="hljs-title">admin</span> <span class="hljs-params">( username, `password` )</span></span><br><span class="hljs-function"><span class="hljs-title">VALUES</span></span><br><span class="hljs-function"><span class="hljs-params">( <span class="hljs-string">'john1'</span>, <span class="hljs-string">'0000'</span> )</span>,</span><br><span class="hljs-function"><span class="hljs-params">( <span class="hljs-string">'lily'</span>, <span class="hljs-string">'0000'</span> )</span>,</span><br><span class="hljs-function"><span class="hljs-params">( <span class="hljs-string">'rose'</span>, <span class="hljs-string">'0000'</span> )</span>,</span><br><span class="hljs-function"><span class="hljs-params">( <span class="hljs-string">'jack'</span>, <span class="hljs-string">'0000'</span> )</span>,</span><br><span class="hljs-function"><span class="hljs-params">( <span class="hljs-string">'tom'</span>, <span class="hljs-string">'0000'</span> )</span>;</span><br><br><span class="hljs-keyword">END</span> $<br><br>-- 调用<br>CALL myp1();<br></code></pre></td></tr></table></figure><hr><h2 id="带in模式的存储过程"><a href="#带in模式的存储过程" class="headerlink" title="带in模式的存储过程"></a>带in模式的存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例2：创建存储过程实现根据女神名，查询对应的男神信息</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp2 (<br><span class="hljs-keyword">IN</span> beautyname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> )) <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span><br>bo.* <br><span class="hljs-keyword">FROM</span><br>boys bo<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> beauty b <span class="hljs-keyword">ON</span> bo.id = b.boyfriend_id <br><span class="hljs-keyword">WHERE</span><br>b.<span class="hljs-string">`name`</span> = beautyname;<br><br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">CALL</span> myp2(<span class="hljs-string">'柳岩'</span>);<br><br><br><span class="hljs-comment">-- 案例3：创建存储过程，用户是否登陆成功</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp4 (<br><span class="hljs-keyword">IN</span> username <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ),<br><span class="hljs-keyword">IN</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> )) <span class="hljs-keyword">BEGIN</span><br><br><span class="hljs-keyword">DECLARE</span><br><span class="hljs-keyword">result</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<span class="hljs-comment"># 声明并初始化</span><br><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">result</span> <span class="hljs-comment"># 赋值</span><br><span class="hljs-keyword">FROM</span><br><span class="hljs-keyword">admin</span> <br><span class="hljs-keyword">WHERE</span><br>username = admin.<span class="hljs-string">`password`</span> <br><span class="hljs-keyword">AND</span> <span class="hljs-keyword">PASSWORD</span> = admin.<span class="hljs-string">`password`</span>;<br><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">IF</span>(<span class="hljs-keyword">result</span> &gt; <span class="hljs-number">0</span>, <span class="hljs-string">'成功'</span>, <span class="hljs-string">'失败'</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">'登陆状态'</span>; <span class="hljs-comment"># 使用</span><br><br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">CALL</span> myp4(<span class="hljs-string">'张飞'</span>, <span class="hljs-string">'8888'</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="带out模式的存储过程"><a href="#带out模式的存储过程" class="headerlink" title="带out模式的存储过程"></a>带out模式的存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例4：根据女神名，返回对应的男神名</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp5 (<br><span class="hljs-keyword">IN</span> beautyname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ),<br><span class="hljs-keyword">OUT</span> boyname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> )) <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span><br>bo.boyName <span class="hljs-keyword">INTO</span> boyname <br><span class="hljs-keyword">FROM</span><br>boys bo<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> beauty b <span class="hljs-keyword">ON</span> bo.id = b.boyfriend_id <br><span class="hljs-keyword">WHERE</span><br>b.<span class="hljs-string">`name`</span> = beautyname;<br><br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">CALL</span> myp5(<span class="hljs-string">'柳岩'</span>, @bname);<br><span class="hljs-keyword">SELECT</span> @bname;<br><br><br><span class="hljs-comment">-- 案例5：根据女神名，返回对应的男神名和男神魅力值</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp6 ( <span class="hljs-keyword">IN</span> beautyname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ), <span class="hljs-keyword">OUT</span> boyname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ), <span class="hljs-keyword">OUT</span> userCP <span class="hljs-built_in">INT</span> ) <span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span><br>bo.boyName,<br>bo.userCP <span class="hljs-keyword">INTO</span> boyname,<br>usercp <br><span class="hljs-keyword">FROM</span><br>boys bo<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> beauty b <span class="hljs-keyword">ON</span> bo.id = b.boyfriend_id <br><span class="hljs-keyword">WHERE</span><br>b.<span class="hljs-string">`name`</span> = beautyname;<br><br><span class="hljs-keyword">END</span> $<br><br><span class="hljs-keyword">CALL</span> myp6(<span class="hljs-string">'柳岩'</span>, @bname, @usercp);<br><span class="hljs-keyword">SELECT</span> @bname, @usercp;<br></code></pre></td></tr></table></figure><hr><h2 id="带inout模式的存储过程"><a href="#带inout模式的存储过程" class="headerlink" title="带inout模式的存储过程"></a>带inout模式的存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 案例6：传入a和b两个值，最终a和b都翻倍并返回</span><br>DELIMITER $<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> myp7(INOUT a <span class="hljs-built_in">INT</span>, INOUT b <span class="hljs-built_in">INT</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SET</span> a = <span class="hljs-number">2</span> * a;<br><span class="hljs-keyword">SET</span> b = <span class="hljs-number">2</span> * b;<br><span class="hljs-keyword">END</span>$<br><br><span class="hljs-keyword">SET</span> @m=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">set</span> @n=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">CALL</span> myp7(@m, @n);<br><span class="hljs-keyword">SELECT</span> @m, @n;<br></code></pre></td></tr></table></figure><hr><h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cal">-- 语法：DROP <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span>存储过程名</span><br><span class="hljs-function"><span class="hljs-title">DROP</span> <span class="hljs-title">PROCEDURE</span> <span class="hljs-title">myp1</span>;</span><br>-- 注意：不允许同时删除多个存储过程<br></code></pre></td></tr></table></figure><hr><h2 id="查看存储过程的信息"><a href="#查看存储过程的信息" class="headerlink" title="查看存储过程的信息"></a>查看存储过程的信息</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">SHOW <span class="hljs-keyword">CREATE</span> <span class="hljs-function"><span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title">myp2</span>;</span><br></code></pre></td></tr></table></figure><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>&#8195;&#8195;存储过程不允许修改，一般都是删除再创建。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql常见约束</title>
      <link href="/2020/06/15/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F)/"/>
      <url>/2020/06/15/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#常见约束">常见约束</a></li><li><a href="#通用格式">通用格式</a></li><li><a href="#创建表时添加约束">创建表时添加约束</a><ul><li><a href="#添加列级约束">添加列级约束</a></li><li><a href="#添加表级约束">添加表级约束</a></li></ul></li><li><a href="#修改表时添加约束">修改表时添加约束</a></li><li><a href="#修改表时删除约束">修改表时删除约束</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sql">含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性<br><br>分类：六大约束<br>not null：非空，用于保证该字段的值不能为空，比如：姓名、学号等<br>default:默认，用于保证该字段有默认值，比如：性别<br>primary key：主键，用于保证该字段的值具有唯一性，并且非空，比如：学号、员工编号等<br>unique：唯一，用于保证该字段的值具有唯一性，可以为空，比如：座位号<br><span class="hljs-keyword">check</span>：检查约束[mysql中不支持]<br><span class="hljs-keyword">foreign</span> <span class="hljs-keyword">key</span>：外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值<br>在从表添加外键约束，用于引用主表中某些列的值<br><br>添加约束的时机：<br><span class="hljs-number">1</span>、创建表时<br><span class="hljs-number">2</span>、修改表时<br><br><br>约束的添加分类：<br>列级约束：六大约束在语法上都支持，但外键约束没有效果<br>表级约束：除了非空、默认，其它的都支持<br><br><br>主键和唯一的大对比：<br>保证唯一性   是否允许为空    一个表中是否可以有多个            是否允许组合<br>主键        是          不允许             至多一个                  是（不推荐）<br>唯一        是           允许              可以有多个                是（不推荐）<br><br><br>外键：<br><span class="hljs-number">1</span>、要求在从表设置外键关系<br><span class="hljs-number">2</span>、从表的外键列的类型和主表的关联列的类型要求一致或兼容<br><span class="hljs-number">3</span>、主表的关联列必须是一个<span class="hljs-keyword">key</span>（一般是主键或唯一键）<br><span class="hljs-number">4</span>、插入数据时，先插入主表，再插入从表；删除数据时，先删除从表，再删除主表<br><br><br>为了避免“删除数据时，一定要先删除从表，再删除主表”的情况：<br>有两种方法：<br><span class="hljs-number">1</span>、级联删除（在创建外键语句末尾加关键字 <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">cascade</span>）：<span class="hljs-keyword">CONSTRAINT</span> fk_stuinfo_major <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> ( majorid ) <span class="hljs-keyword">REFERENCES</span> stuinfo ( <span class="hljs-keyword">id</span> ) [<span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">CASCADED</span>];<br>这样在删除主表信息的时候，从表关联信息也会一起删除<br>2、级联置空：（在创建外键语句末尾加关键字 on <span class="hljs-keyword">delete</span> <span class="hljs-keyword">set</span> <span class="hljs-literal">null</span>）：<span class="hljs-keyword">CONSTRAINT</span> fk_stuinfo_major <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> ( majorid ) <span class="hljs-keyword">REFERENCES</span> stuinfo ( <span class="hljs-keyword">id</span> ) [<span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">SET</span> <span class="hljs-literal">NULL</span>];<br>这样在删除主表信息的时候，从表关联信息会被设置为null<br><br><br>可以同时加入多个约束，用空格隔开即可<br></code></pre></td></tr></table></figure><hr><h2 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">CREATE <span class="hljs-keyword">TABLE</span> 表名(<br>字段名 字段类型 列级约束,<br>字段名 字段类型,<br>表级约束<br>)<br></code></pre></td></tr></table></figure><hr><h2 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h2><h3 id="添加列级约束"><a href="#添加列级约束" class="headerlink" title="添加列级约束"></a>添加列级约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">直接在字段名和类型后面追加约束类型即可</span><br><span class="hljs-comment">只支持：默认、非空、主键、唯一</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stuinfo (<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,<span class="hljs-comment"># 主键</span><br>stuname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-comment"># 非空</span><br>gender <span class="hljs-built_in">CHAR</span> ( <span class="hljs-number">1</span> ) <span class="hljs-keyword">CHECK</span> ( gender = <span class="hljs-string">'男'</span> <span class="hljs-keyword">OR</span> gender = <span class="hljs-string">'女'</span> ),<span class="hljs-comment"># 检查（不支持）</span><br>seat <span class="hljs-built_in">INT</span> <span class="hljs-keyword">UNIQUE</span>,<span class="hljs-comment"># 唯一</span><br>age <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">18</span>,<span class="hljs-comment"># 默认</span><br>majorid <span class="hljs-built_in">INT</span> <span class="hljs-comment"># 外键</span><br><br>);<br>DESC stuinfo;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> major ( <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>, majorname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) );<br>DESC major;<br><br><span class="hljs-comment">-- 查看表中主键、外键、唯一键生成的索引，可以和desc命令结合一起看表的结构</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-keyword">FROM</span> stuinfo;<br></code></pre></td></tr></table></figure><hr><h3 id="添加表级约束"><a href="#添加表级约束" class="headerlink" title="添加表级约束"></a>添加表级约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">语法：在各个字段的最下面</span><br><span class="hljs-comment">[constraint 约束名] 约束类型(字段名)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stuinfo_new (<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>,<br>stuname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ),<br>gender <span class="hljs-built_in">CHAR</span> ( <span class="hljs-number">1</span> ),<br>seat <span class="hljs-built_in">INT</span>,<br>age <span class="hljs-built_in">INT</span>,<br>majorid <span class="hljs-built_in">INT</span>,<br><span class="hljs-keyword">CONSTRAINT</span> pk PRIMARY <span class="hljs-keyword">KEY</span> ( <span class="hljs-keyword">id</span> ),<span class="hljs-comment"># 主键（mysql主键名改不了，永远是primary）</span><br><span class="hljs-keyword">CONSTRAINT</span> uq <span class="hljs-keyword">UNIQUE</span> ( seat ),  <span class="hljs-comment"># 唯一</span><br><span class="hljs-keyword">CONSTRAINT</span> ck <span class="hljs-keyword">CHECK</span> ( gender = <span class="hljs-string">'男'</span> <span class="hljs-keyword">OR</span> gender = <span class="hljs-string">'女'</span> ),  <span class="hljs-comment"># 检查</span><br><span class="hljs-keyword">CONSTRAINT</span> fk_stuinfo_major <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> ( majorid ) <span class="hljs-keyword">REFERENCES</span> stuinfo ( <span class="hljs-keyword">id</span> )  <span class="hljs-comment"># 外键</span><br><br>);<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-keyword">FROM</span> stuinfo_new;<br><br><br><span class="hljs-comment">-- 通用写法</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stuinfo (<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>,<br>stuname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>gender <span class="hljs-built_in">CHAR</span> ( <span class="hljs-number">1</span> ),<br>age <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">18</span>,<br>seat <span class="hljs-built_in">INT</span> <span class="hljs-keyword">UNIQUE</span>,<br>majorid <span class="hljs-built_in">INT</span>,<br><span class="hljs-keyword">CONSTRAINT</span> fk_stuinofo_major <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> ( majorid ) <span class="hljs-keyword">REFERENCES</span> major ( <span class="hljs-keyword">id</span> ) <br>);<br></code></pre></td></tr></table></figure><hr><h2 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、添加列级约束（语法）不支持约束名：</span><br><span class="hljs-comment">alter table 表名 modify columns 字段名 字段类型 新约束;</span><br><span class="hljs-comment">2、添加表级约束（语法）支持约束名：</span><br><span class="hljs-comment">alter table 表名 add [constraint 约束名] 约束类型(字段名) [外键引用];</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> stuinfo;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stuinfo(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>,<br>stuname <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>),<br>gender <span class="hljs-built_in">CHAR</span>(<span class="hljs-number">1</span>),<br>seat <span class="hljs-built_in">INT</span>,<br>age <span class="hljs-built_in">INT</span>,<br>majorid <span class="hljs-built_in">INT</span><br>);<br>DESC stuinfo;<br><br><span class="hljs-comment">-- 1、添加非空约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> stuname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br>DESC stuinfo;<br><br><span class="hljs-comment">-- 2、添加默认约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> age <span class="hljs-built_in">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">18</span>;<br>DESC stuinfo;<br><br><span class="hljs-comment">-- 3、添加主键</span><br><span class="hljs-comment">-- 列级约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>;<br>DESC stuinfo;<br><span class="hljs-comment">-- 表级约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">ADD</span> PRIMARY <span class="hljs-keyword">KEY</span> ( <span class="hljs-keyword">id</span> );<br><br><span class="hljs-comment">-- 4、唯一键</span><br><span class="hljs-comment">-- 列级约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> seat <span class="hljs-built_in">INT</span> <span class="hljs-keyword">UNIQUE</span>;<br>DESC stuinfo;<br><span class="hljs-comment">-- 表级约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> ( seat );<br><br><span class="hljs-comment">-- 5、添加外键</span><br><span class="hljs-comment">-- 仅仅支持表级约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> ( majorid ) <span class="hljs-keyword">REFERENCES</span> major ( <span class="hljs-keyword">id</span> );<br></code></pre></td></tr></table></figure><hr><h2 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1、删除非空约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> stuname <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">-- 2、删除默认约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> age <span class="hljs-built_in">INT</span>;<br><br><span class="hljs-comment">-- 3、删除主键</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">DROP</span> PRIMARY <span class="hljs-keyword">KEY</span>;<br><br><span class="hljs-comment">-- 4、删除唯一</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> seat;<br><br><span class="hljs-comment">-- 5、删除外键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> majorid;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql视图</title>
      <link href="/2020/06/15/Mysql%E8%A7%86%E5%9B%BE/"/>
      <url>/2020/06/15/Mysql%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a><ul><li><a href="#含义">含义</a></li><li><a href="#好处">好处</a></li><li><a href="#表和视图对比">表和视图对比</a></li></ul></li><li><a href="#创建视图">创建视图</a></li><li><a href="#视图的修改">视图的修改</a></li><li><a href="#删除视图">删除视图</a></li><li><a href="#查看视图">查看视图</a></li><li><a href="#视图的更新">视图的更新</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><blockquote><p>虚拟表，和普通表一样使用。<br>musql5.1版本出现的新特性，是通过表动态生成的数据。</p></blockquote><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>重用sql语句。</li><li>简化复杂的sql操作，不必知道它的查询细节。</li><li>保护数据，提高安全性。</li></ol><h3 id="表和视图对比"><a href="#表和视图对比" class="headerlink" title="表和视图对比"></a>表和视图对比</h3><table><thead><tr><th align="center">类型</th><th align="center">创建语法关键字</th><th align="center">是否实际占用物理空间</th><th align="center">使用</th></tr></thead><tbody><tr><td align="center">视图</td><td align="center">create view</td><td align="center">只是保存了sql逻辑</td><td align="center">增删改查，但一般不增删改查，只查询</td></tr><tr><td align="center">表</td><td align="center">create table</td><td align="center">占用</td><td align="center">增删改查</td></tr></tbody></table><hr><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">create view 视图名</span><br><span class="hljs-comment">as</span><br><span class="hljs-comment">查询语句;</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">-- 案例1：查询姓张的学生名和专业名</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v1 <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span><br>studentname,<br>majorname <br><span class="hljs-keyword">FROM</span><br>student s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> major m <span class="hljs-keyword">ON</span> s.majorid = m.majorid;<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> v1 <span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'张%'</span>;<br><br><br><span class="hljs-comment">-- 案例2：查询姓名中包含a字符的员工名、部门名和工种信息</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> myv1<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> last_name, department_name, job_title<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> e.department_id = d.department_id<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> jobs j <span class="hljs-keyword">ON</span> e.job_id = j.job_id;<br><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> myv1 <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%a%'</span>;<br><br><br><span class="hljs-comment">-- 案例3：查询各部门的平均工资级别</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> myv2<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(salary) ag, department_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id;<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> myv2;<br><br><span class="hljs-keyword">SELECT</span><br>myv2.ag,<br>grade_level <br><span class="hljs-keyword">FROM</span><br>myv2<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> job_grades jg <span class="hljs-keyword">ON</span> myv2.ag <span class="hljs-keyword">BETWEEN</span> jg.lowest_sal <br><span class="hljs-keyword">AND</span> jg.highest_sal;<br><br><br><span class="hljs-comment">-- 案例4：查询平均工资最低的部门信息</span><br><span class="hljs-keyword">SELECT</span> department_id<br><span class="hljs-keyword">FROM</span> myv2<br><span class="hljs-keyword">WHERE</span> ag = (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>(ag) <span class="hljs-keyword">FROM</span> myv2);<br><br><br><span class="hljs-keyword">SELECT</span><br>* <br><span class="hljs-keyword">FROM</span><br>departments <br><span class="hljs-keyword">WHERE</span><br>department_id = (<br><span class="hljs-keyword">SELECT</span><br>department_id <br><span class="hljs-keyword">FROM</span><br>myv2 <br><span class="hljs-keyword">WHERE</span><br>ag = ( <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MIN</span>( ag ) <span class="hljs-keyword">FROM</span> myv2 ));<br><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> myv2 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ag <span class="hljs-keyword">ASC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>;<br><br><br><span class="hljs-comment">-- 案例5：查询平均工资最低的部门名和工资</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> myv3<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> myv2 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ag <span class="hljs-keyword">ASC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">SELECT</span><br>myv3.ag,<br>d.department_name <br><span class="hljs-keyword">FROM</span><br>myv3<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d <span class="hljs-keyword">ON</span> myv3.department_id = d.department_id;<br></code></pre></td></tr></table></figure><hr><h2 id="视图的修改"><a href="#视图的修改" class="headerlink" title="视图的修改"></a>视图的修改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 方式一：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">create or repalce view 视图名</span><br><span class="hljs-comment">as</span><br><span class="hljs-comment">查询语句;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> <span class="hljs-keyword">REPLACE</span>] <span class="hljs-keyword">VIEW</span> myv3<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">AVG</span>(salary), job_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id;<br><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> myv3;<br><br><br><span class="hljs-comment">-- 方式二：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">alter view 视图名</span><br><span class="hljs-comment">as</span><br><span class="hljs-comment">查询语句;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> myv3<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees;<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> myv3;<br></code></pre></td></tr></table></figure><hr><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">语法：<span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> 视图名<span class="hljs-number">1</span>, 视图名<span class="hljs-number">2</span>, ...;<br></code></pre></td></tr></table></figure><hr><h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">desc</span> 视图名;<br><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> myv3;（cmd中结果比较全）<br></code></pre></td></tr></table></figure><hr><h2 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、更新语法：<span class="hljs-keyword">update</span> 视图名 <span class="hljs-keyword">set</span> 列=值 <span class="hljs-keyword">where</span> 筛选语句;<br><span class="hljs-number">2</span>、插入语法：<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 视图名[(字段名)] <span class="hljs-keyword">values</span>();<br><span class="hljs-number">3</span>、删除语法：<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 视图名 <span class="hljs-keyword">where</span> 筛选语句;<br><br>注意：通过以上语句对视图修改，也会修改原表，所以一般会给视图增加只读权限<br><br>具备以下特点的视图不允许更新：<br><span class="hljs-number">1</span>、包含以下关键字的<span class="hljs-keyword">sql</span>语句：分组函数、<span class="hljs-keyword">distinct</span>、<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>、<span class="hljs-keyword">having</span>、unio或者<span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-number">2</span>、常量视图<br><span class="hljs-number">3</span>、<span class="hljs-keyword">Select</span>中包含子查询<br><span class="hljs-number">4</span>、<span class="hljs-keyword">join</span><br><span class="hljs-number">5</span>、<span class="hljs-keyword">from</span>一个不能更新的视图<br><span class="hljs-number">6</span>、<span class="hljs-keyword">where</span>子句的子查询引用了<span class="hljs-keyword">from</span>子句中的表<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql事务</title>
      <link href="/2020/06/12/Mysql%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80/"/>
      <url>/2020/06/12/Mysql%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#事务的含义">事务的含义</a></li><li><a href="#事务的特性acid">事务的特性（ACID）</a></li><li><a href="#事务的隔离级别">事务的隔离级别</a></li><li><a href="#事务的创建">事务的创建</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="事务的含义"><a href="#事务的含义" class="headerlink" title="事务的含义"></a>事务的含义</h2><p>&#8195;&#8195;一个或一组语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</p><hr><h2 id="事务的特性（ACID）"><a href="#事务的特性（ACID）" class="headerlink" title="事务的特性（ACID）"></a>事务的特性（ACID）</h2><ol><li>原子性：指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性：事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</li><li>隔离性：事务的隔离性是指一个事务的执行不能被其它事务干扰，即一个事务内部的操作及使用的数据对并发的其它事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性：持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其它操作和数据库故障不应该对其有任何影响。</li></ol><hr><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><ol><li>read uncommitted：出现脏读、不可重复读、幻读。</li><li>read committed：避免出现脏读，无法避免不可重复读和幻读。</li><li>repeatable read：避免出现脏读和不可重复读，但是无法避免幻读。</li><li>serializable：全部避免。</li></ol><p>&#8195;&#8195;对于同时运行的多个事务, 当这些事务访问数据库中<code>相同的数据</code>时，如果没有采取必要的隔离机制, 就会导致各种并发问题：</p><ol><li>脏读：对于两个事务T1，T2。<code>T1读取了已经被T2更新但还没有被提交的字段</code>。之后，若T2回滚，T1读取的内容就是临时且无效的。</li><li>不可重复读：对于两个事务T1，T2。<code>T1读取了一个字段，然后T2更新了该字段</code>。之后，T1再次读取同一个字段，值就不同了。</li><li>幻读：对于两个事务T1，T2。<code>T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行</code>。之后，如果T1再次读取同一个表，就会多出几行。</li></ol><p>&#8195;&#8195; Mysql支持4种事务隔离级别。Mysql默认的事务隔离级别为: <font color="red">REPEATABLE READ</font>。Oracle支持的2种事务隔离级别：READ COMMITED，SERIALIZABLE。Oracle默认的事务隔离级别为: <font color="red">READ COMMITED</font>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看隔离级别：</span><br>mysql8.0中：<br><span class="hljs-keyword">select</span> @@transaction_isolation;<br>mysql5.6中：<br><span class="hljs-keyword">select</span> @@tx_isolation;<br><br><span class="hljs-comment">-- 设置隔离级别：</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">session</span>|<span class="hljs-keyword">global</span> transacton <span class="hljs-keyword">isolation</span> <span class="hljs-keyword">level</span> 隔离级别;<br></code></pre></td></tr></table></figure><hr><h2 id="事务的创建"><a href="#事务的创建" class="headerlink" title="事务的创建"></a>事务的创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 隐式事务：事务没有明显的开启和结束的标记</span><br><span class="hljs-comment">-- 比如insert、update、delete语句</span><br><br><span class="hljs-comment">-- 显示事务：事务具有明显的开启和结束标记</span><br><span class="hljs-comment">-- 前提：必须先设置自动提交功能为禁用</span><br>语法：<br><span class="hljs-keyword">SET</span> AUTOCOMMIT = <span class="hljs-number">0</span>; 仅对此次操作有效，下次还需要手动关闭<br><br><span class="hljs-keyword">START</span> <span class="hljs-keyword">TRANSACTION</span>; 事务开启语句，可写可不写<br><br>编写事务中的sql语句(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">DELETE</span>);<br>语句1;<br>语句2;<br>...<br><br><span class="hljs-keyword">STOP</span> <span class="hljs-keyword">TRANSACTION</span>; 事务结束<br><span class="hljs-keyword">COMMIT</span>; 若无异常，提交事务<br><span class="hljs-keyword">ROLLBACK</span>; 若发生异常，回滚事务<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%autocommit%'</span>; <span class="hljs-comment"># 查看自动提交功能状态</span><br><br><span class="hljs-comment">-- 创建事务的演示：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-keyword">account</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">account</span>(<br><span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT,<br>username <span class="hljs-built_in">VARCHAR</span>( <span class="hljs-number">20</span> ),<br>balance <span class="hljs-keyword">DOUBLE</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">account</span> ( username, balance )<br><span class="hljs-keyword">VALUES</span><br>( <span class="hljs-string">'张无忌'</span>, <span class="hljs-number">1000</span> ),<br>( <span class="hljs-string">'赵敏'</span>, <span class="hljs-number">1000</span> );<br><br><br><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">SET</span> AUTOCOMMIT = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">START</span> <span class="hljs-keyword">TRANSACTION</span>;<br><br><span class="hljs-comment">-- 编写一组事务的语句</span><br><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">account</span> <span class="hljs-keyword">SET</span> balance = <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> username = <span class="hljs-string">'张无忌'</span>;<br><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">account</span> <span class="hljs-keyword">SET</span> balance = <span class="hljs-number">1500</span> <span class="hljs-keyword">WHERE</span> username = <span class="hljs-string">'赵敏'</span>;<br><br><span class="hljs-comment">-- 结束事务（要么提交，要么回滚）</span><br><span class="hljs-keyword">COMMIT</span>;<br><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">account</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql标识列</title>
      <link href="/2020/06/11/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(%E6%A0%87%E8%AF%86%E5%88%97)/"/>
      <url>/2020/06/11/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(%E6%A0%87%E8%AF%86%E5%88%97)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a></li><li><a href="#创建表时设置标识列">创建表时设置标识列</a></li><li><a href="#修改表时设置标识列">修改表时设置标识列</a></li><li><a href="#修改表时删除标识列">修改表时删除标识列</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">标识列又称为自增长列<br>含义：可以不用手动的插入值，系统提供默认的序列值<br><br>特点：<br><span class="hljs-number">1</span>、标识列必须和主键搭配吗？<br>不一定，但是要求为一个key<br><span class="hljs-number">2</span>、一个表中可以有多个标识列吗？<br>至多一个标识列<br><span class="hljs-number">3</span>、标识列的类型<br>只能是数值型<br><span class="hljs-number">4</span>、标识列可以通过SET <span class="hljs-built_in">auto</span>_increment_increment = <span class="hljs-number">3</span>设置步长<br>可以通过手动插入值，设置起始<br></code></pre></td></tr></table></figure><hr><h2 id="创建表时设置标识列"><a href="#创建表时设置标识列" class="headerlink" title="创建表时设置标识列"></a>创建表时设置标识列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> tab_identity;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tab_identity ( <br><span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT, <span class="hljs-comment"># 创建标识列</span><br><span class="hljs-keyword">NAME</span> <span class="hljs-built_in">VARCHAR</span> ( <span class="hljs-number">20</span> ) <br>);<br><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> tab_identity;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_identity <span class="hljs-keyword">VALUES</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">'john'</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_identity;<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%auto_increment%'</span>; <span class="hljs-comment"># 查看自增长步长和偏移量（有些版本不支持）</span><br><br><span class="hljs-keyword">SET</span> auto_increment_increment = <span class="hljs-number">3</span>; <span class="hljs-comment"># 设置自增长步长为3</span><br></code></pre></td></tr></table></figure><hr><h2 id="修改表时设置标识列"><a href="#修改表时设置标识列" class="headerlink" title="修改表时设置标识列"></a>修改表时设置标识列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tab_identity <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT;<br></code></pre></td></tr></table></figure><hr><h2 id="修改表时删除标识列"><a href="#修改表时删除标识列" class="headerlink" title="修改表时删除标识列"></a>修改表时删除标识列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tab_identity <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span>;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql常见的数据类型</title>
      <link href="/2020/06/09/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B)/"/>
      <url>/2020/06/09/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#常见的数据类型">常见的数据类型</a></li><li><a href="#整型">整型</a></li><li><a href="#小数">小数</a></li><li><a href="#字符型">字符型</a><ul><li><a href="#较短的文本">较短的文本</a></li><li><a href="#较长的文本">较长的文本</a></li><li><a href="#其他">其他</a></li></ul></li><li><a href="#日期型">日期型</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">数值型：<br>        整数<br>        小数：<br>                定点数<br>                浮点数<br><br>字符型：<br>        比较短的文本：<span class="hljs-type">char</span>、<span class="hljs-type">varchar</span><br>        比较长的文本：<span class="hljs-type">text</span>、blob(较长的二进制数)<br><br>日期型<br></code></pre></td></tr></table></figure><hr><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">分类：<br>tinyint, smallint, mediumint, int/integer, bigint<br>1        2         3          4            8<br><br>特点：<br>1、如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsigned关键字。<br>2、如果插入的数值超出了整型的范围，会报Out of range，并且有些版本数据库会插入临界值，有些版本不会。<br>3、如果不设置长度，会有默认长度，长度代表的是显示的最大宽度。如果数字过小可以使用zerofill关键字，这样不够的位数会在左边填充0，但注意使用了该关键字之后默认为无符号型。<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tab_int(<br>t1 <span class="hljs-built_in">INT</span>(<span class="hljs-number">7</span>) ZEROFILL,<br>t2 <span class="hljs-built_in">INT</span>(<span class="hljs-number">7</span>) ZEROFILL<br>);<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_int <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-123456</span>, <span class="hljs-number">-123456</span>);  <span class="hljs-comment"># 报错，使用了ZEROFILL关键字，默认为无符号型</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_int <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2147483648</span>, <span class="hljs-number">4294967296</span>);  <span class="hljs-comment"># 报错，超出7位</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_int <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">123</span>, <span class="hljs-number">123</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_int;  <span class="hljs-comment"># 0000123  0000123</span><br></code></pre></td></tr></table></figure><hr><h2 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分类：</span><br><span class="hljs-comment">1、浮点型</span><br><span class="hljs-comment">float(M,D)</span><br><span class="hljs-comment">double(M,D)</span><br><span class="hljs-comment">2、定点型</span><br><span class="hljs-comment">dec(M,D)</span><br><span class="hljs-comment">decimal(M,D)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">特点：</span><br><span class="hljs-comment">1、M和D</span><br><span class="hljs-comment">M：整数部位+小数部位的有效数字为M</span><br><span class="hljs-comment">D：小数部位的有效数字（超出会四舍五入）</span><br><span class="hljs-comment">如果超过，有些版本数据库会插入临界值，有些版本不会</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、M和D都可以省略</span><br><span class="hljs-comment">如果是decimal，则M默认为10，D默认为0</span><br><span class="hljs-comment">如果是float和double，则会根据插入的数值的精度来决定精度</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3、定点型的精度较高，如果要求插入数值精度较高，如货币运算等则考虑用定点型</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> tab_float;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tab_float(<br>f1 <span class="hljs-built_in">FLOAT</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>f2 <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>f3 <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<br>);<br><br>DESC tab_float;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_float <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">123.45</span>, <span class="hljs-number">123.45</span>, <span class="hljs-number">123.45</span>);  <span class="hljs-comment"># 123.45  123.45  123.45</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_float <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">123.456</span>, <span class="hljs-number">123.456</span>, <span class="hljs-number">123.456</span>);  <span class="hljs-comment"># 123.46  123.46  123.46</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_float <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">123.4</span>, <span class="hljs-number">123.4</span>, <span class="hljs-number">123.4</span>);  <span class="hljs-comment"># 123.40  123.40  123.40</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_float <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1523.4</span>, <span class="hljs-number">1523.4</span>, <span class="hljs-number">1523.4</span>);  <span class="hljs-comment"># 报错</span><br></code></pre></td></tr></table></figure><hr><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><h3 id="较短的文本"><a href="#较短的文本" class="headerlink" title="较短的文本"></a>较短的文本</h3><ul><li>char（固定长度的字符）</li><li>varchar（可变长度的字符）</li></ul><table><thead><tr><th align="center">类型</th><th align="center">写法</th><th align="center">M的意思</th><th align="center">特点</th><th align="center">空间消耗</th><th align="center">效率</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">char(M)</td><td align="center">最大字符数（默认为1可省略）</td><td align="center">固定长度的字符</td><td align="center">比较消耗</td><td align="center">高</td></tr><tr><td align="center">vachar</td><td align="center">varchar(M)</td><td align="center">最大字符数（不可省略）</td><td align="center">可变长度的字符</td><td align="center">比较节省</td><td align="center">低</td></tr></tbody></table><h3 id="较长的文本"><a href="#较长的文本" class="headerlink" title="较长的文本"></a>较长的文本</h3><ul><li>text</li><li>blob（较大的二进制数）</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>binary和varbinary用于保存较短的二进制</li><li>enum用于保存枚举</li><li>set用于保存集合</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 枚举型（一次只能插入列表中的一个元素）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tab_char(<br>c1 ENUM(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_char <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'a'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_char <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'b'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_char <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'c'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_char <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'d'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_char <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'A'</span>); <span class="hljs-comment"># 不区分大小写</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_char;<br><br><br><span class="hljs-comment">-- set型（一次能插入列表中的多个元素）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tab_set(<br>s1 <span class="hljs-keyword">SET</span>(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_set <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'a'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_set <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'A,B'</span>); <span class="hljs-comment"># 不区分大小写</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_set <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'a,c,d'</span>);<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_set;<br></code></pre></td></tr></table></figure><hr><h2 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分类：</span><br><span class="hljs-comment">date 只保存日期</span><br><span class="hljs-comment">time 只保存时间</span><br><span class="hljs-comment">year 只保存年</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">datetime 保存日期+时间</span><br><span class="hljs-comment">timestamp 保存日期+时间</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">特点：</span><br><span class="hljs-comment">                    字节             范围     时区的影响</span><br><span class="hljs-comment">datetime81000-9999 不受</span><br><span class="hljs-comment">timestam 41970-2038  受</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span> tab_date(<br>T1 DATETIME,<br>T2 <span class="hljs-built_in">TIMESTAMP</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_date <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NOW</span>(), <span class="hljs-keyword">NOW</span>());<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> tab_date;<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'time_zone'</span>; <span class="hljs-comment"># 查看时区</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">time_zone</span> = <span class="hljs-string">'+9:00'</span>;  <span class="hljs-comment"># 更改时区为东九区</span><br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql定义语言(create、alter、drop)</title>
      <link href="/2020/06/08/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(create%E3%80%81alter%E3%80%81drop)/"/>
      <url>/2020/06/08/Mysql%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80(create%E3%80%81alter%E3%80%81drop)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a></li><li><a href="#库的管理">库的管理</a></li><li><a href="#表的管理">表的管理</a><ul><li><a href="#表的创建">表的创建</a></li><li><a href="#表的修改">表的修改</a></li><li><a href="#表的删除">表的删除</a></li><li><a href="#表的复制">表的复制</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>创建：create</li><li>修改：alter</li><li>删除：drop</li></ul><hr><h2 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1、库的创建</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">语法:</span><br><span class="hljs-comment">creat database [if not exists] 库名;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 案例：创建库books</span><br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> books;<br><br><span class="hljs-comment">-- 方式二（增加容错）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> books;<br><br><br><span class="hljs-comment">-- 2、库的修改</span><br><span class="hljs-comment">-- 修改库名</span><br><span class="hljs-comment">-- 以前的写法，现在不建议（会导致数据的丢失，可以直接关闭mysql服务，然后去data文件夹改）：</span><br><span class="hljs-comment">-- RENAME DATABASE books TO 新库名;</span><br><br><span class="hljs-comment">-- 更改库的字符集</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> books <span class="hljs-built_in">CHARACTER</span> <br><span class="hljs-keyword">SET</span> gbk;<br><br><br><span class="hljs-comment">-- 3、库的删除</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> books;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> books;<br></code></pre></td></tr></table></figure><hr><h2 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h2><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">create table 表名(</span><br><span class="hljs-comment">列名 列的类型[（长度）约束],</span><br><span class="hljs-comment">列名 列的类型[（长度）约束],</span><br><span class="hljs-comment">列名 列的类型[（长度）约束],</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">列名 列的类型[（长度）约束]</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">-- 案例：创建表book</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] book(<br>            <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>, <span class="hljs-comment"># 编号</span><br>            b_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>), <span class="hljs-comment"># 图书名</span><br>            price <span class="hljs-keyword">DOUBLE</span>, <span class="hljs-comment"># 价格</span><br>            authorId <span class="hljs-built_in">INT</span>,  <span class="hljs-comment"># 作者Id</span><br>            publishDate DATETIME <span class="hljs-comment"># 出版日期</span><br><br>);<br><br>DESC book;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> author(<br>            <span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span>,<br>            au_name <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>),<br>            nation <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br><br>DESC author;<br></code></pre></td></tr></table></figure><hr><h3 id="表的修改"><a href="#表的修改" class="headerlink" title="表的修改"></a>表的修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">alter table 表名 [change|modify|add|drop|rename to] column 列名 列类型 约束</span><br><span class="hljs-comment">修改列名</span><br><span class="hljs-comment">修改列的类型或约束</span><br><span class="hljs-comment">添加新列</span><br><span class="hljs-comment">删除列</span><br><span class="hljs-comment">修改表名</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book <span class="hljs-keyword">CHANGE</span> <span class="hljs-keyword">COLUMN</span> publishDate pubDate DATETIME; <span class="hljs-comment"># 修改列名</span><br>DESC book;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book <span class="hljs-keyword">MODIFY</span> <span class="hljs-keyword">COLUMN</span> pubDate <span class="hljs-built_in">TIMESTAMP</span>; <span class="hljs-comment"># 修改pubDate列的类型为时间戳</span><br>DESC book;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> annual <span class="hljs-keyword">DOUBLE</span>; <span class="hljs-comment"># 添加新的列</span><br>DESC author;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> annual; <span class="hljs-comment"># 列的删除</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> annual;<br>DESC author;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TO</span> book_author; <span class="hljs-comment"># 修改表名</span><br>DESC book_author;<br></code></pre></td></tr></table></figure><hr><h3 id="表的删除"><a href="#表的删除" class="headerlink" title="表的删除"></a>表的删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 通用写法：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> 旧库名;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> 新库名;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> 旧表名;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> 新表名;<br><br><span class="hljs-comment">-- 举例：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> book_author;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> book_author;<br></code></pre></td></tr></table></figure><hr><h3 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book_author <br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'村上村树'</span>, <span class="hljs-string">'日本'</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">'莫言'</span>, <span class="hljs-string">'中国'</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">'冯唐'</span>, <span class="hljs-string">'中国'</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">'金庸'</span>, <span class="hljs-string">'中国'</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> book_author;<br><br><span class="hljs-comment">-- 仅仅复制表的结构</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> copy <span class="hljs-keyword">LIKE</span> book_author;<br><br><span class="hljs-comment">-- 复制表的结构+数据</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> copy2 <br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> book_author;<br><br><span class="hljs-comment">-- 复制表的结构+部分数据</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> copy3 <br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, au_name <br><span class="hljs-keyword">FROM</span> book_author <br><span class="hljs-keyword">WHERE</span> nation = <span class="hljs-string">'中国'</span>;<br><br><span class="hljs-comment">-- 复制表的部分结构（where条件判断为false即可，即不选中任何数据）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> copy4 <br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, au_name<br><span class="hljs-keyword">FROM</span> book_author<br><span class="hljs-keyword">WHERE</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql操作语言(insert、update、delete)</title>
      <link href="/2020/06/07/Mysql%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/"/>
      <url>/2020/06/07/Mysql%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a></li><li><a href="#插入语言">插入语言</a><ul><li><a href="#方式一">方式一</a></li><li><a href="#方式二">方式二</a></li><li><a href="#两种方式的差异">两种方式的差异</a></li></ul></li><li><a href="#修改语句">修改语句</a></li><li><a href="#删除语句">删除语句</a><ul><li><a href="#方式一-1">方式一</a></li><li><a href="#方式二-1">方式二</a></li><li><a href="#两种方式的差异面试题">两种方式的差异（面试题）</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>插入：insert</li><li>修改：update</li><li>删除：delete、truncat</li></ul><hr><h2 id="插入语言"><a href="#插入语言" class="headerlink" title="插入语言"></a>插入语言</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">insert into 表名(列名, ...) values(值,...)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">-- 1、插入的值的类型要与列的类型一致或者兼容</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty ( <span class="hljs-keyword">id</span>, <span class="hljs-string">`name`</span>, sex, borndate, phone, photo, boyfriend_id )<br><span class="hljs-keyword">VALUES</span><br>( <span class="hljs-number">13</span>, <span class="hljs-string">'唐艺昕'</span>, <span class="hljs-string">'女'</span>, <span class="hljs-string">'1990-4-23'</span>, <span class="hljs-string">'18999999999'</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span> );<br><br><br><span class="hljs-comment">-- 2、不可以为null值的列必须插入值。可以为null值的列如何插入值？</span><br><span class="hljs-comment">-- 方式一</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty ( <span class="hljs-keyword">id</span>, <span class="hljs-string">`name`</span>, sex, borndate, phone, photo, boyfriend_id )<br><span class="hljs-keyword">VALUES</span><br>( <span class="hljs-number">13</span>, <span class="hljs-string">'唐艺昕'</span>, <span class="hljs-string">'女'</span>, <span class="hljs-string">'1990-4-23'</span>, <span class="hljs-string">'18999999999'</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span> );<br><br><span class="hljs-comment">-- 方式二</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty ( <span class="hljs-keyword">id</span>, <span class="hljs-string">`name`</span>, phone )<br><span class="hljs-keyword">VALUES</span><br>( <span class="hljs-number">14</span>, <span class="hljs-string">'娜扎'</span>, <span class="hljs-string">'1389999999'</span> );<br><br><br><span class="hljs-comment">-- 3、列的顺序是否可以调换</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty ( <span class="hljs-string">`name`</span>, sex, <span class="hljs-keyword">id</span>, phone )<br><span class="hljs-keyword">VALUES</span><br>( <span class="hljs-string">'蒋欣'</span>, <span class="hljs-string">'女'</span>, <span class="hljs-number">16</span>, <span class="hljs-number">110</span> );<br><br><br><span class="hljs-comment">-- 4、列数和值的个数必须一致</span><br><br><br><span class="hljs-comment">-- 5、可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty<br><span class="hljs-keyword">VALUES</span><br>( <span class="hljs-number">18</span>, <span class="hljs-string">'张飞'</span>, <span class="hljs-string">'男'</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'119'</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> );<br></code></pre></td></tr></table></figure><hr><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">insert into 表名</span><br><span class="hljs-comment">set 列名=值, 列名=值, ...</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty <br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">id</span> = <span class="hljs-number">19</span>,<br><span class="hljs-string">`name`</span> = <span class="hljs-string">'刘涛'</span>,<br>phone = <span class="hljs-string">'999'</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="两种方式的差异"><a href="#两种方式的差异" class="headerlink" title="两种方式的差异"></a>两种方式的差异</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1、方式一支持插入多行，方式二不支持</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty<br><span class="hljs-keyword">VALUES</span><br>( <span class="hljs-number">23</span>, <span class="hljs-string">'唐艺昕1'</span>, <span class="hljs-string">'女'</span>, <span class="hljs-string">'1990-4-23'</span>, <span class="hljs-string">'18999999999'</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span> ),<br>( <span class="hljs-number">24</span>, <span class="hljs-string">'唐艺昕2'</span>, <span class="hljs-string">'女'</span>, <span class="hljs-string">'1990-4-23'</span>, <span class="hljs-string">'18999999999'</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span> ),<br>( <span class="hljs-number">25</span>, <span class="hljs-string">'唐艺昕3'</span>, <span class="hljs-string">'女'</span>, <span class="hljs-string">'1990-4-23'</span>, <span class="hljs-string">'18999999999'</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span> );<br><br><br><span class="hljs-comment">-- 2、方式一支持子查询，方式二不支持</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty ( <span class="hljs-keyword">id</span>, <span class="hljs-string">`name`</span>, phone ) <br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">26</span>, <span class="hljs-string">'宋茜'</span>, <span class="hljs-string">'118'</span>;<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty(<span class="hljs-keyword">id</span>, <span class="hljs-string">`name`</span>, phone)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, boyName, <span class="hljs-string">'1234567'</span><br><span class="hljs-keyword">FROM</span> boys <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> &lt; <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、修改单表的记录（重要）</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">update 表名</span><br><span class="hljs-comment">set 列=新值, 新值, ...</span><br><span class="hljs-comment">where 筛选条件;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、修改多表的记录（补充）</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">sql92语法： </span><br><span class="hljs-comment">update 表1 别名, 表2 别名</span><br><span class="hljs-comment">set 列=值, ...</span><br><span class="hljs-comment">where 连接条件</span><br><span class="hljs-comment">and 筛选条件;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sql99语法：</span><br><span class="hljs-comment">update 表1 别名</span><br><span class="hljs-comment">inner|left|right join 表2, 别名</span><br><span class="hljs-comment">on 连接条件</span><br><span class="hljs-comment">set 列=值, ...</span><br><span class="hljs-comment">where 筛选条件;</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">-- 1、修改单表的记录</span><br><span class="hljs-comment">-- 案例1：修改beauty表中姓唐的女神电话为1389988899</span><br><br><span class="hljs-keyword">UPDATE</span> beauty <br><span class="hljs-keyword">SET</span> phone = <span class="hljs-string">'1389988899'</span> <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-string">`name`</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'唐%'</span>;<br><br><br>案例2：修改boys表中id号为2的姓名为张飞，魅力值为10<br><span class="hljs-keyword">UPDATE</span> boys <br><span class="hljs-keyword">SET</span> boyName = <span class="hljs-string">'张飞'</span>,<br>userCP = <span class="hljs-number">10</span> <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">id</span> = <span class="hljs-number">2</span>;<br><br><br><span class="hljs-comment">-- 2、修改多表的记录</span><br><span class="hljs-comment">-- 案例一：修改张无忌的女朋友的手机号为144</span><br><span class="hljs-keyword">UPDATE</span> boys <span class="hljs-keyword">AS</span> bo<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> beauty <span class="hljs-keyword">AS</span> b <span class="hljs-keyword">ON</span> b.boyfriend_id = bo.id <br><span class="hljs-keyword">SET</span> b.phone = <span class="hljs-string">'144'</span> <br><span class="hljs-keyword">WHERE</span><br>bo.boyName = <span class="hljs-string">'张无忌'</span>;<br><br><br><span class="hljs-comment">-- 案例二：修改没有男朋友的女神的男朋友编号都为2</span><br><span class="hljs-keyword">UPDATE</span> beauty <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> boys <span class="hljs-keyword">AS</span> bo <span class="hljs-keyword">ON</span> b.boyfriend_id = bo.id <br><span class="hljs-keyword">SET</span> b.boyfriend_id = <span class="hljs-number">2</span> <br><span class="hljs-keyword">WHERE</span><br>bo.id <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h2><h3 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">方式一：delete （删除满足条件的全部行）</span><br><span class="hljs-comment">语法：</span><br><span class="hljs-comment">1、单表的删除（重要）</span><br><span class="hljs-comment">delete from 表名 where 筛选条件;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、多表的删除</span><br><span class="hljs-comment">sql92语法：</span><br><span class="hljs-comment">delete 表1(别名), 表2(别名)</span><br><span class="hljs-comment">from 表1 别名, 表2 别名</span><br><span class="hljs-comment">where 连接条件</span><br><span class="hljs-comment">and 筛选条件;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sql99语法：</span><br><span class="hljs-comment">delete 表1(别名), 表2(别名)</span><br><span class="hljs-comment">from 表1 别名 inner|left|right join 表2 别名 on 连接条件</span><br><span class="hljs-comment">where 筛选条件</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">-- 1、单表的删除</span><br><span class="hljs-comment">-- 案例1：删除手机号以9结尾的女生信息</span><br><span class="hljs-keyword">DELETE</span> <br><span class="hljs-keyword">FROM</span><br>beauty <br><span class="hljs-keyword">WHERE</span><br>phone <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%9'</span>;<br><br><br><span class="hljs-comment">-- 2、多表删除</span><br><span class="hljs-comment">-- 案例1：删除张无忌的女朋友的信息</span><br><span class="hljs-keyword">DELETE</span> b<br><span class="hljs-keyword">FROM</span><br>beauty <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> boys <span class="hljs-keyword">AS</span> bo <span class="hljs-keyword">ON</span> bo.id = b.boyfriend_id <br><span class="hljs-keyword">WHERE</span><br>bo.boyName = <span class="hljs-string">'张无忌'</span>;<br><br><br><span class="hljs-comment">-- 案例2：散出黄晓明的信息以及他女朋友的信息</span><br><span class="hljs-keyword">DELETE</span> b,<br>bo <br><span class="hljs-keyword">FROM</span><br>beauty <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> boys <span class="hljs-keyword">AS</span> bo <span class="hljs-keyword">ON</span> b.boyfriend_id = bo.id <br><span class="hljs-keyword">WHERE</span><br>bo.boyName = <span class="hljs-string">'黄晓明'</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- truncate（不能与where连用，使用会删除整张表）</span><br>语法：<span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></table></figure><hr><h3 id="两种方式的差异（面试题）"><a href="#两种方式的差异（面试题）" class="headerlink" title="两种方式的差异（面试题）"></a>两种方式的差异（面试题）</h3><ol><li>delete可以添加where条件，trunncat不行。</li><li>truncat删除，效率要高。</li><li><font color="red">假如要删除表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始，而truncat删除后，再插入数据，自增长列的值从1开始</font>。</li><li>truncat删除没有返回值（不返回几行受影响），delete删除有返回值。</li><li>truncat删除不能回滚，delete删除可以回滚。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql联合查询</title>
      <link href="/2020/04/19/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/19/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#联合查询">联合查询</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-class"><span class="hljs-keyword">union</span> 联合 合并：将多条查询语句的结果合并成一个结果</span><br><br>语法：<br>查询语句<span class="hljs-number">1</span><br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br>查询语句<span class="hljs-number">2</span><br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br>...<br><br>应用场景：<br>要查询的结果来自多个表，且多个表没有直接的连接关系，但查询的信息一致时<br><br>特点：<br><span class="hljs-number">1</span>、要求多条查询语句的查询列数是一致<br><span class="hljs-number">2</span>、要求多条查询语句每一列的类型和顺序一致<br><span class="hljs-number">3</span>、<span class="hljs-class"><span class="hljs-keyword">union</span>关键字默认是去重的，如果使用<span class="hljs-title">union</span> <span class="hljs-title">all</span>可以包含重复项</span><br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 引入案例：查询部门编号&gt;90或邮箱包含a的员工信息</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> email <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%a%'</span> <span class="hljs-keyword">OR</span> department_id &gt; <span class="hljs-number">90</span>;<br><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> email <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'%a%'</span><br><span class="hljs-keyword">UNION</span> <br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id  &gt; <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分页查询</title>
      <link href="/2020/04/19/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/19/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#分页查询">分页查询</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><hr><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>&#8195;&#8195;应用场景：当要显示的数据，一页显示不全，需要分页提交sql请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法：<br>select 查询列表<br>from 表<br>[join type join 表2<br>on 连接条件<br>group by 分组字段<br>having 分组后的筛选<br>order by 排序的字段]<br>limit offets, size;<br><br>offest:要显示的目的起始索引（起始索引从0开始，注意在其它情况下索引从1开始）<br>size：要显示的条目个数<br><br>特点：<br>1、limit语句放在查询语句的最后<br>2、公式：要显示的页数page，每页的条目数size<br><br>select 查询列表<br>from 表<br>limit (page - 1) * size, size;<br><br>size&#x3D;10<br>page每一页开始索引<br>1               0<br>210<br>320<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询前五条员工信息<br>SELECT<br>* <br>FROM<br>employees <br>LIMIT <span class="hljs-number">0</span>,<br><span class="hljs-number">5</span>;<br><br><br>SELECT<br>* <br>FROM<br>employees <br>LIMIT <span class="hljs-number">5</span>;<br><br><br>案例<span class="hljs-number">2</span>：查询第<span class="hljs-number">11</span>条到第<span class="hljs-number">25</span>条<br>SELECT<br>* <br>FROM<br>employees <br>LIMIT <span class="hljs-number">10</span>,<br><span class="hljs-number">15</span>;<br><br><br>-- 案例<span class="hljs-number">3</span>：有奖金的员工信息，并且工资较高的前<span class="hljs-number">10</span>名<br>SELECT<br>* <br>FROM<br>employees <br>WHERE<br>commission_pct IS NOT NULL <br>ORDER BY<br>salary DESC <br>LIMIT <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql子查询</title>
      <link href="/2020/04/14/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%AD%90%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/14/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%AD%90%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#子查询概述">子查询概述</a></li><li><a href="#where或having后面">where或having后面</a><ul><li><a href="#标量子查询">标量子查询</a></li><li><a href="#列子查询多行子查询">列子查询（多行子查询）</a></li><li><a href="#行子查询结果集一行多列或多行多列">行子查询（结果集一行多列或多行多列）</a></li></ul></li><li><a href="#select后面">select后面</a></li><li><a href="#from后面">from后面</a></li><li><a href="#exists后面相关子查询">exists后面（相关子查询）</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="子查询概述"><a href="#子查询概述" class="headerlink" title="子查询概述"></a>子查询概述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">含义：<br><span class="hljs-number">1</span>、出现在其它语句中的select语句，称为子查询或内查询<br><span class="hljs-number">2</span>、外部的查询语句，称为主查询或外查询<br><br>分类：<br>按子查询出现的位置：<br>select后面：<br>仅仅支持标量子查询<br><br><span class="hljs-keyword">from</span>后面：<br>支持表子查询<br><br>where后面或having后面：（重要）<br>标量子查询（重要）<br>列子查询（重要）<br><br>行子查询（用的较少）<br><br>exists后面（相关子查询）：<br>表子查询<br><br>按结果集的行列数不同：<br>标量子查询（结果只有一行一列）<br>列子查询（结果只有一列多行）<br>行子查询（结果集有一行多列）<br>表子查询（结果一般为多行多列）<br></code></pre></td></tr></table></figure><hr><h2 id="where或having后面"><a href="#where或having后面" class="headerlink" title="where或having后面"></a>where或having后面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、标量子查询（单行子查询）<br><span class="hljs-number">2</span>、列子查询（多行子查询）<br><span class="hljs-number">3</span>、行子查询（多列多行）<br><br>特点：<br>    <span class="hljs-number">1</span>、子查询放在小括号内<br>    <span class="hljs-number">2</span>、子查询一般放在条件的右侧<br>    <span class="hljs-number">3</span>、标量子查询，一般搭配单行操作符使用（&gt;, &lt;, &gt;=, &lt;=, &lt;&gt;）<br>    <span class="hljs-number">4</span>、子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果<br><br>列子查询：一般搭配着多行操作符使用（<span class="hljs-keyword">in</span>, any/some, all）<br>*/<br></code></pre></td></tr></table></figure><hr><h3 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：谁的工资比Abel高？<br>-- 第一步：查询Abel的工资<br>SELECT salary<br>FROM employees <br>WHERE last_name = <span class="hljs-string">'Abel'</span>;<br><br>-- 第二步：查询员工的信息，满足salary&gt;第一步的结果<br>SELECT<br>* <br>FROM<br>employees <br>WHERE<br>salary &gt; ( SELECT salary FROM employees WHERE last_name = <span class="hljs-string">'Abel'</span> );<br><br><br>-- 案例<span class="hljs-number">2</span>：返回job_id与<span class="hljs-number">141</span>号员工相同，salary比<span class="hljs-number">143</span>号员工多的员工的姓名，job_id和工资<br>SELECT<br>last_name AS <span class="hljs-string">'姓名'</span>,<br>job_id,<br>salary AS <span class="hljs-string">'工资'</span> <br>FROM<br>employees <br>WHERE<br>job_id = ( SELECT job_id FROM employees WHERE employee_id = <span class="hljs-number">141</span> ) <br>AND salary &gt; ( SELECT salary FROM employees WHERE employee_id = <span class="hljs-number">143</span> );<br><br><br>-- 案例<span class="hljs-number">3</span>：返回公司工资最少的员工的last_name, job_id和salary<br>SELECT<br>last_name,<br>job_id,<br>salary <br>FROM<br>employees <br>WHERE<br>salary = ( SELECT MIN( salary ) FROM employees );<br><br><br>-- 案例<span class="hljs-number">4</span>：查询最低工资大于<span class="hljs-number">50</span>号部门最低工资的部门id和其最低工资<br>-- 第一步：查询<span class="hljs-number">50</span>号部门的最低工资<br>SELECT MIN(salary)<br>FROM employees<br>WHERE department_id = <span class="hljs-number">50</span>;<br><br>-- 第二步：查询所有部门的最低工资<br>SELECT MIN(salary)<br>FROM employees<br>GROUP BY department_id;<br><br>-- 第三步：在第二步结果的基础上，筛选满足条件min(salary) &gt; 第一步的结果<br>SELECT<br>department_id,<br>MIN( salary ) <br>FROM<br>employees <br>GROUP BY<br>department_id <br>HAVING<br>MIN( salary ) &gt; ( SELECT MIN( salary ) FROM employees WHERE department_id = <span class="hljs-number">50</span> );<br></code></pre></td></tr></table></figure><hr><h3 id="列子查询（多行子查询）"><a href="#列子查询（多行子查询）" class="headerlink" title="列子查询（多行子查询）"></a>列子查询（多行子查询）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：返回location_id是<span class="hljs-number">1400</span>或<span class="hljs-number">1700</span>的部门中的所有员工姓名<br>-- 第一步：查询location_id是<span class="hljs-number">1400</span>或<span class="hljs-number">1700</span>的部门编号<br>SELECT DISTINCT<br>department_id <br>FROM<br>departments <br>WHERE<br>location_id IN ( <span class="hljs-number">1400</span>, <span class="hljs-number">1700</span> );<br><br>-- 第二步：在第一步的基础上，筛选符合的部门编号<br>SELECT<br>last_name <br>FROM<br>employees <br>WHERE<br>department_id IN (<br>SELECT DISTINCT<br>department_id <br>FROM<br>departments <br>WHERE<br>location_id IN ( <span class="hljs-number">1400</span>, <span class="hljs-number">1700</span> ));<br><br><br>SELECT<br>last_name <br>FROM<br>employees <br>WHERE<br>department_id = ANY(<br>SELECT DISTINCT<br>department_id <br>FROM<br>departments <br>WHERE<br>location_id IN ( <span class="hljs-number">1400</span>, <span class="hljs-number">1700</span> ));<br><br><br>-- 案例<span class="hljs-number">2</span>：返回其它部门中比job_id为IT_PROG部门任一工资低的员工的员工号、姓名、job_id以及salary<br>-- 第一步<br>SELECT DISTINCT<br>salary <br>FROM<br>employees <br>WHERE<br>job_id = <span class="hljs-string">'IT_PROG'</span>;<br><br>-- 第二步<br>-- 方法一：<br>SELECT<br>employee_id,<br>last_name,<br>job_id,<br>salary <br>FROM<br>employees <br>WHERE<br>job_id &lt;&gt; <span class="hljs-string">'IT_PROG'</span> <br>AND salary &lt; ANY ( SELECT DISTINCT salary FROM employees WHERE job_id = <span class="hljs-string">'IT_PROG'</span> );<br><br><br>-- 方法二：<br>SELECT<br>employee_id,<br>last_name,<br>job_id,<br>salary <br>FROM<br>employees <br>WHERE<br>job_id &lt;&gt; <span class="hljs-string">'IT_PROG'</span> <br>AND salary &lt; ( SELECT MAX(salary) FROM employees WHERE job_id = <span class="hljs-string">'IT_PROG'</span> );<br><br><br>-- 案例<span class="hljs-number">3</span>：返回其它部门中比job_id为IT_PROG部门所有工资都低的员工的员工号、姓名、job_id以及salary<br>SELECT<br>employee_id,<br>last_name,<br>job_id,<br>salary <br>FROM<br>employees <br>WHERE<br>job_id &lt;&gt; <span class="hljs-string">'IT_PROG'</span> <br>AND salary &lt; ALL ( SELECT DISTINCT salary FROM employees WHERE job_id = <span class="hljs-string">'IT_PROG'</span> );<br><br><br>SELECT<br>employee_id,<br>last_name,<br>job_id,<br>salary <br>FROM<br>employees <br>WHERE<br>job_id &lt;&gt; <span class="hljs-string">'IT_PROG'</span> <br>AND salary &lt; ( SELECT MIN(salary) FROM employees WHERE job_id = <span class="hljs-string">'IT_PROG'</span> );<br></code></pre></td></tr></table></figure><hr><h3 id="行子查询（结果集一行多列或多行多列）"><a href="#行子查询（结果集一行多列或多行多列）" class="headerlink" title="行子查询（结果集一行多列或多行多列）"></a>行子查询（结果集一行多列或多行多列）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询员工编号最小并且工资最高的员工信息<br>-- 第一步：<br>SELECT<br>MIN( employee_id ) <br>FROM<br>employees;<br><br>-- 第二步：<br>SELECT<br>MAX( salary ) <br>FROM<br>employees;<br><br>-- 第三步：<br>-- 方法一：<br>SELECT<br>* <br>FROM<br>employees <br>WHERE<br>employee_id = ( SELECT MIN( employee_id ) FROM employees ) <br>AND salary = ( SELECT MAX( salary ) FROM employees );<br><br>-- 方法二（行子查询）：<br>SELECT<br>* <br>FROM<br>employees <br>WHERE<br>( employee_id, salary ) = ( SELECT MIN( employee_id ), MAX( salary ) FROM employees );<br></code></pre></td></tr></table></figure><hr><h2 id="select后面"><a href="#select后面" class="headerlink" title="select后面"></a>select后面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>仅仅支持标量子查询<br>*/<br><br>-- 案例<span class="hljs-number">1</span>：查询每个部门的员工个数<br>SELECT<br>d.*,<br>( SELECT COUNT(*) FROM employees AS e WHERE d.`department_id` = e.`department_id` ) <br>FROM<br>departments AS d;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询员工号=<span class="hljs-number">102</span>的部门名<br>SELECT<br>department_name <br>FROM<br>departments AS d<br>LEFT JOIN employees AS e ON d.`department_id` = e.`department_id` <br>WHERE<br>employee_id = <span class="hljs-number">102</span>;<br><br><br>SELECT<br>( SELECT department_name FROM departments AS d INNER JOIN employees AS e ON d.`department_id` = e.`department_id` WHERE employee_id = <span class="hljs-number">102</span> );<br><br><br>SELECT<br>department_name <br>FROM<br>departments <br>WHERE<br>department_id = ( SELECT department_id FROM employees WHERE employee_id = <span class="hljs-number">102</span> );<br></code></pre></td></tr></table></figure><hr><h2 id="from后面"><a href="#from后面" class="headerlink" title="from后面"></a>from后面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>仅仅支持表查询<br>将子查询充当一张表，要求必须起别名<br>*/<br><br>-- 案例<span class="hljs-number">1</span>：查询每个部门的平均工资的工资等级<br>SELECT<br>ROUND( AVG( salary ), <span class="hljs-number">2</span> ),<br>department_id <br>FROM<br>employees <br>GROUP BY<br>department_id;<br><br>SELECT<br>ag_dep.*,<br>g.grade_level <br>FROM<br>( SELECT ROUND( AVG( salary ), <span class="hljs-number">2</span> ) AS ag, department_id FROM employees GROUP BY department_id ) AS ag_dep<br>INNER JOIN job_grades AS g ON ag_dep.`ag` BETWEEN lowest_sal <br>AND highest_sal;<br></code></pre></td></tr></table></figure><hr><h2 id="exists后面（相关子查询）"><a href="#exists后面（相关子查询）" class="headerlink" title="exists后面（相关子查询）"></a>exists后面（相关子查询）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>exists(完整的查询语句)<br>结果：<br><span class="hljs-number">0</span>或<span class="hljs-number">1</span><br>*/<br><br>-- 案例<span class="hljs-number">1</span>：查询有员工的部门名<br>-- 方法一：<br>SELECT<br>department_name<br>FROM<br>departments<br>WHERE<br>department_id IN ( SELECT department_id FROM employees );<br><br>-- 方法二：<br>SELECT<br>department_name <br>FROM<br>departments AS d <br>WHERE<br>EXISTS ( SELECT * FROM employees AS e WHERE d.`department_id` = e.`department_id` );<br><br><br>-- 案例<span class="hljs-number">2</span>：查询没有女朋友的男神信息<br>-- 方法一：<br>SELECT<br>bo.* <br>FROM<br>boys AS bo <br>WHERE<br>bo.`id` NOT IN ( SELECT boyfriend_id FROM beauty );<br><br><br>-- 方法二：<br>SELECT<br>bo.* <br>FROM<br>boys AS bo <br>WHERE<br>NOT EXISTS ( SELECT boyfriend_id FROM beauty AS b WHERE bo.`id` = b.`boyfriend_id`);<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 练习<span class="hljs-number">1</span>：查询和Zlotkey相同部门的员工姓名和工资 <br>SELECT<br>department_id <br>FROM<br>employees <br>WHERE<br>last_name = <span class="hljs-string">'Zlotkey'</span>;<br><br><br>SELECT<br>last_name,<br>salary <br>FROM<br>employees <br>WHERE<br>department_id = ( SELECT department_id FROM employees WHERE last_name = <span class="hljs-string">'Zlotkey'</span> );<br><br><br>-- 练习<span class="hljs-number">2</span>：查询工资比公司平均工资高的员工的员工号，姓名和工资<br>SELECT <br>employee_id, last_name, salary<br>FROM <br>employees<br>WHERE <br>salary &gt; (SELECT ROUND(AVG(salary), <span class="hljs-number">2</span>) FROM employees);<br><br><br>-- 练习<span class="hljs-number">3</span>：查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资 <br>SELECT<br>ROUND( AVG( salary ), <span class="hljs-number">2</span> ), department_id<br>FROM<br>employees <br>GROUP BY<br>department_id;<br><br><br>SELECT<br>employee_id,<br>last_name,<br>salary,<br>e.department_id<br>FROM<br>employees AS e<br>INNER JOIN ( SELECT ROUND( AVG( salary ), <span class="hljs-number">2</span> ) AS ag, department_id FROM employees GROUP BY department_id ) AS avg_sa ON e.`department_id` = avg_sa.`department_id`<br>WHERE salary &gt; avg_sa.ag;<br><br><br>-- 练习<span class="hljs-number">4</span>：查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名<br>SELECT DISTINCT<br>department_id <br>FROM<br>employees <br>WHERE<br>last_name LIKE <span class="hljs-string">'%u%'</span>;<br><br><br>SELECT<br>employee_id,<br>last_name,<br>department_id <br>FROM<br>employees <br>WHERE<br>department_id IN ( SELECT DISTINCT department_id FROM employees WHERE last_name LIKE <span class="hljs-string">'%u%'</span> );<br><br><br>-- 练习<span class="hljs-number">5</span>：查询在部门的location_id为<span class="hljs-number">1700</span>的部门工作的员工的员工号<br>SELECT<br>employee_id <br>FROM<br>employees AS e<br>INNER JOIN departments AS d ON e.`department_id` = d.`department_id` <br>WHERE<br>location_id = <span class="hljs-number">1700</span>;<br><br><br>SELECT<br>employee_id <br>FROM<br>employees <br>WHERE<br>department_id = ANY ( SELECT DISTINCT department_id FROM departments WHERE location_id = <span class="hljs-number">1700</span> );<br><br><br>-- 练习<span class="hljs-number">6</span>：查询管理者是K_ing的员工姓名和工资<br>-- 方法一：自连接<br>SELECT<br>e.last_name,<br>e.salary <br>FROM<br>employees AS e<br>INNER JOIN employees AS m ON e.`manager_id` = m.`employee_id` <br>WHERE<br>m.last_name = <span class="hljs-string">'K_ing'</span>;<br><br><br>-- 方法二：列子查询<br>SELECT<br>last_name,<br>salary <br>FROM<br>employees <br>WHERE<br>manager_id IN ( SELECT employee_id FROM employees WHERE last_name = <span class="hljs-string">'K_ing'</span> );<br><br><br>-- 练习<span class="hljs-number">7</span>：查询工资最高的员工的姓名，要求first_name和last_name显示为一列，列名为姓.名 <br>SELECT<br>CONCAT( first_name, <span class="hljs-string">'.'</span>, last_name ) AS <span class="hljs-string">'姓.名'</span> <br>FROM<br>employees <br>WHERE<br>salary = ( SELECT MAX( salary ) FROM employees );<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql连接查询</title>
      <link href="/2020/04/13/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/13/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#连接查询概述">连接查询概述</a></li><li><a href="#sql92标准">sql92标准</a><ul><li><a href="#等值连接">等值连接</a></li><li><a href="#非等值连接">非等值连接</a></li><li><a href="#自连接">自连接</a></li><li><a href="#练习">练习</a></li></ul></li><li><a href="#sql99标准">sql99标准</a><ul><li><a href="#sql99语法">sql99语法</a></li><li><a href="#内连接">内连接</a><ul><li><a href="#等值连接-1">等值连接</a></li><li><a href="#非等值连接-1">非等值连接</a></li><li><a href="#自连接-1">自连接</a></li></ul></li><li><a href="#外连接">外连接</a><ul><li><a href="#左外连接">左外连接</a></li><li><a href="#右外连接">右外连接</a></li><li><a href="#全外mysql不支持">全外（mysql不支持）</a></li><li><a href="#交叉连接笛卡尔乘积">交叉连接（笛卡尔乘积）</a></li><li><a href="#练习-1">练习</a></li></ul></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="连接查询概述"><a href="#连接查询概述" class="headerlink" title="连接查询概述"></a>连接查询概述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>含义：又称为多表查询，当查询的字段来自于多个表，就会用到连接查询<br><br>笛卡尔乘积现象：表<span class="hljs-number">1</span>有m行，表<span class="hljs-number">2</span>有n行，结果有m*n行<br>出现原因：没有添加有效的连接条件<br>解决办法：添加有效的连接条件<br><br><br>分类：<br>按年代分类：<br>            sql92标准：仅仅支持内连接<br>            sql99标准（推荐）：支持内连接+外连接（左外和右外）+交叉连接<br>    按功能分类：<br>            内连接：<br>                    等值连接<br>                    非等值连接<br>                    自连接<br>            外连接：    <br>                左外连接<br>                右外连接<br>                全外连接<br>                交叉连接<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="sql92标准"><a href="#sql92标准" class="headerlink" title="sql92标准"></a>sql92标准</h2><h3 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br><span class="hljs-number">1</span>、多表等值连接的结果为多表的交集部分<br><span class="hljs-number">2</span>、n表连接，至少需要n<span class="hljs-number">-1</span>个连接条件<br><span class="hljs-number">3</span>、多表的顺序没有要求<br><span class="hljs-number">4</span>、一般需要为表起别名<br><span class="hljs-number">5</span>、可以搭配前面介绍的所有字句使用，比如排序、分组、筛选<br>*/<br><br>-- 案例<span class="hljs-number">1</span>：查询女神名和对应的男神名<br>SELECT <br>    name, boyName<br>FROM<br>    beauty,<br>    boys<br>WHERE<br>    beauty.boyfriend_id = boys.id;<br>    <br>    <br>-- 案例<span class="hljs-number">2</span>：查询员工名和对应的部门名<br>SELECT <br>    last_name AS <span class="hljs-string">'员工名'</span>, department_name AS <span class="hljs-string">'部门名'</span><br>FROM<br>    departments,<br>    employees<br>WHERE<br>    departments.department_id = employees.department_id;<br>    <br><br>/*<br>为表起别名:<br>提高语句简洁度<br>            区分多个重名的字段<br>            <br>注意：如果为表起了别名，则查询的字段就不能用原来的表名去限定<br>*/<br>-- 案例<span class="hljs-number">3</span>：查询员工名、工种号、工种名<br>SELECT <br>    last_name AS <span class="hljs-string">'员工名'</span>,<br>    e.job_id AS <span class="hljs-string">'工种号'</span>,<br>    job_title AS <span class="hljs-string">'工种名'</span><br>FROM<br>    employees AS e,<br>    jobs AS j<br>WHERE<br>    e.job_id = j.job_id;<br><br><br>-- 增加筛选条件<br>-- 案例<span class="hljs-number">4</span>：查询有奖金的员工名、部门名<br>SELECT <br>    last_name AS <span class="hljs-string">'员工名'</span>, department_name AS <span class="hljs-string">'部门名'</span><br>FROM<br>    employees AS e,<br>    departments AS d<br>WHERE<br>    e.department_id = d.department_id<br>        AND e.commission_pct IS NOT NULL;<br><br><br>-- 案例<span class="hljs-number">5</span>：查询城市中第二个字符为o的部门名和城市名<br>SELECT <br>    department_name AS <span class="hljs-string">'部门名'</span>, city AS <span class="hljs-string">'城市名'</span><br>FROM<br>    departments AS d,<br>    locations AS l<br>WHERE<br>    d.`location_id` = l.`location_id`<br>        AND l.`city` LIKE <span class="hljs-string">'_o%'</span>;<br><br><br>-- 增加分组条件<br>-- 案例<span class="hljs-number">6</span>：查询每个城市的部门个数<br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'部门个数'</span>, city AS <span class="hljs-string">'城市'</span><br>FROM<br>    departments AS d,<br>    locations AS l<br>WHERE<br>    d.`location_id` = l.`location_id`<br>GROUP BY l.`city`;<br><br><br>-- 案例<span class="hljs-number">7</span>：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资<br>SELECT <br>    d.`manager_id` AS <span class="hljs-string">'领导编号'</span>,<br>    MIN(salary) AS <span class="hljs-string">'最低工资'</span>,<br>    department_name AS <span class="hljs-string">'部门名'</span><br>FROM<br>    employees AS e,<br>    departments AS d<br>WHERE<br>    e.`department_id` = d.`department_id`<br>        AND commission_pct IS NOT NULL<br>GROUP BY department_name;<br><br><br>-- 增加排序<br>-- 案例<span class="hljs-number">8</span>：查询每个工种的工种名和员工的个数，并且按员工的个数降序<br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'员工个数'</span>, job_title AS <span class="hljs-string">'工种名'</span><br>FROM<br>    employees AS e,<br>    jobs AS j<br>WHERE<br>    e.`job_id` = j.`job_id`<br>GROUP BY 工种名<br>ORDER BY 员工个数 DESC;<br><br><br>-- 三表连接<br>-- 案例<span class="hljs-number">9</span>：查询员工名、部门名和所在的城市<br>SELECT <br>    last_name AS <span class="hljs-string">'员工名'</span>,<br>    department_name AS <span class="hljs-string">'部门名'</span>,<br>    city AS <span class="hljs-string">'城市'</span><br>FROM<br>    employees AS e,<br>    departments AS d,<br>    locations AS l<br>WHERE<br>    e.`department_id` = d.`department_id`<br>        AND d.`location_id` = l.`location_id`;<br></code></pre></td></tr></table></figure><hr><h3 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询员工的工资和工资级别<br>SELECT <br>    salary AS <span class="hljs-string">'工资'</span>, grade_level AS <span class="hljs-string">'工资级别'</span><br>FROM<br>    employees AS e,<br>    job_grades AS g<br>WHERE<br>    e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`;<br></code></pre></td></tr></table></figure><hr><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询员工名和上级的名称<br><br>SELECT <br>    e.employee_id AS <span class="hljs-string">'员工编号'</span>,<br>    e.last_name AS <span class="hljs-string">'员工名'</span>,<br>    m.employee_id AS <span class="hljs-string">'领导编号'</span>,<br>    m.last_name AS <span class="hljs-string">'领导名称'</span><br>FROM<br>    employees AS e,<br>    employees AS m<br>WHERE<br>    e.`manager_id` = m.`employee_id`;<br></code></pre></td></tr></table></figure><hr><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python">USE myemployees;<br><br>SELECT<br>MAX(salary) AS <span class="hljs-string">'最大工资'</span>,<br>ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span><br>FROM<br>employees;<br><br><br>SELECT<br>employee_id,<br>job_id,<br>last_name<br>FROM<br>employees<br>ORDER BY<br>department_id DESC,<br>salary ASC;<br><br><br>SELECT<br>job_id<br>FROM<br>employees<br>WHERE<br>job_id LIKE <span class="hljs-string">'%a%e%'</span>;<br><br><br>SELECT<br>last_name AS <span class="hljs-string">'姓名'</span>,<br>e.department_id AS <span class="hljs-string">'部门编号'</span>,<br>department_name AS <span class="hljs-string">'部门名称'</span> <br>FROM<br>employees AS e,<br>departments AS d <br>WHERE<br>e.`department_id` = d.`department_id`;<br><br><br>SELECT<br>job_id,<br>location_id <br>FROM<br>employees AS e,<br>departments AS d <br>WHERE<br>e.`department_id` = d.`department_id` <br>AND e.`department_id` = <span class="hljs-number">90</span>;<br><br><br>SELECT<br>last_name,<br>department_name,<br>d.location_id,<br>city <br>FROM<br>employees AS e,<br>departments AS d,<br>locations AS l <br>WHERE<br>e.`department_id` = d.`department_id` <br>AND d.`location_id` = l.`location_id` <br>AND e.`commission_pct` IS NOT NULL;<br><br><br>SELECT<br>last_name,<br>job_id,<br>e.department_id,<br>department_name <br>FROM<br>employees AS e,<br>departments AS d,<br>locations AS l <br>WHERE<br>e.`department_id` = d.`department_id` <br>AND d.`location_id` = l.`location_id` <br>AND city = <span class="hljs-string">'Toronto'</span>;<br><br><br>SELECT<br>department_name AS <span class="hljs-string">'部门名'</span>,<br>job_title AS <span class="hljs-string">'工种名'</span>,<br>MIN( salary ) AS <span class="hljs-string">'最低工资'</span> <br>FROM<br>employees AS e,<br>jobs AS j,<br>departments AS d <br>WHERE<br>e.`job_id` = j.`job_id` <br>AND e.`department_id` = d.`department_id` <br>GROUP BY<br>工种名,<br>部门名;<br><br><br>SELECT<br>COUNT(*) AS <span class="hljs-string">'部门个数'</span>,<br>country_id AS <span class="hljs-string">'国家编号'</span> <br>FROM<br>departments AS d,<br>locations AS l <br>WHERE<br>d.`location_id` = l.`location_id` <br>GROUP BY<br>国家编号 <br>HAVING<br>COUNT(*) &gt; <span class="hljs-number">2</span>;<br><br><br>SELECT<br>e.last_name AS <span class="hljs-string">'员工姓名'</span>,<br>e.employee_id AS <span class="hljs-string">'员工编号'</span>,<br>m.last_name AS <span class="hljs-string">'管理者姓名'</span>,<br>m.employee_id AS <span class="hljs-string">'管理者编号'</span> <br>FROM<br>employees AS e,<br>employees AS m <br>WHERE<br>e.`manager_id` = m.`employee_id` <br>AND e.`employee_id` = <span class="hljs-number">101</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="sql99标准"><a href="#sql99标准" class="headerlink" title="sql99标准"></a>sql99标准</h2><h3 id="sql99语法"><a href="#sql99语法" class="headerlink" title="sql99语法"></a>sql99语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">语法：<br>    select 查询列表<br>    <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> 别名 [连接类型]<br>    join 表<span class="hljs-number">2</span> 别名<br>    on 连接条件<br>    where 筛选条件<br>    [group by 分组]<br>    [having 筛选条件]<br>    [order by 排序列表]<br><br>内连接（重要）：inner<br>外连接<br>    左外（重要）:left [outer]<br>    右外（重要）:right [outer]<br>    全外：full [outer]<br>交叉链接：cross<br></code></pre></td></tr></table></figure><hr><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">语法：<br>    select 查询列表<br>    <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> 别名 inner<br>    join 表<span class="hljs-number">2</span> 别名<br>    on 连接条件<br>    where 筛选条件<br>    [group by 分组]<br>    [having 筛选条件]<br>    [order by 排序列表]<br><br><br>分类：<br>    等值连接<br>    非等值连接<br>    自连接<br><br>特点：<br><span class="hljs-number">1</span>、可以添加排序、分组、筛选<br><span class="hljs-number">2</span>、inner可以省略<br><span class="hljs-number">3</span>、筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读<br><span class="hljs-number">4</span>、inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集<br></code></pre></td></tr></table></figure><hr><h4 id="等值连接-1"><a href="#等值连接-1" class="headerlink" title="等值连接"></a>等值连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询员工名、部门名（调换位置）<br>SELECT<br>department_name AS <span class="hljs-string">'部门名'</span>,<br>last_name AS <span class="hljs-string">'员工名'</span> <br>FROM<br>employees AS e<br>INNER JOIN departments AS d ON e.`department_id` = d.`department_id`;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询部门个数大于<span class="hljs-number">3</span>的城市名和部门个数<br>-- <span class="hljs-number">1</span>、查询每个城市的部门个数<br>-- <span class="hljs-number">2</span>、在<span class="hljs-number">1</span>的结果上筛选满足条件的<br>SELECT<br>city AS 城市名,<br>COUNT(*) AS 部门个数 <br>FROM<br>locations AS l<br>INNER JOIN departments AS d ON l.`location_id` = d.`location_id` <br>GROUP BY<br>city <br>HAVING<br>部门个数 &gt; <span class="hljs-number">3</span>;<br><br><br>-- 案例<span class="hljs-number">3</span>：查询哪个部门的部门员工个数&gt;<span class="hljs-number">3</span>的部门名和员工个数，并按个数降序排列<br>SELECT<br>department_name AS 部门名,<br>COUNT(*) AS 员工个数 <br>FROM<br>employees AS l<br>INNER JOIN departments AS d ON l.`department_id` = d.`department_id` <br>GROUP BY<br>部门名 <br>HAVING<br>员工个数 &gt; <span class="hljs-number">3</span> <br>ORDER BY<br>员工个数 DESC;<br><br><br>-- 案例<span class="hljs-number">5</span>：查询员工名、部门名、工种名，并安部门名降序<br>SELECT<br>last_name AS 员工名,<br>department_name AS 部门名,<br>job_title AS 工种名 <br>FROM<br>employees AS e<br>INNER JOIN departments AS d ON e.`department_id` = d.`department_id`<br>INNER JOIN jobs AS j ON e.`job_id` = j.`job_id` <br>ORDER BY<br>部门名 DESC;<br></code></pre></td></tr></table></figure><hr><h4 id="非等值连接-1"><a href="#非等值连接-1" class="headerlink" title="非等值连接"></a>非等值连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>、查询员工的工资级别<br>SELECT<br>grade_level AS 工资级别 <br>FROM<br>employees AS e<br>INNER JOIN job_grades AS j ON e.`salary` BETWEEN j.`lowest_sal` <br>AND j.`highest_sal`;<br></code></pre></td></tr></table></figure><hr><h4 id="自连接-1"><a href="#自连接-1" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>、查询员工的名字、上级的名字<br>SELECT<br>e.last_name AS 员工名,<br>m.last_name AS 上级名 <br>FROM<br>employees AS e<br>INNER JOIN employees AS m ON e.`manager_id` = m.`employee_id`;<br></code></pre></td></tr></table></figure><hr><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">应用场景：用于查询一个表中有，另一个表中没有的记录<br><br>特点：<br>    <span class="hljs-number">1</span>、外连接的查询结果为主表中所有记录，<br>    如果从表中有和它匹配的，则显示匹配的值，<br>    如果从表中没有和它匹配的，则显示null，<br>    外连接查询结果=内连接结果+主表中有而从表中没有的记录<br><br>    <span class="hljs-number">2</span>、左外连接，left join左边的是主表<br>    右外连接，right join右边的是主表<br>    <br>    <span class="hljs-number">3</span>、左外和右外交换两个表的顺序，可以实现同样的效果<br>    <br>    <span class="hljs-number">4</span>、全外连接=内连接的结果+表<span class="hljs-number">1</span>中有但表<span class="hljs-number">2</span>中没有的+表<span class="hljs-number">2</span>中有但表<span class="hljs-number">1</span>中没有的<br>    <br>    <span class="hljs-number">5</span>、交叉连接，就是“笛卡尔乘积”连接<br></code></pre></td></tr></table></figure><hr><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT<br>b.`name`,<br>bo.* <br>FROM<br>beauty AS b<br>LEFT OUTER JOIN boys AS bo ON b.`boyfriend_id` = bo.`id` <br>WHERE<br>bo.`id` IS NULL;<br></code></pre></td></tr></table></figure><hr><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT<br>b.`name`,<br>bo.* <br>FROM<br>boys AS bo<br>RIGHT OUTER JOIN beauty AS b ON b.`boyfriend_id` = bo.`id` <br>WHERE<br>bo.`id` IS NULL;<br></code></pre></td></tr></table></figure><hr><h4 id="全外（mysql不支持）"><a href="#全外（mysql不支持）" class="headerlink" title="全外（mysql不支持）"></a>全外（mysql不支持）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT<br>b.*,<br>bo.* <br>FROM<br>beauty AS b<br>FULL OUTER JOIN boys AS bo ON b.`boyfriend_id` = bo.`id`;<br></code></pre></td></tr></table></figure><hr><h4 id="交叉连接（笛卡尔乘积）"><a href="#交叉连接（笛卡尔乘积）" class="headerlink" title="交叉连接（笛卡尔乘积）"></a>交叉连接（笛卡尔乘积）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT<br>b.*,<br>bo.* <br>FROM<br>beauty AS b<br>CROSS JOIN boys AS bo;<br></code></pre></td></tr></table></figure><hr><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">-- <span class="hljs-number">1</span>、查询编号&gt;<span class="hljs-number">3</span>的女神的男朋友信息，如果有则列出详细，如果没有，用null填充<br>SELECT<br>b.id, b.`name`, bo.*<br>FROM<br>beauty AS b<br>LEFT JOIN boys AS bo ON bo.`id` = b.`boyfriend_id` <br>WHERE<br>b.`id` &gt; <span class="hljs-number">3</span>;<br><br><br>-- <span class="hljs-number">2</span>、查询哪个城市没有部门<br>SELECT<br>city, d.*<br>FROM<br>locations AS l<br>LEFT JOIN departments AS d ON l.`location_id` = d.`location_id` <br>WHERE<br>d.`department_id` IS NULL;<br><br><br>-- <span class="hljs-number">3</span>、查询部门名为SAL或IT的员工信息<br>SELECT<br>e.*, department_name<br>FROM<br>employees AS e<br>RIGHT JOIN departments AS d ON e.`department_id` = d.`department_id` <br>WHERE<br>d.`department_name` IN ( <span class="hljs-string">'SAL'</span>, <span class="hljs-string">'IT'</span> );<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分组查询</title>
      <link href="/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#分组查询语法">分组查询语法</a></li><li><a href="#简单的分组查询">简单的分组查询</a></li><li><a href="#添加筛选条件">添加筛选条件</a></li><li><a href="#按表达式或函数分组">按表达式或函数分组</a></li><li><a href="#按多个字段进行分组">按多个字段进行分组</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="分组查询语法"><a href="#分组查询语法" class="headerlink" title="分组查询语法"></a>分组查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>select 分组函数, 列(要求出现在group by的后面)<br>    <span class="hljs-keyword">from</span> 表<br>    [where 筛选条件]<br>    group by 分组的列表<br>    [order by 子句]<br>    <br>注意：<br>查询列表必须特殊，要求是分组函数和group by后出现的字段<br>    <br>特点：<br><span class="hljs-number">1</span>、分组查询中的筛选条件分为两类<br>   数据源                       位置                           关键字<br>分组前的筛选        原始表                       group by子句的前面              where<br>    分组后的筛选        分组后的结果集                group by子句的后面              having<br>    <br>    a、分组函数做条件肯定是放在having子句中<br>    b、能用分组前筛选的，优先选用分组前筛选<br>    <span class="hljs-number">2</span>、group by子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开没有顺序要求），表达式或函数（用的较少）<br>    <span class="hljs-number">3</span>、也可以添加排序（排序放在分组查询最后面）<br>*/<br><br>-- 引入：查询每个部门的平均工资<br>SELECT <br>    ROUND(AVG(salary), <span class="hljs-number">2</span>), department_id<br>FROM<br>    employees<br>GROUP BY department_id;<br></code></pre></td></tr></table></figure><hr><h2 id="简单的分组查询"><a href="#简单的分组查询" class="headerlink" title="简单的分组查询"></a>简单的分组查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询每个工种的最高工资<br>SELECT <br>    MAX(salary), job_id<br>FROM<br>    employees<br>GROUP BY job_id;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询每个位置上的部门个数<br>SELECT <br>    COUNT(*), location_id<br>FROM<br>    departments<br>GROUP BY location_id;<br></code></pre></td></tr></table></figure><hr><h2 id="添加筛选条件"><a href="#添加筛选条件" class="headerlink" title="添加筛选条件"></a>添加筛选条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询邮箱中包含a的字符的，每个部门的平均工资<br>SELECT <br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>, department_id<br>FROM<br>    employees<br>WHERE<br>    email LIKE <span class="hljs-string">'%a%'</span><br>GROUP BY department_id;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询有奖金的每个领导手下员工的最高工资<br>SELECT <br>    MAX(salary) AS <span class="hljs-string">'最高工资'</span>, manager_id<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL<br>GROUP BY manager_id;<br><br><br>-- 添加复杂的筛选条件<br>-- 案例<span class="hljs-number">1</span>：查询哪个部门的员工个数&gt;<span class="hljs-number">2</span><br>/*<br>分解：<br><span class="hljs-number">1</span>、查询每个部门的员工数<br>    SELECT <br>    COUNT(*), department_id<br>FROM<br>    employees<br>GROUP BY department_id;<br>    <span class="hljs-number">2</span>、根据<span class="hljs-number">1</span>的结果进行筛选，查询哪个部门的员工个数&gt;<span class="hljs-number">2</span><br>*/<br><br>SELECT <br>    COUNT(*), department_id<br>FROM<br>    employees<br>GROUP BY department_id<br>HAVING COUNT(*) &gt; <span class="hljs-number">2</span>;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询每个工种有奖金的员工的最高工资&gt;<span class="hljs-number">12000</span>的工种编号和最高工资<br>/*<br>分解：<br><span class="hljs-number">1</span>、查询每个工种有奖金的员工的最高工资<br>SELECT <br>MAX(salary) AS <span class="hljs-string">'最高工资'</span>, job_id<br>FROM<br>employees<br>WHERE<br>commission_pct IS NOT NULL<br>GROUP BY job_id; <br><br><span class="hljs-number">2</span>、根据<span class="hljs-number">1</span>的结果继续筛选，最高工资&gt;<span class="hljs-number">12000</span><br>*/<br><br>SELECT <br>    MAX(salary) AS <span class="hljs-string">'最高工资'</span>, job_id<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL<br>GROUP BY job_id<br>HAVING MAX(salary) &gt; <span class="hljs-number">12000</span>;<br><br><br>-- 案例<span class="hljs-number">3</span>：查询领导编号&gt;<span class="hljs-number">102</span>的每个领导手下的最低工资&gt;<span class="hljs-number">5000</span>的领导编号是哪些，以及其最低工资<br>SELECT <br>    MIN(salary) AS <span class="hljs-string">'最低工资'</span>, manager_id<br>FROM<br>    employees<br>WHERE<br>    manager_id &gt; <span class="hljs-number">102</span><br>GROUP BY manager_id<br>HAVING MIN(salary) &gt; <span class="hljs-number">5000</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="按表达式或函数分组"><a href="#按表达式或函数分组" class="headerlink" title="按表达式或函数分组"></a>按表达式或函数分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;<span class="hljs-number">5</span><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'员工个数'</span>, LENGTH(last_name)<br>FROM<br>    employees<br>GROUP BY LENGTH(last_name)<br>HAVING 员工个数 &gt; <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="按多个字段进行分组"><a href="#按多个字段进行分组" class="headerlink" title="按多个字段进行分组"></a>按多个字段进行分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询每个部门每个工种的员工的平均工资<br>-- 分组字段调换顺序没有影响<br>SELECT <br>    ROUND(avg(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>,<br>    department_id,<br>    job_id<br>FROM<br>    employees<br>GROUP BY department_id , job_id;<br><br><br>-- 添加排序<br>-- 案例：查询每个部门每个工种的员工的平均工资并按工资由高到低排序<br>SELECT <br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>, department_id, job_id<br>FROM<br>    employees<br>GROUP BY department_id , job_id<br>ORDER BY 平均工资 DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    MAX(salary) AS <span class="hljs-string">'最大工资'</span>,<br>    MIN(salary) AS <span class="hljs-string">'最小工资'</span>,<br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>,<br>    SUM(salary) AS <span class="hljs-string">'总工资'</span>,<br>    job_id<br>FROM<br>    employees<br>GROUP BY job_id<br>ORDER BY job_id ASC;<br><br><br>SELECT <br>    MAX(salary) - MIN(salary) AS DIFFERENCE<br>FROM<br>    employees;<br><br><br>SELECT <br>    MIN(salary) AS <span class="hljs-string">'最低工资'</span>, manager_id<br>FROM<br>    employees<br>WHERE<br>    manager_id IS NOT NULL<br>GROUP BY manager_id<br>HAVING 最低工资 &gt; <span class="hljs-number">6000</span>;<br><br><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'员工数量'</span>,<br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>,<br>    department_id AS <span class="hljs-string">'部门编号'</span><br>FROM<br>    employees<br>GROUP BY 部门编号<br>ORDER BY 平均工资 DESC;<br><br><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'员工人数'</span>, job_id<br>FROM<br>    employees<br>GROUP BY job_id;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分组函数</title>
      <link href="/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0)/"/>
      <url>/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#分组函数语法">分组函数语法</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="分组函数语法"><a href="#分组函数语法" class="headerlink" title="分组函数语法"></a>分组函数语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>功能：用作统计使用，又称为聚合函数或者统计函数或组函数<br><br>分类：<br>sum 求和、avg 平均值、max 最大值、min 最小值、count 计算个数<br><br>特点：<br><span class="hljs-number">1</span>、sum、avg一般用于处理数值型，max、min、count可以处理任何类型<br><span class="hljs-number">2</span>、以上函数均忽略null值<br><span class="hljs-number">3</span>、可以和distinct函数（去重）搭配使用<br><span class="hljs-number">4</span>、一般使用count(*)用作统计函数<br><span class="hljs-number">5</span>、和分组函数一同查询的字段要求是group by后的字段<br>*/<br><br>-- <span class="hljs-number">1</span>、简单的使用<br>SELECT <br>    SUM(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    AVG(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    MIN(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    MAX(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    COUNT(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    SUM(salary) AS <span class="hljs-string">'和'</span>, ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均'</span><br>FROM<br>    employees;<br>    <br><br>-- <span class="hljs-number">2</span>、和distinct搭配<br>-- 统计有多少种工资<br>SELECT <br>    COUNT(DISTINCT salary)<br>FROM<br>    employees;<br>    <br><br>-- <span class="hljs-number">3</span>、count函数的详细介绍<br>SELECT <br>    COUNT(salary)<br>FROM<br>    employees;<br><br>-- 统计指定表有多少行，只要一行中有一个非null值就认为是一行<br>SELECT <br>    COUNT(*)<br>FROM<br>    employees;<br><br>-- 统计指定表有多少行，将表增添一列<span class="hljs-number">1</span>（某一行中有非null值就为<span class="hljs-number">1</span>），将<span class="hljs-number">1</span>换为其它数也行<br>SELECT <br>    COUNT(<span class="hljs-number">1</span>)<br>FROM<br>    employees;<br><br>-- 效率：<br>/*<br>MYISAM存储引擎下，count(*)效率高<br>INNODB存储引擎下，count(*)和count(<span class="hljs-number">1</span>)的效率差不多，比count(<span class="hljs-string">'字段'</span>)要高一些<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    MAX(salary) AS <span class="hljs-string">'工资最大值'</span>,<br>    MIN(salary) AS <span class="hljs-string">'工资最小值'</span>,<br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'工资平均值'</span>,<br>    SUM(salary) AS <span class="hljs-string">'工资总和'</span><br>FROM<br>    employees;<br>    <br>    <br>SELECT <br>    DATEDIFF(MAX(hiredate), MIN(hiredate)) AS <span class="hljs-string">'DIFFRENCE'</span><br>FROM<br>    employees;<br>    <br><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'个数'</span><br>FROM<br>    employees<br>WHERE<br>    department_id = <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql常见函数</title>
      <link href="/2020/04/11/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0)/"/>
      <url>/2020/04/11/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#常见函数汇总">常见函数汇总</a></li><li><a href="#字符函数">字符函数</a><ul><li><a href="#length获取参数值的字节个数">length（获取参数值的字节个数）</a></li><li><a href="#concat拼接字符串">concat（拼接字符串）</a></li><li><a href="#upper转化为大写lower转化为小写">upper（转化为大写）、lower（转化为小写）</a></li><li><a href="#substrsubstring字符串截取">substr、substring（字符串截取）</a></li><li><a href="#instr返回子串第一次出现的索引如果找不到返回0">instr（返回子串第一次出现的索引，如果找不到返回0）</a></li><li><a href="#trim-去掉前尾相应的字符">trim （去掉前、尾相应的字符）</a></li><li><a href="#lpad用指定的字符实现左填充指定的长度不是字节数">lpad（用指定的字符实现左填充指定的长度（不是字节数））</a></li><li><a href="#rpad用指定的字符实现右填充指定的长度不是字节数">rpad（用指定的字符实现右填充指定的长度（不是字节数））</a></li><li><a href="#replace替换">replace（替换）</a></li></ul></li><li><a href="#数学函数">数学函数</a><ul><li><a href="#round四舍五入">round（四舍五入）</a></li><li><a href="#ceil向上取整返回该参数的最小整数">ceil（向上取整，返回&gt;=该参数的最小整数）</a></li><li><a href="#floor向下取整返回该参数的最大整数">floor（向下取整，返回&lt;=该参数的最大整数）</a></li><li><a href="#truncate截断">truncate（截断）</a></li><li><a href="#mod取余">mod（取余）</a></li></ul></li><li><a href="#日期函数">日期函数</a><ul><li><a href="#now返回当前系统日期时间">now（返回当前系统日期+时间）</a></li><li><a href="#curdate返回当前系统日期不包含时间">curdate（返回当前系统日期，不包含时间）</a></li><li><a href="#curtime返回当前时间不包含日期">curtime（返回当前时间，不包含日期）</a></li><li><a href="#指获取指定的部分年月日小时分钟秒">指获取指定的部分，年、月、日、小时、分钟、秒</a></li><li><a href="#str_to_date将字符通过指定的格式转换为日期">str_to_date（将字符通过指定的格式转换为日期）</a></li><li><a href="#data_format将日期转化为字符">data_format（将日期转化为字符）</a></li></ul></li><li><a href="#其它函数">其它函数</a></li><li><a href="#流程控制函数">流程控制函数</a><ul><li><a href="#if-函数if-else-的效果">if 函数（if else 的效果）</a></li><li><a href="#case函数的使用一switch-case-的效果">case函数的使用一（switch case 的效果）</a></li><li><a href="#case-函数的使用二类似于-多重if">case 函数的使用二（类似于 多重if）</a></li></ul></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="常见函数汇总"><a href="#常见函数汇总" class="headerlink" title="常见函数汇总"></a>常见函数汇总</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>概念：类似于python中的方法，将一组逻辑语句封装在方法体中，对外暴露方法名<br><br>好处：<br><span class="hljs-number">1</span>、隐藏了实现的具体细节<br><span class="hljs-number">2</span>、提高代码的重用性<br><br>调用：<br>SELECT <br>    函数名(实参列表)<br>[FROM<br>    表];<br>    <br>特点：<br><span class="hljs-number">1</span>、叫什么（函数名）<br><span class="hljs-number">2</span>、干什么（函数功能）<br><br>分类：<br><span class="hljs-number">1</span>、单行函数，如：cancat、length、ifnull等<br><span class="hljs-number">2</span>、分组函数（功能做统计使用，又称为统计函数、聚合函数、组函数）<br><br>常见函数：<br>字符函数：<br>        length<br>        concat<br>        substr<br>        instr<br>        trim<br>        upper<br>        lower<br>        lpad<br>        rpad<br>        replace<br>        <br>        数学函数：<br>        round<br>        ceil<br>        floor<br>        truncate<br>        mod<br>        <br>        日期函数：<br>        now<br>        curdate<br>        curtime<br>        year<br>        month<br>        monthname<br>        day<br>        hour<br>        minute<br>        second<br>        str_to_date<br>        date_format<br>datediff<br>        <br>        其它函数：<br>        version<br>        database<br>        user<br>password<br>MD5<br>        <br>        控制函数：<br>        <span class="hljs-keyword">if</span> <br>        case<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><h3 id="length（获取参数值的字节个数）"><a href="#length（获取参数值的字节个数）" class="headerlink" title="length（获取参数值的字节个数）"></a>length（获取参数值的字节个数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">-- length  获取参数值的字节个数<br>SELECT length(<span class="hljs-string">'john'</span>);<br>SELECT length(<span class="hljs-string">'张三丰'</span>);<br><br>-- utf8一个字母占一个字节，一个汉字占<span class="hljs-number">3</span>个字节<br>SHOW VARIABLES LIKE <span class="hljs-string">'%char%'</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="concat（拼接字符串）"><a href="#concat（拼接字符串）" class="headerlink" title="concat（拼接字符串）"></a>concat（拼接字符串）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    CONCAT(last_name, <span class="hljs-string">'_'</span>, first_name) AS <span class="hljs-string">'姓名'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="upper（转化为大写）、lower（转化为小写）"><a href="#upper（转化为大写）、lower（转化为小写）" class="headerlink" title="upper（转化为大写）、lower（转化为小写）"></a>upper（转化为大写）、lower（转化为小写）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT UPPER(<span class="hljs-string">'john'</span>);<br><br>SELECT LOWER(<span class="hljs-string">'joHn'</span>);<br><br>-- 示例：将姓变大写，名变小写，然后拼接<br>SELECT <br>    CONCAT(UPPER(last_name), <span class="hljs-string">'_'</span>, LOWER(first_name)) AS <span class="hljs-string">'姓名'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="substr、substring（字符串截取）"><a href="#substr、substring（字符串截取）" class="headerlink" title="substr、substring（字符串截取）"></a>substr、substring（字符串截取）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">-- mysql中索引从<span class="hljs-number">1</span>开始<br><br>-- 截取从指定索引处后面的所有字符<br>SELECT substr(<span class="hljs-string">'李莫愁爱上了陆展元'</span>, <span class="hljs-number">7</span>) out_put;<br><br>-- 截取从指定索引处指定字符长度的字符<br>SELECT substr(<span class="hljs-string">'李莫愁爱上了陆展元'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) out_put;<br><br>-- 案例：姓名中首字母大写，其它字符小写然后用_拼接，显示出来<br>SELECT <br>    CONCAT(UPPER(SUBSTR(last_name, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),<br>            <span class="hljs-string">'_'</span>,<br>            LOWER(SUBSTR(last_name, <span class="hljs-number">2</span>))) AS <span class="hljs-string">'姓名'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="instr（返回子串第一次出现的索引，如果找不到返回0）"><a href="#instr（返回子串第一次出现的索引，如果找不到返回0）" class="headerlink" title="instr（返回子串第一次出现的索引，如果找不到返回0）"></a>instr（返回子串第一次出现的索引，如果找不到返回0）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    INSTR(<span class="hljs-string">'杨不悔爱上了殷六侠'</span>,<br>            <span class="hljs-string">'殷六侠'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="trim-（去掉前、尾相应的字符）"><a href="#trim-（去掉前、尾相应的字符）" class="headerlink" title="trim （去掉前、尾相应的字符）"></a>trim （去掉前、尾相应的字符）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT LENGTH(TRIM(<span class="hljs-string">'   张翠山    '</span>)) AS out_put;  <span class="hljs-comment"># 默认去掉空格</span><br><br>SELECT TRIM(<span class="hljs-string">'a'</span> FROM <span class="hljs-string">'aaaaaaaaaaaaaaaaaa张aaaaa翠山aaaaaaaaaaaaaa'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="lpad（用指定的字符实现左填充指定的长度（不是字节数））"><a href="#lpad（用指定的字符实现左填充指定的长度（不是字节数））" class="headerlink" title="lpad（用指定的字符实现左填充指定的长度（不是字节数））"></a>lpad（用指定的字符实现左填充指定的长度（不是字节数））</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">-- lpad 用指定的字符实现左填充指定的长度（不是字节数）<br>SELECT LPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'*'</span>) AS out_put;<br><br>-- 如果给定的字符数超过了要求的字符数，就会从右边截断到相应的字符数<br>SELECT LPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'*'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="rpad（用指定的字符实现右填充指定的长度（不是字节数））"><a href="#rpad（用指定的字符实现右填充指定的长度（不是字节数））" class="headerlink" title="rpad（用指定的字符实现右填充指定的长度（不是字节数））"></a>rpad（用指定的字符实现右填充指定的长度（不是字节数））</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">-- rpad 用指定的字符实现右填充指定的长度（不是字节数）<br>SELECT RPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'*'</span>) AS out_put;<br><br>SELECT RPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'*'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="replace（替换）"><a href="#replace（替换）" class="headerlink" title="replace（替换）"></a>replace（替换）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    REPLACE(<span class="hljs-string">'张无忌爱上了周芷若'</span>,<br>        <span class="hljs-string">'周芷若'</span>,<br>        <span class="hljs-string">'赵敏'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><h3 id="round（四舍五入）"><a href="#round（四舍五入）" class="headerlink" title="round（四舍五入）"></a>round（四舍五入）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT ROUND(<span class="hljs-number">1.45</span>);<br><br>SELECT ROUND(- <span class="hljs-number">1.55</span>);<br><br>SELECT ROUND(<span class="hljs-number">1.567</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="ceil（向上取整，返回-gt-该参数的最小整数）"><a href="#ceil（向上取整，返回-gt-该参数的最小整数）" class="headerlink" title="ceil（向上取整，返回&gt;=该参数的最小整数）"></a>ceil（向上取整，返回&gt;=该参数的最小整数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">-- ceil 向上取整，返回&gt;=该参数的最小整数<br>SELECT CEIL(<span class="hljs-number">1.45</span>);<br><br>SELECT CEIL(- <span class="hljs-number">1.65</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="floor（向下取整，返回-lt-该参数的最大整数）"><a href="#floor（向下取整，返回-lt-该参数的最大整数）" class="headerlink" title="floor（向下取整，返回&lt;=该参数的最大整数）"></a>floor（向下取整，返回&lt;=该参数的最大整数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">-- floor 向下取整，返回&lt;=该参数的最大整数<br>SELECT floor(<span class="hljs-number">-9.99</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="truncate（截断）"><a href="#truncate（截断）" class="headerlink" title="truncate（截断）"></a>truncate（截断）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">-- truncate 截断<br>SELECT TRUNCATE(<span class="hljs-number">1.69999</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="mod（取余）"><a href="#mod（取余）" class="headerlink" title="mod（取余）"></a>mod（取余）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">-- mod 取余<br>-- mod(a, b): a-a/b*b<br>SELECT MOD(<span class="hljs-number">-10</span>, <span class="hljs-number">-3</span>);<br><br>SELECT <span class="hljs-number">10</span> % <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id="now（返回当前系统日期-时间）"><a href="#now（返回当前系统日期-时间）" class="headerlink" title="now（返回当前系统日期+时间）"></a>now（返回当前系统日期+时间）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT NOW();<br></code></pre></td></tr></table></figure><hr><h3 id="curdate（返回当前系统日期，不包含时间）"><a href="#curdate（返回当前系统日期，不包含时间）" class="headerlink" title="curdate（返回当前系统日期，不包含时间）"></a>curdate（返回当前系统日期，不包含时间）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT CURDATE();<br></code></pre></td></tr></table></figure><hr><h3 id="curtime（返回当前时间，不包含日期）"><a href="#curtime（返回当前时间，不包含日期）" class="headerlink" title="curtime（返回当前时间，不包含日期）"></a>curtime（返回当前时间，不包含日期）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">-- curtime 返回当前时间，不包含日期<br>SELECT CURTIME();<br></code></pre></td></tr></table></figure><hr><h3 id="指获取指定的部分，年、月、日、小时、分钟、秒"><a href="#指获取指定的部分，年、月、日、小时、分钟、秒" class="headerlink" title="指获取指定的部分，年、月、日、小时、分钟、秒"></a>指获取指定的部分，年、月、日、小时、分钟、秒</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT YEAR(NOW()) AS 年;<br><br>SELECT year(<span class="hljs-string">'1988-1-1'</span>) <span class="hljs-keyword">as</span> 年;<br><br>SELECT <br>    YEAR(hiredate)<br>FROM<br>    employees;<br>    <br><br>SELECT MONTH(NOW()) AS 月;<br>SELECT MONTHNAME(NOW()) AS 月;<br></code></pre></td></tr></table></figure><hr><h3 id="str-to-date（将字符通过指定的格式转换为日期）"><a href="#str-to-date（将字符通过指定的格式转换为日期）" class="headerlink" title="str_to_date（将字符通过指定的格式转换为日期）"></a>str_to_date（将字符通过指定的格式转换为日期）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT STR_TO_DATE(<span class="hljs-string">'1988-3-2'</span>, <span class="hljs-string">'%Y-%c-%d'</span>) AS out_put;<br><br>-- 查询入职信息为<span class="hljs-number">1992</span><span class="hljs-number">-4</span><span class="hljs-number">-3</span>的员工信息<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    hiredate = STR_TO_DATE(<span class="hljs-string">'4-3 1992'</span>, <span class="hljs-string">'%c-%d %Y'</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="data-format（将日期转化为字符）"><a href="#data-format（将日期转化为字符）" class="headerlink" title="data_format（将日期转化为字符）"></a>data_format（将日期转化为字符）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT DATE_FORMAT(NOW(), <span class="hljs-string">'%y年%m月%d日'</span>) AS out_put;<br><br>-- 查询有奖金的员工名和入职日期（xx月/xx日 xx年）<br>SELECT <br>    last_name AS <span class="hljs-string">'员工名'</span>,<br>    DATE_FORMAT(hiredate, <span class="hljs-string">'%m月/%d日 %Y年'</span>) AS <span class="hljs-string">'入职日期'</span><br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL;<br></code></pre></td></tr></table></figure><hr><h2 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT VERSION();<br><br>SELECT DATABASE();<br><br>SELECT USER();<br></code></pre></td></tr></table></figure><hr><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><h3 id="if-函数（if-else-的效果）"><a href="#if-函数（if-else-的效果）" class="headerlink" title="if 函数（if else 的效果）"></a>if 函数（if else 的效果）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT IF(<span class="hljs-number">10</span> &lt; <span class="hljs-number">5</span>, <span class="hljs-string">'大'</span>, <span class="hljs-string">'小'</span>);<br><br>SELECT <br>    last_name,<br>    commission_pct,<br>    IF(commission_pct IS NULL,<br>        <span class="hljs-string">'没奖金'</span>,<br>        <span class="hljs-string">'有奖金'</span>) AS 备注<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="case函数的使用一（switch-case-的效果）"><a href="#case函数的使用一（switch-case-的效果）" class="headerlink" title="case函数的使用一（switch case 的效果）"></a>case函数的使用一（switch case 的效果）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>java中：<br>switch(变量或表达式)&#123;<br>case 常量<span class="hljs-number">1</span>：语句<span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br>...<br>default:语句n; <span class="hljs-keyword">break</span>;<br>&#125;<br><br>mysql中：<br>case 要判断的字段或表达式<br>when 常量<span class="hljs-number">1</span> then 要显示的值<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span>;（如果是值就不用加;，如果是表达式就需要加;）<br>when 常量<span class="hljs-number">2</span> then 要显示的值<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span>;<br>...<br><span class="hljs-keyword">else</span> 要显示的值n或语句n;<br>end<br>*/<br><br>/*案例：查询员工的工资，要求：<br>部门号=<span class="hljs-number">30</span>，显示的工资为<span class="hljs-number">1.1</span>倍<br>部门号=<span class="hljs-number">40</span>，显示的工资为<span class="hljs-number">1.2</span>倍<br>部门号=<span class="hljs-number">50</span>，显示的工资为<span class="hljs-number">1.3</span>倍<br>其他部门，显示的工资为原工资<br>*/<br>SELECT <br>    salary AS <span class="hljs-string">'原始工资'</span>,<br>    department_id,<br>    CASE department_id<br>        WHEN <span class="hljs-number">30</span> THEN salary * <span class="hljs-number">1.1</span><br>        WHEN <span class="hljs-number">40</span> THEN salary * <span class="hljs-number">1.2</span><br>        WHEN <span class="hljs-number">50</span> THEN salary * <span class="hljs-number">1.3</span><br>        ELSE salary<br>    END AS <span class="hljs-string">'新工资'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="case-函数的使用二（类似于-多重if）"><a href="#case-函数的使用二（类似于-多重if）" class="headerlink" title="case 函数的使用二（类似于 多重if）"></a>case 函数的使用二（类似于 多重if）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>case <br>when 条件<span class="hljs-number">1</span> then 要显示的值<span class="hljs-number">1</span>或者语句<span class="hljs-number">1</span>;<br>when 条件<span class="hljs-number">2</span> then 要显示的值<span class="hljs-number">2</span>或者语句<span class="hljs-number">2</span>;<br>...<br><span class="hljs-keyword">else</span> 要显示的值或者语句;<br>end<br>*/<br><br>-- 案例：查询员工的工资的情况<br>/*<br>如果工资&gt;<span class="hljs-number">20000</span>,显示A级别<br>如果工资&gt;<span class="hljs-number">15000</span>,显示B级别<br>如果工资&gt;<span class="hljs-number">10000</span>,显示C级别<br>否则，显示D级别<br>*/<br>SELECT <br>    salary AS <span class="hljs-string">'工资'</span>,<br>    CASE<br>        WHEN salary &gt; <span class="hljs-number">20000</span> THEN <span class="hljs-string">'A'</span><br>        WHEN salary &gt; <span class="hljs-number">15000</span> THEN <span class="hljs-string">'B'</span><br>        WHEN salary &gt; <span class="hljs-number">10000</span> THEN <span class="hljs-string">'C'</span><br>        ELSE <span class="hljs-string">'D'</span><br>    END AS <span class="hljs-string">'工资等级'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT NOW();<br><br>SELECT <br>    employee_id AS <span class="hljs-string">'员工号'</span>,<br>    last_name AS <span class="hljs-string">'姓名'</span>,<br>    salary AS <span class="hljs-string">'工资'</span>,<br>    salary * <span class="hljs-number">1.2</span> AS <span class="hljs-string">'NEW salary'</span><br>FROM<br>    employees;<br><br><br>SELECT <br>    last_name, LENGTH(last_name) AS <span class="hljs-string">'名字的长度'</span><br>FROM<br>    employees<br>ORDER BY SUBSTR(last_name, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) ASC;<br><br><br>SELECT <br>    CONCAT(last_name,<br>            <span class="hljs-string">' earns '</span>,<br>            salary,<br>            <span class="hljs-string">' monthly but wants '</span>,<br>            salary * <span class="hljs-number">3</span>) AS <span class="hljs-string">'dream salary'</span><br>FROM<br>    employees;<br><br><br>SELECT <br>    last_name,<br>    job_id AS <span class="hljs-string">'job'</span>,<br>    CASE job_id<br>        WHEN <span class="hljs-string">'AD_PRES'</span> THEN <span class="hljs-string">'A'</span><br>        WHEN <span class="hljs-string">'ST_MAN'</span> THEN <span class="hljs-string">'B'</span><br>        WHEN <span class="hljs-string">'IT_PROG'</span> THEN <span class="hljs-string">'C'</span><br>        WHEN <span class="hljs-string">'SA_PRE'</span> THEN <span class="hljs-string">'D'</span><br>        WHEN <span class="hljs-string">'ST_CLERK'</span> THEN <span class="hljs-string">'E'</span><br>        ELSE job_id<br>    END AS <span class="hljs-string">'grade'</span><br>FROM<br>    employees<br>WHERE<br>    job_id = <span class="hljs-string">'AD_PRES'</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql排序查询</title>
      <link href="/2020/04/03/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5(%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/03/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5(%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#排序查询语法">排序查询语法</a></li><li><a href="#按表达式排序">按表达式排序</a></li><li><a href="#按别名排序">按别名排序</a></li><li><a href="#按函数排序">按函数排序</a></li><li><a href="#升降混合排序">升降混合排序</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="排序查询语法"><a href="#排序查询语法" class="headerlink" title="排序查询语法"></a>排序查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>SELECT <br>    查询列表<br>FROM<br>    表<br>（WHERE<br>    筛选条件）<br>ORDER BY 排序列表 ASC（升序，可省略） | DESC（降序）<br><br>特点：<br><span class="hljs-number">1</span>、ASC表示升序，DESC表示降序，不写默认表示升序<br><span class="hljs-number">2</span>、ORDER BY子句中可以支持单个字段、多个字段、表达式、函数、别名<br><span class="hljs-number">3</span>、ORDER BY子句一般是放在查询语句的最后面，但是LIMIT子句除外<br>*/<br><br>-- 案例一<br>SELECT <br>    *<br>FROM<br>    employees<br>ORDER BY salary DESC;<br><br><br>SELECT <br>    *<br>FROM<br>    employees<br>ORDER BY salary ASC;<br><br><br>-- 案例二<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    department_id &gt;= <span class="hljs-number">90</span><br>ORDER BY hiredate ASC;<br></code></pre></td></tr></table></figure><hr><h2 id="按表达式排序"><a href="#按表达式排序" class="headerlink" title="按表达式排序"></a>按表达式排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    *, salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + ifnull(commission_pct, <span class="hljs-number">0</span>)) AS <span class="hljs-string">'年薪'</span><br>FROM<br>    employees<br>ORDER BY salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + ifnull(commission_pct, <span class="hljs-number">0</span>)) DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="按别名排序"><a href="#按别名排序" class="headerlink" title="按别名排序"></a>按别名排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    *, salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + ifnull(commission_pct, <span class="hljs-number">0</span>)) AS <span class="hljs-string">'年薪'</span><br>FROM<br>    employees<br>ORDER BY <span class="hljs-string">'年薪'</span> DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="按函数排序"><a href="#按函数排序" class="headerlink" title="按函数排序"></a>按函数排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name, LENGTH(last_name) AS <span class="hljs-string">'字节长度'</span>, salary<br>FROM<br>    employees<br>ORDER BY LENGTH(last_name) ASC;<br></code></pre></td></tr></table></figure><hr><h2 id="升降混合排序"><a href="#升降混合排序" class="headerlink" title="升降混合排序"></a>升降混合排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询员工信息，要求先按工资排序（升序），再按员工编号排序（降序）<br>SELECT <br>    *<br>FROM<br>    employees<br>ORDER BY salary ASC , employee_id DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name,<br>    department_id,<br>    salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + IFNULL(commission_pct, <span class="hljs-number">0</span>)) AS <span class="hljs-string">'年薪'</span><br>FROM<br>    employees<br>ORDER BY <span class="hljs-string">'年薪'</span> DESC , last_name ASC;<br><br>SELECT <br>    last_name, salary<br>FROM<br>    employees<br>WHERE<br>    NOT (salary BETWEEN <span class="hljs-number">8000</span> AND <span class="hljs-number">17000</span>)<br>ORDER BY salary DESC;<br><br>SELECT <br>    *, LENGTH(email)<br>FROM<br>    employees<br>WHERE<br>    email LIKE <span class="hljs-string">'%e%'</span><br>ORDER BY LENGTH(email) DESC , department_id ASC;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础查询</title>
      <link href="/2020/04/02/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/02/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#基础查询语法">基础查询语法</a></li><li><a href="#使用指定的数据库">使用指定的数据库</a></li><li><a href="#查询表中的单个多个字段">查询表中的单个、多个字段</a></li><li><a href="#查询常量值">查询常量值</a></li><li><a href="#查询表达式">查询表达式</a></li><li><a href="#查询函数">查询函数</a></li><li><a href="#给字段取别名">给字段取别名</a></li><li><a href="#去重distinct">去重（distinct）</a></li><li><a href="#号的作用">+号的作用</a></li><li><a href="#连接多个字段concat">连接多个字段（concat）</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="基础查询语法"><a href="#基础查询语法" class="headerlink" title="基础查询语法"></a>基础查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>SELECT <br>    查询列表<br>FROM<br>    表名;<br><br>特点：<br><br><span class="hljs-number">1</span>、查询列表可以是：表中的字段、常量值、表达式、函数<br><span class="hljs-number">2</span>、查询的结果是一个虚拟的表格（类似于python中的视图）<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="使用指定的数据库"><a href="#使用指定的数据库" class="headerlink" title="使用指定的数据库"></a>使用指定的数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">USE myemployees;<br></code></pre></td></tr></table></figure><hr><h2 id="查询表中的单个、多个字段"><a href="#查询表中的单个、多个字段" class="headerlink" title="查询表中的单个、多个字段"></a>查询表中的单个、多个字段</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name<br>FROM<br>    employees;<br><br>-- <span class="hljs-number">2.</span>查询表中的多个字段<br>SELECT <br>    last_name, salary, email<br>FROM<br>    employees;<br><br>-- <span class="hljs-number">3.</span>查询表中所有字段<br>-- 方法一：可以更改查询表的顺序<br>SELECT <br>    employee_id,<br>    first_name,<br>    last_name,<br>    email,<br>    phone_number,<br>    job_id,<br>    salary,<br>    commission_pct,<br>    manager_id,<br>    department_id,<br>    hiredate<br>FROM<br>    employees;<br>    <br>-- 方法二：不可以更改查询表的顺序<br>SELECT <br>    *<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="查询常量值"><a href="#查询常量值" class="headerlink" title="查询常量值"></a>查询常量值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <span class="hljs-number">100</span>;<br>SELECT <span class="hljs-string">'john'</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <span class="hljs-number">100</span> % <span class="hljs-number">98</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT version();<br></code></pre></td></tr></table></figure><hr><h2 id="给字段取别名"><a href="#给字段取别名" class="headerlink" title="给字段取别名"></a>给字段取别名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br><span class="hljs-number">1</span>、便于理解<br><span class="hljs-number">2</span>、如果要查询的字段有重名的情况，使用别名可以区分开来<br>*/<br><br>-- 方式一：使用As <br>SELECT <span class="hljs-number">100</span> % <span class="hljs-number">98</span> AS 结果;<br><br>SELECT <br>    last_name AS 姓, first_name AS 名<br>FROM<br>    employees;<br><br>-- 方式二：使用空格<br>SELECT <br>    last_name 姓, first_name 名<br>FROM<br>    employees;<br><br>-- 案例：查询salary，显示列名的别名为out put（当别名中有空格等特殊字符，则别名需要用引号，否则会报错）<br>SELECT <br>    salary AS <span class="hljs-string">"out put"</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="去重（distinct）"><a href="#去重（distinct）" class="headerlink" title="去重（distinct）"></a>去重（distinct）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询员工表中涉及到的所有的部门编号<br>SELECT DISTINCT<br>    department_id<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="号的作用"><a href="#号的作用" class="headerlink" title="+号的作用"></a>+号的作用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>python中+号：<br><span class="hljs-number">1</span>、运算符，两个操作数都为数值型<br><span class="hljs-number">2</span>、连接符，只要有一个操作数为字符串<br><br>mysql中的+号：<br>仅仅只有一个功能：运算符<br>*/<br><br>-- 两个操作数都为数值型，则做加法运算<br>SELECT <span class="hljs-number">100</span> + <span class="hljs-number">90</span>; <br><br>-- 其中一方为字符型，试图将字符型转换成数值型，如果转换成功，则继续做加法运算<br>SELECT <span class="hljs-string">"123"</span> + <span class="hljs-number">90</span>; <br><br>-- 如果转换失败，则将字符串转换为<span class="hljs-number">0</span><br>SELECT <span class="hljs-string">"john"</span> + <span class="hljs-number">90</span>; <br><br>-- 只要一方为null，结果肯定为null <br>SELECT null + <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="连接多个字段（concat）"><a href="#连接多个字段（concat）" class="headerlink" title="连接多个字段（concat）"></a>连接多个字段（concat）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询员工名和姓连接成一个字段，并显示为 姓名<br>SELECT <br>    CONCAT(last_name, first_name) AS 姓名<br>FROM<br>    employees;<br><br>-- 如果连接的字段中有值为null（ifnull）<br>SELECT <br>    IFNULL(commission_pct, <span class="hljs-number">0</span>) AS 奖金率, <br>    commission_pct<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name, job_id, salary AS sal<br>FROM<br>    employees;<br>    <br>SELECT <br>    employee_id, last_name, salary * <span class="hljs-number">12</span> AS <span class="hljs-string">'ANNUAL SALARY'</span><br>FROM<br>    employees;<br>    <br>DESC departments;<br>SELECT <br>    *<br>FROM<br>    departments;<br>    <br>SELECT DISTINCT<br>    job_id<br>FROM<br>    employees;<br><br>SELECT <br>    CONCAT(employee_id,<br>            <span class="hljs-string">','</span>,<br>            first_name,<br>            <span class="hljs-string">','</span>,<br>            last_name,<br>            <span class="hljs-string">','</span>,<br>            email,<br>            <span class="hljs-string">','</span>,<br>            phone_number,<br>            <span class="hljs-string">','</span>,<br>            IFNULL(commission_pct, <span class="hljs-number">0</span>)) AS OUT_PUT<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql条件查询</title>
      <link href="/2020/04/02/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/02/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#条件查询语法">条件查询语法</a></li><li><a href="#按条件表达式筛选">按条件表达式筛选</a></li><li><a href="#按逻辑表示筛选">按逻辑表示筛选</a></li><li><a href="#模糊查询">模糊查询</a></li><li><a href="#like">like</a></li><li><a href="#between-and">between and</a></li><li><a href="#in">in</a></li><li><a href="#is-nullis-not-null">is null、is not null</a></li><li><a href="#安全等于判断是否等于null或者数值如果等于返回true但可读性很差">安全等于（&lt;=&gt;），判断是否等于null或者数值，如果等于返回true，但可读性很差</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="条件查询语法"><a href="#条件查询语法" class="headerlink" title="条件查询语法"></a>条件查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>SELECT <br>    查询列表<br>FROM<br>    表名<br>WHERE<br>    筛选条件;<br>    <br>分类：<br><span class="hljs-number">1</span>、按条件表达式筛选：条件运算符：&gt; &lt; = （!= &lt;&gt;） &gt;= &lt;=<br><span class="hljs-number">2</span>、按逻辑表达式筛选：逻辑运算符：&amp;&amp; || ！<span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span><br><span class="hljs-number">3</span>、模糊查询：ilke between <span class="hljs-keyword">and</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">is</span> null<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="按条件表达式筛选"><a href="#按条件表达式筛选" class="headerlink" title="按条件表达式筛选"></a>按条件表达式筛选</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询工资&gt;<span class="hljs-number">12000</span>的员工信息<br>SELECT <br>*<br>FROM<br>    employees<br>WHERE<br>    salary &gt; <span class="hljs-number">12000</span>;<br><br>-- 案例<span class="hljs-number">2</span>：查询部门编号不等于<span class="hljs-number">90</span>号的员工名和部门编号<br>SELECT <br>    employee_id, department_id<br>FROM<br>    employees<br>WHERE<br>    department_id != <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="按逻辑表示筛选"><a href="#按逻辑表示筛选" class="headerlink" title="按逻辑表示筛选"></a>按逻辑表示筛选</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询部门编号不是在<span class="hljs-number">90</span>到<span class="hljs-number">110</span>之间，或者工资高于<span class="hljs-number">15000</span>的员工信息<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    NOT (<span class="hljs-number">90</span> &lt;= department_id<br>        AND department_id &lt;= <span class="hljs-number">110</span>)<br>        OR salary &gt; <span class="hljs-number">15000</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>like<br>特点：<br><span class="hljs-number">1</span>、一般和通配符搭配使用。<br>通配符：<br>% 任意多个字符，包含<span class="hljs-number">0</span>个字符<br>        _ 任意单个字符<br><br>between <span class="hljs-keyword">and</span><br>特点：<br><span class="hljs-number">1</span>、提升代码简洁度<br><span class="hljs-number">2</span>、包含临界值<br><span class="hljs-number">3</span>、临界值不要调换顺序<br><br><span class="hljs-keyword">in</span> <br>特点：<br><span class="hljs-number">1</span>、提升语句简洁度<br><span class="hljs-number">2</span>、<span class="hljs-keyword">in</span>列表的值类型必须一致或兼容<br><span class="hljs-number">3</span>、不能使用通用符<br><br><span class="hljs-keyword">is</span> null、<span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> null<br>特点：<br><span class="hljs-number">1</span>、=或者&lt;&gt;不能用于判断null值<br><span class="hljs-number">2</span>、<span class="hljs-keyword">is</span> null或者<span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> null 可以判断null值<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询员工名中包含字符a的员工信息<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'%a%'</span>;<br>    <br>-- 案例<span class="hljs-number">2</span>：查询员工名中第三个字符为e，第五个字符为a的员工名和工资<br>SELECT <br>    last_name, salary<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'__e_a%'</span>;<br><br>-- 案例<span class="hljs-number">3</span>：查询员工名中第二个字符串为_的员工名<br>-- 方法一<br>SELECT <br>    last_name<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'_\_%'</span>;<br><br>-- 方法二<br>-- escape关键词表示后面的符号为转义符<br>SELECT <br>    last_name<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'_$_%'</span> ESCAPE <span class="hljs-string">'$'</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">3</span>：查询员工编号在<span class="hljs-number">100</span>到<span class="hljs-number">120</span>之间的员工信息<br>-- 方法一<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    employee_id &gt;= <span class="hljs-number">100</span><br>        AND employee_id &lt;= <span class="hljs-number">120</span>;<br><br>-- 方法二<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    employee_id BETWEEN <span class="hljs-number">100</span> AND <span class="hljs-number">120</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">4</span>：查询员工的工种编号是IT_PROG、AD_VP、AD_PRES中的一个的员工名和工种编号<br>-- 方法一<br>SELECT <br>    last_name, job_id<br>FROM<br>    employees<br>WHERE<br>    job_id = <span class="hljs-string">'IT_PROG'</span> OR job_id = <span class="hljs-string">'AD_VP'</span><br>        OR job_id = <span class="hljs-string">'AD_PRES'</span>;<br><br>-- 方法二<br>SELECT <br>    last_name, job_id<br>FROM<br>    employees<br>WHERE<br>    job_id IN (<span class="hljs-string">'IT_PROG'</span> , <span class="hljs-string">'AD_VP'</span>, <span class="hljs-string">'AD_PRES'</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="is-null、is-not-null"><a href="#is-null、is-not-null" class="headerlink" title="is null、is not null"></a>is null、is not null</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询没有奖金的员工名和奖金率<br>SELECT <br>    last_name, commission_pct<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NULL;<br>    <br>-- 案例<span class="hljs-number">2</span>：查询有奖金的员工名和奖金率<br>SELECT <br>    last_name, commission_pct<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL;<br></code></pre></td></tr></table></figure><hr><h2 id="安全等于（-lt-gt-），判断是否等于null或者数值，如果等于返回true，但可读性很差"><a href="#安全等于（-lt-gt-），判断是否等于null或者数值，如果等于返回true，但可读性很差" class="headerlink" title="安全等于（&lt;=&gt;），判断是否等于null或者数值，如果等于返回true，但可读性很差"></a>安全等于（&lt;=&gt;），判断是否等于null或者数值，如果等于返回true，但可读性很差</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name, commission_pct<br>FROM<br>    employees<br>WHERE<br>    commission_pct &lt;=&gt; NULL;<br>```    <br>---<br><br><span class="hljs-comment">## 练习</span><br>```python<br>-- 查询员工为<span class="hljs-number">176</span>号的员工的姓名、部门号和年薪<br>SELECT <br>    last_name,<br>    department_id,<br>    salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + IFNULL(commission_pct, <span class="hljs-number">0</span>)) AS 年薪<br>FROM<br>    employees<br>WHERE<br>    employee_id = <span class="hljs-number">176</span>;<br>    <br>-- 选择工资不在<span class="hljs-number">5000</span>到<span class="hljs-number">12000</span>的员工的姓名和工资 <br>SELECT <br>    last_name, salary<br>FROM<br>    employees<br>WHERE<br>    NOT (salary BETWEEN <span class="hljs-number">5000</span> AND <span class="hljs-number">12000</span>);<br>    <br>-- 选择姓名中有字母a和e的员工姓名 <br>SELECT <br>    last_name<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'%a%e%'</span>;<br>    <br>-- 显示出表employees的manager_id是<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span> 的员工姓名、职位 <br>SELECT <br>    last_name, job_id<br>FROM<br>    employees<br>WHERE<br>    manager_id IN (<span class="hljs-number">100</span> , <span class="hljs-number">101</span>, <span class="hljs-number">110</span>);<br><br>-- 查询没有奖金，且工资小于<span class="hljs-number">18000</span>的salary，last_name<br>SELECT <br>    salary, last_name<br>FROM<br>    employees<br>WHERE<br>    salary &lt; <span class="hljs-number">18000</span><br>        AND commission_pct IS NULL;<br> <br><br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    job_id != <span class="hljs-string">'IT'</span> OR salary = <span class="hljs-number">12000</span>;<br>    <br>desc departments;<br><br>SELECT DISTINCT<br>    location_id<br>FROM<br>    departments;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xshell命令大全</title>
      <link href="/2020/03/27/Xsell%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/03/27/Xsell%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#xshell命令大全">Xshell命令大全</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="Xshell命令大全"><a href="#Xshell命令大全" class="headerlink" title="Xshell命令大全"></a>Xshell命令大全</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python">***********************************常用操作*********************************<br>----------------------------------------------------------------------------<br>//文本复制:Ctrl+Insert<br>//文本粘贴:Shift+Insert<br>----------------------------------------------------------------------------<br>//文件复制：<br>cp file1 file1.bak --把文件file1复制为新文件file1.bak<br>cp file1 /home/bin --把file1文件从当前位置复制到/home/bin目录下<br>cp *   /home/bin   --把当前文件下所有文件复制一份到/home/bin目录下<br>----------------------------------------------------------------------------<br>//文件移动<br>mv * /home/bin   --把当前目录下的所有文件移动到/home/bin目录下<br>mv file1 /home/bin --把file1文件从当前位置下移动到/home/bin目录下 <br> <br>//文件重命名<br>mv file1 file2  --把file1名称改为file2<br>----------------------------------------------------------------------------<br>//文件列表<br>ls          --列出当前目录下所有文件名<br>ls -l       --列出当前目录下所有文件的一个长列表<br>ls -la      --列出当前目录下所有文件的一个长列表，包括以句点开头的隐藏文件<br>ls a*       --列出当前目录下以字母a开头的所有文件<br>ls -l *.doc --列出当前目录下以.doc结尾的所有文件<br> <br>find -name *.rpm 在当前目录中查找rpm包<br>----------------------------------------------------------------------------<br>//文件删除：<br>rm file1,file2,...    --删除当前目录文件file1,file2等<br>rm *   --删除当前目录下所有非隐藏文件，不删除目录，除非指定了-r（递归参数）<br>rm -rf /home 删除home目录及它所包含的所有内容<br>rm -r /home 删除home目录，会让你确认是否删除目录下的文件<br>rm -i a* <br>----------------------------------------------------------------------------<br>//文件上传：rz 回车<br>//文件下载：sz file1<br>//提示：如果连接linux虚拟机上，rz命令不起作用，需要安装一个rz和sz的程序：yum install -y lrzsz<br>----------------------------------------------------------------------------<br>//进入文件<br>cd ../  或者  cd /      --进入根目录下<br>cd ..                   --当前目录的上一级目录<br>cd ../..                --切换到上两级目录<br>cd ~                    --切换用户目录，如果是root用户，则切换到/root下<br>cd /home/bin            --进入当前目录的/home/bin目录下<br>----------------------------------------------------------------------------<br>//建立目录<br>mkdir <span class="hljs-number">001</span>  --在当前目录下建立<span class="hljs-number">001</span>目录<br>mkdir -p /<span class="hljs-number">001</span>/<span class="hljs-number">002</span>/<span class="hljs-number">003</span>  --在当前目录下嵌套建立指定目录(要带上当前目录)<br>----------------------------------------------------------------------------<br>//创建文件<br>touch a.html --在当前目录创建一个空的a.html文件<br>----------------------------------------------------------------------------<br>//查看文件内容<br>more file1 --查看file1文件的内容，支持分页显示<br>less file1 --查看file1文件的内容<br>cat file1  --显示file1文件的内容<br>tail -f file1   --查看file1的内容<br>tail <span class="hljs-number">-100</span> file1 --查看file1的后<span class="hljs-number">100</span>行内容<br>----------------------------------------------------------------------------<br>//搜索文件的内容<br>grep aaa /home/bin/file1 --在file1文件中查询包含aaa的所有行<br> <br>----------------------------------------------------------------------------<br>//窗口切换+全屏<br>Alt+<span class="hljs-number">1</span>     --切换窗口<span class="hljs-number">1</span><br>Alt+<span class="hljs-number">2</span>     --切换窗口<span class="hljs-number">2</span><br>Alt+Enter --全屏<br> <br>----------------------------------------------------------------------------<br>//编辑文件<br>vi file1 --编辑file1文件内容<br> <br>esc      --退出vi模式，跳入命令模式<br> <br>:w       --保存，但不退出vi模式<br>:w!      --强保存，但不退出vi模式<br> <br>:wq      --保存，并退出vi<br>:wq!     --强保存，并退出vi<br>:q       --不保存，退出vi<br>:q!      --不保存，强制退出vi<br>:e!      --放弃所有修改，从上次保存文件开始再编辑<br>Ctrl+Z   --将vi暂停（挂起）<br>ctrl+c   --进入命令模式<br>----------------------------------------------------------------------------<br>//查看当前的路径：pwd<br>----------------------------------------------------------------------------<br>//打包文件<br>tar -cvf file1.zip file1   --将file1打包成file1.zip格式，此处可以打包成任意格式，即后缀可以为任意的，.aaa,.bbb,.zip,.tar 等<br>//解包文件<br>tar -xvf file1.zip         --解压包file1.zip,如果当前目录已经有文件了，覆盖原文件，否则正常显示<br> <br> <br><br>*********************************系统命令*******************************<br>man rm  --显示rm命令的使用说明<br>w       --显示登录用户的详细信息，类似于who<br>who     --显示登录用户<br>last    --显示最近登录的用户<br> <br>date    --显示当前时期和时间<br> <br>su      --切换root用户<br>su zy   --切换到zy用户<br> <br>clear   --清屏<br> <br>free    --查看系统内存和Swap分区情况<br> <br>reboot  --重启虚拟机<br>shutdown -r now --停止服务后重启计算机<br>shutdown -h now --停止服务后关闭计算机<br>halt     -关闭计算机<br> <br> <br>tips:如果操作中有特殊的符号，比如()等，记得加\转义一下，如你要删除file1_(<span class="hljs-number">1</span>).html，要写成 rm file1_\(<span class="hljs-number">1</span>\).html<br></code></pre></td></tr></table></figure><blockquote><p>说明：转载自<a href="https://blog.csdn.net/u014074697/article/details/86241642" target="_blank" rel="noopener">博客</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop完全分布式搭建</title>
      <link href="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#准备工作">准备工作</a></li><li><a href="#安装vmwareworkstation-pro和centos-7">安装VMwareWorkstation Pro和CentOS 7</a></li><li><a href="#配置静态ip">配置静态IP</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&#8195;&#8195;下载三个软件：<br></p><ul><li><a href="https://www.vmware.com/" target="_blank" rel="noopener">VMwareWorkstation Pro</a>，软件的版本看自己的需求，我用的是<code>VMwareWorkstation Pro 15</code>，在下载的时候可能要求登录，但是有不登录下载的<a href="https://blog.csdn.net/ITloser_cartridge/article/details/91347452" target="_blank" rel="noopener">方法</a>。<br></li><li><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a>，同样的下什么版本看个人需求，我用的是<code>CentOS-7-x86_64-DVD-1908</code>，官网下载可能下载的很慢，我们可以通过<a href="https://blog.csdn.net/qq_35500685/article/details/92803963?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">阿里云镜像</a>下载。<br></li><li><a href="https://www.netsarang.com/zh/xshell-download/" target="_blank" rel="noopener">XSHELL6</a>。在界面的右栏的<code>家庭和学校用户的免费许可证</code>下点击<code>免费授权页面</code>，注册信息然后便可以收到下载链接（你注册时使用的邮箱）。</li></ul><hr><h2 id="安装VMwareWorkstation-Pro和CentOS-7"><a href="#安装VMwareWorkstation-Pro和CentOS-7" class="headerlink" title="安装VMwareWorkstation Pro和CentOS 7"></a>安装VMwareWorkstation Pro和CentOS 7</h2><p>&#8195;&#8195;这里推荐一个写的非常详细的<a href="https://www.cnblogs.com/double-K/p/10952233.html" target="_blank" rel="noopener">博客</a>，按照该博主的教程，不会出现什么问题。</p><h2 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h2><p>&#8195;&#8195;这里需要注意的是<code>centOS</code>版本不同，配置的方法也有些不同，但是大致过程是一样的。以下是<code>centOS7</code>的静态IP配置方法。<br><br>&#8195;&#8195;按照<a href="https://www.cnblogs.com/double-K/p/10952233.html" target="_blank" rel="noopener">博客</a>的过程安装好虚拟机以后，开启虚拟机（用户名和密码是之前安装的时候所设置的用户名和密码），在桌面右键<code>打开终端</code>，在终端中输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">su root  <span class="hljs-comment"># 如果本身已经是root用户跳过该命令行，否则就要切换为root用户，密码就是之前安装时设置的root密码</span><br>cd /etc/sysconfig/network-scripts/<br>ll<br></code></pre></td></tr></table></figure><p>然后就能看到如下所示：<img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/network-scripts.png" alt="network-scripts"><br>找到你的界面中类似<code>ifcfg- ens32</code>的文件（一般都在前面），然后通过一下命令打开编辑<code>ifcfg- ens32</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">vim ifcfg- ens32 <span class="hljs-comment"># vim 你的文件名</span><br></code></pre></td></tr></table></figure><p>就可以看到：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/ifcfg-ens32.png" alt="ifcfg-ens32"><br>然后在英文输入法下，按<code>i</code>进入编辑模式（按下i之后光标由粗变细），通过<code>上下左右键</code>移动光标，将划红线部分，改为和上图一致，改好以后按下<code>ESC</code>，再输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">:wq  <span class="hljs-comment"># 注意前面的冒号是英文的冒号</span><br></code></pre></td></tr></table></figure><p>保存并退出。上图重要参数的意思参考如下：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/%E5%8F%82%E6%95%B0%E8%A7%A3%E9%87%8A.png" alt="参数解释"><br>接下来，来到<code>VMware Worksation</code>点击左上角的<code>编辑</code>并进入<code>虚拟网络编辑器</code>。<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="虚拟网络编辑器"><br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/VMnet8.png" alt="VMnet8"><br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/NAT.png" alt="NAT"><br>记住上图中 <code>子网IP</code>、<code>子网掩码</code>以及<code>网关</code>三个数据，然后进入编辑之前的<code>ifcfg- ens32</code>文件，在文件末尾追加信息如下：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/IP%E5%9C%B0%E5%9D%80%E7%AD%89%E9%85%8D%E7%BD%AE.png" alt="IP地址等配置"><br>需要注意的是设置的<code>IPADDR</code>不要和网关一致并且要和<code>子网IP</code>一个网段。然后通过命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">systemctl restart network.service<br></code></pre></td></tr></table></figure><p>重启网络设置。<br><br>再通过命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ifconfig<br></code></pre></td></tr></table></figure><p>查看当前虚拟机的网络设置是否和设置的一致。<br><br>&#8195;&#8195;接下来关闭防火墙，不然虚拟机无法连接外网。<code>centOS7</code>中可以通过如下命令选择自行选择暂时关闭防火墙还是永久关闭防火墙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">systemctl start firewalld  <span class="hljs-comment"># 启动</span><br>systemctl status firewalld  <span class="hljs-comment"># 查看状态</span><br>systemctl disable firewalld  <span class="hljs-comment"># 停用</span><br>systemctl stop firewalld  <span class="hljs-comment"># 禁用</span><br></code></pre></td></tr></table></figure><p>如果你是<code>centOS6</code>可以通过如下命令关闭防火墙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">service iptables stop  <span class="hljs-comment"># 停用</span><br>service iptables start  <span class="hljs-comment"># 启动</span><br>service iptables restart  <span class="hljs-comment"># 重启</span><br>service iptables status  <span class="hljs-comment"># 查看状态</span><br>chkconfig iptables off  <span class="hljs-comment"># 禁用</span><br>chkconfig iptables on  <span class="hljs-comment"># 永久开启</span><br></code></pre></td></tr></table></figure><p>完成这一步之后，虚拟器就应该可以ping通外网了。可以在虚拟机的命令行输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ping www.baidu.com<br></code></pre></td></tr></table></figure><p>如果出现如下结果，说明成功了：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/ping_baidu.png" alt="ping_baidu"><br>如果出现了可以ping通主机（就是你的电脑）,但是不能ping通外网，可以参考<a href="https://blog.csdn.net/Hi_alan/article/details/98633468?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1" target="_blank" rel="noopener">博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的安装与配置</title>
      <link href="/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#目的">目的</a></li><li><a href="#git的下载和安装">git的下载和安装</a></li><li><a href="#git的基本工作流程">git的基本工作流程</a></li><li><a href="#gti的基础设置">gti的基础设置</a></li><li><a href="#说明">说明</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>通过git可以管理github项目代码，个人博客的搭建过程中也需要git的环境配置。</p><hr><h2 id="git的下载和安装"><a href="#git的下载和安装" class="headerlink" title="git的下载和安装"></a>git的下载和安装</h2><p>在<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>下载对应版本的git软件：<br><img src="/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git%E4%B8%8B%E8%BD%BD.png" alt="image"><br>然后双击安装即可，在选择<code>Adjusting your PATH environment</code>时选择<code>Use Git from Git Bash only</code>（其余默认，如果不想安装在默认路径，记得更改安装路径）。<br>若在桌面鼠标右键有<code>Git GUI Here</code>和<code>Git Bash Here</code>两个选项，则说明安装成功。</p><hr><h2 id="git的基本工作流程"><a href="#git的基本工作流程" class="headerlink" title="git的基本工作流程"></a>git的基本工作流程</h2><p>详细可见<a href="https://www.bilibili.com/video/av39189147?p=7" target="_blank" rel="noopener">视频教学</a>，分享者：<a href="https://space.bilibili.com/346057315?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">Fm-C</a>。<br><img src="/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git%E6%93%8D%E4%BD%9C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="git操作基本命令行"></p><hr><h2 id="gti的基础设置"><a href="#gti的基础设置" class="headerlink" title="gti的基础设置"></a>gti的基础设置</h2><p>在桌面新建一个文件夹（作为git工作路径），在该文件夹内鼠标右键选择<code>Git Bash Here</code>。<br>然后，在<code>Git Bash Here</code>界面通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">'github用户名'</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">'github绑定的邮箱'</span><br></code></pre></td></tr></table></figure><p>初始化你的个人信息， 你可以通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">git config --list<br></code></pre></td></tr></table></figure><p>查看<code>user.name</code>和<code>user.email</code>两个属性是否设置成功。</p><hr><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>上述内容是我学习b站<a href="https://space.bilibili.com/346057315?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">Fm-C</a>分享的公开课<a href="https://www.bilibili.com/video/av39189147?p=6" target="_blank" rel="noopener">Github使用教程-黑马程序员</a>总结得出。<br>该公开课讲解的非常详细，有兴趣的朋友可以去观看公开课视频！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo、github搭建个人博客</title>
      <link href="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#环境">环境</a></li><li><a href="#第一步安装notejs">第一步（安装note.js）</a></li><li><a href="#第二步安装cnpm">第二步（安装cnpm）</a></li><li><a href="#第三步安装hexo并初始化博客">第三步（安装hexo并初始化博客）</a></li><li><a href="#第四步新建一篇博文并上传到github">第四步（新建一篇博文并上传到github）</a></li><li><a href="#第五步设置主题">第五步（设置主题）</a></li><li><a href="#问题总结">问题总结</a></li><li><a href="#说明">说明</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>已下载并配置好<code>Git</code>环境的<code>Windows10</code>系统（可以参考我的另外一篇博客<code>git的安装与配置</code>），<br>当然后面的操作也适用于<code>Mac</code>系统，但需要注意<code>Win</code>和<code>Mac</code>终端命令行略有差别，不可照搬，如果在<code>Mac</code>上命令运行不了，则需要查找相应的<code>Mac</code>终端命令行。</p><hr><h2 id="第一步（安装note-js）"><a href="#第一步（安装note-js）" class="headerlink" title="第一步（安装note.js）"></a>第一步（安装note.js）</h2><p>下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>，如下图所示：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/node.png" alt="下载示意图"><br>下载下来以后，点击默认安装就可以了，如果不喜欢安装在C盘，可以自行更改安装目录。<br>安装好以后，在桌面任务栏点击搜索，输入cmd并选择以<code>管理员身份运行</code>，然后可进行如下操作：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E6%9F%A5%E8%AF%A2node%E5%92%8Cnpm%E7%89%88%E6%9C%AC.png" alt="image"><br>如果可以通过代码查找到node和npm的版本，那说明node.js已经安装好了。</p><hr><h2 id="第二步（安装cnpm）"><a href="#第二步（安装cnpm）" class="headerlink" title="第二步（安装cnpm）"></a>第二步（安装cnpm）</h2><p>国内通过npm下载东西很慢，我们可以通过npm全局安装cnpm并指定淘宝源，以提升后续操作的速度，相应命令行如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">npm install -g cnpm --registry=https://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure><p>然后通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cnpm -v<br></code></pre></td></tr></table></figure><p>查找到安装的cnpm版本。</p><hr><h2 id="第三步（安装hexo并初始化博客）"><a href="#第三步（安装hexo并初始化博客）" class="headerlink" title="第三步（安装hexo并初始化博客）"></a>第三步（安装hexo并初始化博客）</h2><p>通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>全局安装hexo框架，再通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo -v<br></code></pre></td></tr></table></figure><p>查询安装的hexo版本，然后在当前路径下，通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">mkdir 文件夹名称<br></code></pre></td></tr></table></figure><p>新建一个空文件夹（命名看个人，我将其命名为blog），后面这个文件夹会包含你博客的所有内容（如果不想在当前路径下工作，可以通过命令行<code>cd 路径</code>更改路径再新建文件夹），然后在blog的路径下通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo init<br></code></pre></td></tr></table></figure><p>初始化一个博客，等命令行运行完之后，便可以看到在blog文件夹内新增了许多文件，这些是hexo生成的博客基础框架。<br>最后通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo server<br></code></pre></td></tr></table></figure><p>生成初始博客界面，可以通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">http://localhost:<span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p>访问该初始博客界面。</p><hr><h2 id="第四步（新建一篇博文并上传到github）"><a href="#第四步（新建一篇博文并上传到github）" class="headerlink" title="第四步（新建一篇博文并上传到github）"></a>第四步（新建一篇博文并上传到github）</h2><p>通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo new <span class="hljs-string">"文件名"</span><br></code></pre></td></tr></table></figure><p>创建一个新的md文件（上述引号为英文输入法的引号，new和文件名之间有空格），该文件会保存在路径<code>blog\source\_posts</code>中，你可以通过下载<a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">Notepad++</a>或者<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>来编辑该md文件，需要注意的是博文一般都是以<a href="https://www.jianshu.com/p/b03a8d7b1719" target="_blank" rel="noopener">Markdown</a>格式编写。<br>例如，编辑test.md文件内容如下：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/test.png" alt="image"><br>（注意上面图片中<code>##</code>后面均有一个空格）保存以后在blog路径下按顺序运行命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo clean<br>hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>再打开本地链接<code>http://localhost:4000</code>，就可以看到：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/test%E7%BB%93%E6%9E%9C.png" alt="image"><br>看完之后记得<code>ctrl+c</code>打断<code>hexo server</code>。</p><p>点击<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册并登录，然后创建一个名为<code>github用户名.github.io</code>的仓库（仓库名必须是这个格式），如果不会可以在网上查询教程， 这里就不再详述。<br>完成上面这一步之后，回到终端界面，在blog路径下通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cnpm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><p>下载git部署插键，若安装过程中有warning提示不用管，等待安装完成即可。</p><p>接下来，我们找到blog文件夹里的<code>_config.yml</code>文件，右键选择<code>NotePad++</code>打开编辑，找到<code>deploy</code>设置（文件最下面），将其设置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">type: git<br>repo: https://github.com/github用户名/github用户名.github.io.git<br>branch: master<br></code></pre></td></tr></table></figure><p>（注意！注意！注意！冒号后面均有一个空格）然后保存并退出。然后在终端界面blog路径下通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo deploy<br></code></pre></td></tr></table></figure><p>将blog配置文件上传到github的<code>github用户名.github.io</code>库中（第一次上传会提示输入github用户名和密码），然后就可以通过<code>https://github用户名.github.io/</code>访问博客界面啦！（有时github网站访问比较慢或出现404错误，需要多刷新几次）。</p><hr><h2 id="第五步（设置主题）"><a href="#第五步（设置主题）" class="headerlink" title="第五步（设置主题）"></a>第五步（设置主题）</h2><p><code>hexo</code>自带主题比较简单，你可以自己下载开源主题。这里给一个推荐：<code>https://github.com/litten/hexo-theme-yilia</code>。</p><p>在blog路径下，通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><p>下载<code>yilia</code>主题到<code>blog\themes</code>路径下（有梯子的朋友可以打开梯子，这样会加快下载速度）。</p><p>然后再次找到blog文件夹里的<code>_config.yml</code>文件，右键选择<code>NotePad++</code>打开编辑，找到<code>theme</code>设置，将其改为：<code>theme: yilia</code>（同样的冒号后面有一个空格），保存退出。<br>最后在终端blog路径下，按顺序输入命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo clean<br>hexo generate<br>hexo server<br>ctrl + c(组合键,打断)<br>hexo deploy<br></code></pre></td></tr></table></figure><p>你就可以通过<code>https://github用户名.github.io/</code>访问新主题的博客界面啦！（若博客界面没有变化，多刷新等待一会儿）</p><hr><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>1、如果上传的图片博客界面无法显示，参考<a href="https://www.jianshu.com/p/3db6a61d3782" target="_blank" rel="noopener">链接1</a>。<br>2、如果搭建 <code>hexo</code>，在执行<code>hexo deploy</code> 后,出现 <code>error deployer not found:git</code>的错误，参考<a href="https://blog.csdn.net/Qin605/article/details/71124757" target="_blank" rel="noopener">链接2</a>。</p><hr><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>上述内容是我学习b站<a href="https://space.bilibili.com/384068749?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">CodeSheep</a>制作的<a href="https://www.bilibili.com/video/av44544186?t=402" target="_blank" rel="noopener">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a>总结得出。<br>该up主讲解的非常详细，有兴趣的朋友可以去观看他的视频！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
