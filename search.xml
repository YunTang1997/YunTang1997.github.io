<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql索引</title>
      <link href="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#索引简介">索引简介</a><ul><li><a href="#定义">定义</a></li><li><a href="#优势">优势</a></li><li><a href="#劣势">劣势</a></li></ul></li><li><a href="#索引分类">索引分类</a><ul><li><a href="#主键索引主键">主键索引（主键）</a></li><li><a href="#单值索引">单值索引</a></li><li><a href="#唯一索引">唯一索引</a></li><li><a href="#复合索引">复合索引</a></li><li><a href="#语法总结">语法总结</a></li></ul></li><li><a href="#btree索引">BTree索引</a><ul><li><a href="#b树">B+树</a></li><li><a href="#b树和b树的区别">B树和B+树的区别</a></li><li><a href="#myisam索引结构示意图">MyISAM索引结构示意图</a></li><li><a href="#innodb索引结构示意图">InnoDB索引结构示意图</a></li></ul></li><li><a href="#需要创建索引的情况">需要创建索引的情况</a></li><li><a href="#不需要创建索引的情况">不需要创建索引的情况</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>&#8195;&#8195;除数据本身之外，数据库还维护着一个<code>满足特定查找算法的数据结构</code>，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现<code>高级查找算法</code>，这种<code>数据结构</code>就是<code>索引</code>（可以简单理解为：排好序的快速查找数据结构）。<br>&#8195;&#8195;下图是索引方式的示例：<br><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="搜索二叉树"><br>&#8195;&#8195;左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址。为了加快Col2的查找，可以维护一个右边所示的<code>二叉查找树</code>，每个结点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到相应数据，从而快速的检索出符合条件的记录。<br>&#8195;&#8195;平常所说的索引，如果没有特别指明，都是指<code>B树（多路搜索树，并不一定是二叉的）结构组织的索引</code>。其中<code>聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引</code>默认都是使用<code>B+树索引</code>，统称<code>索引</code>。当然，除了B+树这种类型的索引之外，还有哈希索引（hash index）等。<br>&#8195;&#8195;一般来说索引本身也很大，不可能全部储存在内存中，因此索引往往<code>以文件的形式储存在磁盘</code>上。<br>&#8195;&#8195;<code>二叉树</code>很可能会发生<code>两边不平衡</code>的情况，而B-TREE会自动根据两边的情况自动调结，使两端无限趋近于平衡状态，可以使性能最稳定。但它也有弊端：当<code>插入/修改操作过多</code>时，<code>B-TREE会不断调整平衡，消耗性能</code>，从侧面说明了索引不是越多越好。</p><hr><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>提高数据检索的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li></ul><hr><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的。</li><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。<code>因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段</code>，都会调整因为更新所带来的键值变化后的索引信息。</li><li>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</li></ul><hr><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="主键索引（主键）"><a href="#主键索引（主键）" class="headerlink" title="主键索引（主键）"></a>主键索引（主键）</h3><p>&#8195;&#8195;设定为主键后数据库会自动建立索引，<code>innodb为聚簇索引</code>。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一（随表一起建索引）</span><br><span class="hljs-comment"># 注意：使用AUTO_INCREMENT关键字的列必须有索引(只要有索引就行)。</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>), customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    PRIMARY KEY(id) <br>);<br><span class="hljs-comment"># 方式二（单独建主键索引）</span><br>ALTER TABLE customer ADD PRIMARY KEY customer(customer_no);<br><br><span class="hljs-comment"># 删除建主键索引</span><br>ALTER TABLE customer DROP PRIMARY KEY;<br><br><span class="hljs-comment"># 修改建主键索引</span><br><span class="hljs-comment"># 必须先删除掉（DROP）原索引，再新建（ADD）索引</span><br></code></pre></td></tr></table></figure><hr><h3 id="单值索引"><a href="#单值索引" class="headerlink" title="单值索引"></a>单值索引</h3><p>&#8195;&#8195;即一个索引只包含单个列，一个表可以有多个单列索引。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一（随表一起建索引）</span><br><span class="hljs-comment"># 随表一起建立的索引，索引名同列名（customer_name）</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>), customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    KEY (customer_name)  <br>);<br><span class="hljs-comment"># 方式二（单独建索引）</span><br>CREATE INDEX idx_customer_name ON customer(customer_name); <br><br><span class="hljs-comment"># 删除索引</span><br>DROP INDEX idx_customer_name ON<br>customer;<br></code></pre></td></tr></table></figure><hr><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>&#8195;&#8195;索引列的值必须唯一，但允许有空值。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 建立唯一索引时必须保证所有的值是唯一的（除了null），若有重复数据，会报错。</span><br><span class="hljs-comment"># 方式一（随表一起建索引）</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED  AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>),customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    UNIQUE (customer_no)<br>);<br><span class="hljs-comment"># 方式二（单独建索引）</span><br>CREATE UNIQUE INDEX idx_customer_no ON customer(customer_no); <br><br><span class="hljs-comment"># 删除索引</span><br>DROP INDEX idx_customer_no ON customer;<br></code></pre></td></tr></table></figure><hr><h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><p>&#8195;&#8195;即一个索引包含多个列。<br>&#8195;&#8195;语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一（随表一起建索引）</span><br>CREATE TABLE customer (<br>    id INT(<span class="hljs-number">10</span>) UNSIGNED  AUTO_INCREMENT, customer_no VARCHAR(<span class="hljs-number">200</span>), customer_name VARCHAR(<span class="hljs-number">200</span>),<br>    KEY (customer_no,customer_name)<br>);<br><span class="hljs-comment"># 单独建索引</span><br>CREATE INDEX idx_no_name ON customer(customer_no, customer_name); <br><br><span class="hljs-comment"># 删除索引</span><br>DROP INDEX idx_no_name ON customer;<br></code></pre></td></tr></table></figure><hr><h3 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建</span><br><span class="hljs-comment"># 方式一</span><br>CREATE [UNIOUE] INDEX indexName ON mytable(columnname(length));<br><span class="hljs-comment"># 方式二</span><br>ALTER mytable ADD [UNIQUE] INDEX [indexName] ON (columnname(length));<br><br><span class="hljs-comment"># 删除</span><br>DROP INDEX [indexName] ON mytable; <br><br><span class="hljs-comment"># 查看</span><br>SHOW INDEX FROM table_name;<br></code></pre></td></tr></table></figure><hr><h2 id="BTree索引"><a href="#BTree索引" class="headerlink" title="BTree索引"></a>BTree索引</h2><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/BTree%E7%B4%A2%E5%BC%95.png" alt="BTree索引"></p><ul><li>一颗b树，<code>浅蓝色</code>的块我们称之为一个<code>磁盘块</code>，可以看到每个磁盘块包含几个<code>数据项</code>（深蓝色）和<code>指针</code>（黄色）。</li><li>如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。</li><li>真实的数据存在于<code>叶子结点</code>即3、5、9、10、13、15、28、29、36、60、75、79、90、99。</li><li><code>非叶子结点不存储真实的数据，只存储指引搜索方向的数据项</code>，如17、35并不真实存在于数据表中。<br>&#8195;&#8195;如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。<br>&#8195;&#8195;真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</li></ul><hr><h3 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h3><ul><li><code>B树的关键字和记录是放在一起的，叶子结点可以看作外部结点，不包含任何信息</code>；<code>B+树非叶子结点中只有关键字和指向下一个结点的索引，记录只放在叶子结点中</code>。（一次查询可能进行两次i/o操作）</li><li>在B树中，越靠近根结点的记录查找时间越快，只要找到关键字即可确定记录的存在；而B+树中每个记录的查找时间基本是一样的，都需要从根结点走到叶子结点，而且在叶子结点中还要再比较关键字。从这个角度看B树的性能好像要比B+树好，而在实际应用中却是B+树的性能要好些。<code>因为B+树的非叶子结点不存放实际的数据，这样每个结点可容纳的元素个数比B-树多，树高比B树小，这样带来的好处是减少磁盘访问次数</code>。尽管B+树找到一个记录所需的比较次数要比B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，因此实际中B+树的性能可能还会好些，而且<code>B+树的叶子结点使用指针连接在一起，方便顺序遍历（例如查看一个目录下的所有文件，一个表中的所有记录等）</code>，这也是很多<code>数据库</code>和<code>文件系统</code>使用B+树的缘故。 </li></ul><p>&#8195;&#8195;为什么说B+树比B树更适合实际应用中操作系统的文件索引和数据库索引？</p><ol><li><code>B+树的磁盘读写代价更低</code>。B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</li><li><code>B+树的查询效率更加稳定</code>。由于非叶结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。<blockquote><p>结论在内存有限的情况下，B+树永远比B树好。无限内存则后者方便。</p></blockquote></li></ol><hr><h3 id="MyISAM索引结构示意图"><a href="#MyISAM索引结构示意图" class="headerlink" title="MyISAM索引结构示意图"></a>MyISAM索引结构示意图</h3><p><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/MyISAM.png" alt="MyISAM"></p><hr><h3 id="InnoDB索引结构示意图"><a href="#InnoDB索引结构示意图" class="headerlink" title="InnoDB索引结构示意图"></a>InnoDB索引结构示意图</h3><p><img src="/2020/06/28/Mysql%E7%B4%A2%E5%BC%95/InnoDB.png" alt="InnoDB"></p><hr><h2 id="需要创建索引的情况"><a href="#需要创建索引的情况" class="headerlink" title="需要创建索引的情况"></a>需要创建索引的情况</h2><ol><li>主键自动建立唯一索引。</li><li>频繁作为查询条件的字段应该创建索引（WHERE后面的语句）。</li><li>查询中与其它表关联的字段，外键关系建立索引。</li><li>单键/组合索引的选择问题（在高并发下倾向创建组合索引）。</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度（GROUP BY和ORDER BY后面的字段有索引大大提高效率）。</li><li>查询中统计或者分组字段。</li></ol><hr><h2 id="不需要创建索引的情况"><a href="#不需要创建索引的情况" class="headerlink" title="不需要创建索引的情况"></a>不需要创建索引的情况</h2><ol><li>表记录太少。</li><li>经常增删改的表（索引虽然提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件）。</li><li>WHERE条件里用不到的字段不创建索引。</li><li>数据<code>重复且分布平均</code>的表字段，因此应该只为经常查询和经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux RPM和YUM</title>
      <link href="/2020/06/24/Linux%20RPM%E5%92%8CYUM/"/>
      <url>/2020/06/24/Linux%20RPM%E5%92%8CYUM/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#rpm">RPM</a><ul><li><a href="#rpm介绍">RPM介绍</a></li><li><a href="#查询指令">查询指令</a></li><li><a href="#卸载指令">卸载指令</a></li><li><a href="#rpm包的安装">RPM包的安装</a></li></ul></li><li><a href="#yum">YUM</a><ul><li><a href="#介绍">介绍</a></li><li><a href="#基本指令">基本指令</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><h3 id="RPM介绍"><a href="#RPM介绍" class="headerlink" title="RPM介绍"></a>RPM介绍</h3><p>&#8195;&#8195;一种用于<code>互联网下载包的打包及安装工具</code>，它包含在某些Linux分发版中。它生成具有<code>.RPM</code>扩展名的文件。RPM是<code>RedHat Package Manager</code>（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p><hr><h3 id="查询指令"><a href="#查询指令" class="headerlink" title="查询指令"></a>查询指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -q rpm软件包名称  <span class="hljs-comment"># 查询软件包是否安装</span><br>rpm -qa  <span class="hljs-comment"># 查询安装的所有软件包  </span><br>rpm –qa | grep rpm软件包名称  <span class="hljs-comment"># 查询已安装的软件名称</span><br>rpm -qi rpm软件包名称  <span class="hljs-comment"># 查询软件包信息</span><br>rpm -ql rpm软件包名称  <span class="hljs-comment"># 查询软件包中的文件</span><br>rpm -qf 文件路径  <span class="hljs-comment"># 查询文件所属的软件包</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;举例：查询是否安装firefox。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -qa | grep firefox<br><span class="hljs-comment"># 结果：firefox-45.0.1-1.el6.centos.x86_64.rpm</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;对上述结果的说明：</p><ul><li>名称：firefox</li><li>版本号：45.0.1-1 </li><li>适用操作系统：el6.centos.x86_64，表示centos6.x的64位系统</li><li>如果是<code>i686</code>、<code>i386</code>表示<code>32位系统</code>，<code>noarch</code>表示<code>通用</code>。</li></ul><hr><h3 id="卸载指令"><a href="#卸载指令" class="headerlink" title="卸载指令"></a>卸载指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -e rpm软件包名称  <span class="hljs-comment"># 卸载软件</span><br>rpm -e --nodeps rpm软件包名称  <span class="hljs-comment"># 强制卸载软件</span><br></code></pre></td></tr></table></figure><hr><h3 id="RPM包的安装"><a href="#RPM包的安装" class="headerlink" title="RPM包的安装"></a>RPM包的安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">rpm -ivh RPM包路径<br><span class="hljs-comment"># i = install 安装</span><br><span class="hljs-comment"># v = verbose 提示</span><br><span class="hljs-comment"># h = hash 进度条</span><br></code></pre></td></tr></table></figure><hr><h2 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&#8195;&#8195;Yum是一个Shell软件包管理器。<code>基于RPM包管理</code>，能够从指定的服务器自动下载RPM包并且安装，可以<code>自动处理依赖性关系</code>，并且一次安装所有依赖的软件包。</p><hr><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">yum list | grep 软件包名称  <span class="hljs-comment"># 查询yum服务器是否有需要安装的软件</span><br>yum install 软件包名称 下载安装  <span class="hljs-comment"># 安装指定的yum包</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程管理</title>
      <link href="/2020/06/23/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2020/06/23/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#基本介绍">基本介绍</a></li><li><a href="#显示系统执行的进程">显示系统执行的进程</a></li><li><a href="#终止进程">终止进程</a></li><li><a href="#服务service管理">服务(service)管理</a><ul><li><a href="#service管理指令">service管理指令</a></li><li><a href="#查看服务名">查看服务名</a></li><li><a href="#chkconfig指令">chkconfig指令</a></li></ul></li><li><a href="#动态监控进程">动态监控进程</a></li><li><a href="#监控网络状态">监控网络状态</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>在LINUX中，<code>每个执行的程序（代码）</code>都称为一个<code>进程</code>， 每一个进程都分配一个ID号。</li><li>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</li><li>每个进程都可能以两种方式存在的。<code>前台与后台</code>，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行[<code>sshd, crond</code>]。 </li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</li></ul><hr><h2 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">ps -a  <span class="hljs-comment"># 显示当前终端的所有进程信息</span><br>ps -u  <span class="hljs-comment"># 已用户的格式显示进程信息</span><br>ps -x  <span class="hljs-comment"># 显示后台进程运行的参数</span><br>ps -aux | more<br>ps -aux | grep 进程名<br><span class="hljs-comment"># ps -aux | grep sshd  # 查看远程登陆服务进程</span><br>ps -aux | grep bash  <span class="hljs-comment"># 查看终端进程</span><br><span class="hljs-comment"># ps -aux | grep crond</span><br>ps -ef | more  <span class="hljs-comment"># 全格式显示当前所有的进程，-e显示所有进程，-f全格式</span><br>pstree -p  <span class="hljs-comment"># 以进程树的形式，显示进程的PID</span><br>pstree -u  <span class="hljs-comment"># 以进程树的形式，显示进程的所属用户</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;ps显示的信息选项：</p><table><thead><tr><th align="center">字段</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">USER</td><td align="center">用户名</td></tr><tr><td align="center">PID</td><td align="center">进程识别号</td></tr><tr><td align="center">PPID</td><td align="center">父进程ID</td></tr><tr><td align="center">%CPU</td><td align="center">占用的CPU</td></tr><tr><td align="center">%MEN</td><td align="center">占用内存</td></tr><tr><td align="center">VSZ</td><td align="center">使用的虚拟内存（KB）</td></tr><tr><td align="center">RSS</td><td align="center">使用的物理内存（KB）</td></tr><tr><td align="center">TTY</td><td align="center">终端机号</td></tr><tr><td align="center">STAT</td><td align="center">进程的状态 s：休眠 r：运行 z：僵死</td></tr><tr><td align="center">START</td><td align="center">启动时间</td></tr><tr><td align="center">TIME</td><td align="center">此进程所消耗CPU时间</td></tr><tr><td align="center">COMMAND</td><td align="center">进程执行时的命令行（如果过长会被截断显示）</td></tr></tbody></table><hr><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">kill [<span class="hljs-number">-9</span>] 进程号  <span class="hljs-comment"># 通过进程号杀死进程 -9强制终止</span><br>killall 进程名称  <span class="hljs-comment"># 通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</span><br></code></pre></td></tr></table></figure><hr><h2 id="服务-service-管理"><a href="#服务-service-管理" class="headerlink" title="服务(service)管理"></a>服务(service)管理</h2><h3 id="service管理指令"><a href="#service管理指令" class="headerlink" title="service管理指令"></a>service管理指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">service 服务名 [start | stop | restart | reload | status]<br><span class="hljs-comment"># 在CentOS7.0后 不再使用service，而是systemctl</span><br></code></pre></td></tr></table></figure><hr><h3 id="查看服务名"><a href="#查看服务名" class="headerlink" title="查看服务名"></a>查看服务名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">setup -&gt; 系统服务<br>ls -al /etc/init.d/<br></code></pre></td></tr></table></figure><hr><h3 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">chkconfig 服务名 --list  <span class="hljs-comment"># 查看某项服务</span><br>chkconfig --list | grep 服务名  <span class="hljs-comment"># 查找某项服务</span><br>chkconfig 服务名 on/off  <span class="hljs-comment"># 关闭或开启某项服务（所有运行级别）</span><br>chkconfig --level n 服务名 on/off  <span class="hljs-comment"># 可以指定某个服务，某各个运行级别，开启或关闭</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<font color="red">注意：chkconfig重新设置服务重启后机器才会按设置的状态运行</font>。</p><hr><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><p>&#8195;&#8195;<code>top</code>与<code>ps</code>命令很相似，它们都用来显示正在执行的进程。Top与ps最大的不同之处，在于<code>top在执行一段时间可以更新正在运行的的进程</code>（默认每3秒变化一次）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">top [选项]<br>iotop  <span class="hljs-comment"># 动态监控磁盘读写</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;top常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">更能</th></tr></thead><tbody><tr><td align="center">-d 秒数</td><td align="center">指定top命令每隔几秒更新，默认是3秒在top命令的交互模式当中可以执行的命令</td></tr><tr><td align="center">-i</td><td align="center">使top不显示任何闲置或者僵死进程</td></tr><tr><td align="center">-p</td><td align="center">通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><p><img src="/2020/06/23/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%8A%A8%E6%80%81%E8%BF%9B%E7%A8%8B.png" alt="动态进程"></p><p>&#8195;&#8195;涉及到的<code>交互操作</code>：</p><table><thead><tr><th align="center">操作</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">P</td><td align="center">以CPU使用率排序，默认就是此项</td></tr><tr><td align="center">M</td><td align="center">以内存的使用率排序</td></tr><tr><td align="center">N</td><td align="center">以PID排序</td></tr><tr><td align="center">q</td><td align="center">退出top</td></tr><tr><td align="center">k</td><td align="center">终止进程</td></tr></tbody></table><hr><h2 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">netstat -an  <span class="hljs-comment"># 按一定顺序排列输出</span><br>netstat -p  <span class="hljs-comment"># 显示哪个进程在调用</span><br>netstat –anp | grep sshd  <span class="hljs-comment"># 查看服务名为 sshd 的服务的信息</span><br>netstat –tunlp  <span class="hljs-comment"># 查看监听的端口</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux组管理和权限管理</title>
      <link href="/2020/06/23/%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2020/06/23/%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#查看文件的所有者">查看文件的所有者</a></li><li><a href="#修改文件所有者">修改文件所有者</a></li><li><a href="#修改文件所在的组">修改文件所在的组</a></li><li><a href="#改变用户所在组">改变用户所在组</a></li><li><a href="#linux权限">Linux权限</a><ul><li><a href="#基本介绍">基本介绍</a></li><li><a href="#rwx权限详解">rwx权限详解</a></li><li><a href="#修改权限">修改权限</a><ul><li><a href="#方式一通过---变更权限">方式一（通过+ 、-、= 变更权限）</a></li><li><a href="#方式二通过数字变更权限">方式二（通过数字变更权限）</a></li></ul></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="查看文件的所有者"><a href="#查看文件的所有者" class="headerlink" title="查看文件的所有者"></a>查看文件的所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ls -l<br>ls -al<br>ls –ahl<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -R 如果是目录，则使其下所有子文件或目录递归生效</span><br>chown [-R] 用户名 文件名  <span class="hljs-comment"># 改变文件的所有者</span><br>chown [-R] 所有者:所有组 文件名  <span class="hljs-comment"># 改变用户的所有者和所有组</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root创建一个文件apple.txt，然后将其所有者修改成tom。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch apple.txt<br>chown tom apple.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所在的组"><a href="#修改文件所在的组" class="headerlink" title="修改文件所在的组"></a>修改文件所在的组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -R 如果是目录，则使其下所有子文件或目录递归生效</span><br>chgrp [-R] 组名 文件名<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root用户创建文件orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch orange.txt<br>ls -al<br>chgrp police orange.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h2><p>&#8195;&#8195;在添加用户时，可以指定将该用户添加到哪个组中，同样的用 <code>root的管理权限</code>可以改变某个用户所在的组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">usermod –g 组名 用户名<br>usermod –d 目录名 用户名  <span class="hljs-comment"># 改变该用户登陆的初始目录</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;创建一个bandit（土匪组）将tom这个用户从原来所在的police组，修改到 bandit。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">groupadd bandit<br>usermod -g bandit tom<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p>-rwxrw-r– 1 root police 1213 Feb 2 09:39 abc.txt</p></blockquote><p>&#8195;&#8195;<strong>说明：</strong></p><ol><li><code>第0位</code>确定文件类型（说明：<code>-:普通文件</code>，<code>d:目录</code>，<code>l: 连接文件</code>，<code>c: 字符设备文件[键盘,鼠标]</code>， <code>b: 块设备文件[硬盘]</code>）。</li><li><code>第1-3位</code>确定<code>所有者</code>（该文件的所有者）拥有该文件的权限。<code>r：读</code> ， <code>w：写权限</code>，<code>x：执行权限</code>。  </li><li><code>第4-6位</code>确定<code>所属组</code>（同用户组的）拥有该文件的权限。</li><li><code>第7-9位</code>确定<code>其他用户</code>拥有该文件的权限。 </li><li><code>1</code>：如果是<code>文件</code>，表示<code>硬链接的数目</code>， 如果是<code>目录</code>，则表示<code>有多少个子目录</code>。</li><li><code>1213</code>： 表示<code>文件大小（字节）</code>，如果是<code>目录</code>，则统一为<code>4096</code>字节。</li><li><code>其余内容</code>：<code>最后修改时间</code>和<code>文件名</code>。</li></ol><hr><h3 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h3><p>&#8195;&#8195;<strong>rwx作用到<code>文件</code>：</strong></p><ol><li>[r]代表可读（read）: 可以读取，查看。</li><li>[w]代表可写（write）: <code>可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</code>。</li><li>[x]代表可执行（execute）:可以被执行。<br>&#8195;&#8195;<strong>rwx作用到<code>目录</code>：</strong></li><li>[r]代表可读（read）: 可以读取，ls查看目录内容。</li><li>[w]代表可写（write）: 可以修改，目录内创建 + 删除 + 重命名目录。</li><li>[x]代表可执行（execute）:可以进入该目录。 </li></ol><ul><li><font color="red">注意rwx可用数字表示为：r = 4，w = 2，x = 1 因此rwx = 4 + 2 + 1 = 7</font>。</li></ul><hr><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><h4 id="方式一（通过-、-、-变更权限）"><a href="#方式一（通过-、-、-变更权限）" class="headerlink" title="方式一（通过+ 、-、= 变更权限）"></a>方式一（通过+ 、-、= 变更权限）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># u：所有者  g：所有组  o：其他人  a：所有人（u、g、o的总和）</span><br>chmod u=rwx, g=rx, o=x  文件、目录  <span class="hljs-comment"># 表示：给所有者rwx，给所在组的用户rx，给其他人x</span><br>chmod o+w 文件、目录  <span class="hljs-comment"># 表示：给其它用户增加w的权限</span><br>chmod a-x 文件、目录  <span class="hljs-comment"># 表示：给所有用户去掉x权限</span><br></code></pre></td></tr></table></figure><hr><h4 id="方式二（通过数字变更权限）"><a href="#方式二（通过数字变更权限）" class="headerlink" title="方式二（通过数字变更权限）"></a>方式二（通过数字变更权限）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># r=4 w=2 x=1 rwx=4+2+1=7</span><br>chmod <span class="hljs-number">751</span> 文件、目录  <span class="hljs-comment"># 相当于chmod u=rwx, g=rx, o=x 文件、目录</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux磁盘分区、挂载</title>
      <link href="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/"/>
      <url>/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#linux分区">Linux分区</a><ul><li><a href="#原理介绍">原理介绍</a></li><li><a href="#硬盘说明">硬盘说明</a></li><li><a href="#查看所有设备光驱mediau盘硬盘挂载情况">查看所有设备(光驱/media，u盘，硬盘)挂载情况</a></li></ul></li><li><a href="#案例向linux虚拟机中添加一块新硬盘">案例（向Linux虚拟机中添加一块新硬盘）</a><ul><li><a href="#虚拟机添加硬盘">虚拟机添加硬盘</a></li><li><a href="#分区">分区</a></li><li><a href="#格式化">格式化</a></li><li><a href="#挂载">挂载</a></li><li><a href="#设置自动挂载">设置自动挂载</a></li></ul></li><li><a href="#磁盘情况查询">磁盘情况查询</a><ul><li><a href="#查询系统整体磁盘使用情况">查询系统整体磁盘使用情况</a></li><li><a href="#查询指定目录的磁盘占用情况">查询指定目录的磁盘占用情况</a></li><li><a href="#磁盘工作实用指令">磁盘工作实用指令</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h2><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><ol><li>Linux来说无论有几个分区，分给哪一目录使用，<code>它归根结底就只有一个根目录</code>，一个独立且唯一的文件结构 , Linux中每个分区都是用来组成整个文件系统的一部分。</li><li>Linux采用了一种叫“载入”的处理方法，<code>它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来</code>。这时要载入的一个分区将使它的存储空间在一个目录下获得。</li><li>示意图：<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD.png" alt="磁盘挂载"></li></ol><hr><h3 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h3><ol><li>Linux硬盘分<code>IDE硬盘</code>和<code>SCSI硬盘</code>，目前基本上是SCSI硬盘。</li><li>对于IDE硬盘，驱动器标识符为“hdx~”。<ol><li>“hd”表明分区所在设备的类型，这里是指IDE硬盘。</li><li>“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）。</li><li>“~”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。</li><li>例如：hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区,hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。 </li></ol></li><li>对于SCSI硬盘则标识为“sdx~”。<ol><li>“sd”来表示分区所在设备的类型，这里指SCSI硬盘。</li><li>其余则和IDE硬盘的表示方法一样。</li><li>例如：sdb1表示第2块scsi硬盘的第1个分区。</li></ol></li></ol><hr><h3 id="查看所有设备-光驱-media，u盘，硬盘-挂载情况"><a href="#查看所有设备-光驱-media，u盘，硬盘-挂载情况" class="headerlink" title="查看所有设备(光驱/media，u盘，硬盘)挂载情况"></a>查看所有设备(光驱/media，u盘，硬盘)挂载情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lsblk<br>lsblk -f<br></code></pre></td></tr></table></figure><hr><h2 id="案例（向Linux虚拟机中添加一块新硬盘）"><a href="#案例（向Linux虚拟机中添加一块新硬盘）" class="headerlink" title="案例（向Linux虚拟机中添加一块新硬盘）"></a>案例（向Linux虚拟机中添加一块新硬盘）</h2><h3 id="虚拟机添加硬盘"><a href="#虚拟机添加硬盘" class="headerlink" title="虚拟机添加硬盘"></a>虚拟机添加硬盘</h3><p>&#8195;&#8195;在<code>VMware</code>主页的<code>虚拟机</code>菜单中，选择<code>设置</code>，然后设备列表里添加硬盘，然后一直<code>下一步</code>，中间只有选择磁盘大小的地方需要修改，直到完成。然后<code>重启系统</code>（才能识别）。<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E6%B7%BB%E5%8A%A0%E7%A3%81%E7%9B%98.png" alt="添加磁盘"></p><hr><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fdisk /dev/sdb<br></code></pre></td></tr></table></figure><p>输入以上命令以后会涉及到以下的指令：</p><table><thead><tr><th align="center">指令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">m</td><td align="center">显示命令列表</td></tr><tr><td align="center">p</td><td align="center">显示磁盘分区同fdisk –l</td></tr><tr><td align="center">n</td><td align="center">新增分区</td></tr><tr><td align="center">d</td><td align="center">删除分区</td></tr><tr><td align="center">w</td><td align="center">写入并退出</td></tr></tbody></table><p>&#8195;&#8195;开始分区后输入<code>n</code>，<code>新增分区</code>，然后选择<code>p</code>，分区类型为<code>主分区</code>。两次回车默认剩余全部空间。最后输入<code>w写入分区</code>并退出，若不保存退出输入q。<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E5%88%86%E5%8C%BA.png" alt="分区"></p><hr><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">mkfs -t ext4 /dev/sdb1  <span class="hljs-comment"># ext4是分区类型</span><br></code></pre></td></tr></table></figure><hr><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">mkdir /home/newdisk  <span class="hljs-comment"># 先创建硬盘挂载路径</span><br><span class="hljs-comment"># mount 设备名称 挂载目录</span><br>mount /dev/sdb1 /home/newdisk  <span class="hljs-comment"># 挂载命令</span><br><span class="hljs-comment"># umount 设备名称 或者 挂载目录</span><br>umount /dev/sdb1  <span class="hljs-comment"># 断开挂载</span><br>umount /home/newdisk  <span class="hljs-comment"># 断开挂载</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<font color="red">用命令行挂载重启后会失效。</font></p><hr><h3 id="设置自动挂载"><a href="#设置自动挂载" class="headerlink" title="设置自动挂载"></a>设置自动挂载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">vim /etc/fstab<br></code></pre></td></tr></table></figure><p><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/%E6%B0%B8%E4%B9%85%E6%8C%82%E8%BD%BD.png" alt="永久挂载"><br>&#8195;&#8195;通过修改/etc/fstab实现挂载，添加完成后执行<code>mount –a</code>即刻生效。</p><hr><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><h3 id="查询系统整体磁盘使用情况"><a href="#查询系统整体磁盘使用情况" class="headerlink" title="查询系统整体磁盘使用情况"></a>查询系统整体磁盘使用情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df -lh<br></code></pre></td></tr></table></figure><hr><h3 id="查询指定目录的磁盘占用情况"><a href="#查询指定目录的磁盘占用情况" class="headerlink" title="查询指定目录的磁盘占用情况"></a>查询指定目录的磁盘占用情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">du -h /目录<br>du -ach --max-depth= <span class="hljs-number">1</span> /usr  <span class="hljs-comment"># 查询 /usr目录的磁盘占用情况，深度为1</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-s</td><td align="center">指定目录占用大小汇总</td></tr><tr><td align="center">-h</td><td align="center">带计量单位</td></tr><tr><td align="center">-a</td><td align="center">含文件</td></tr><tr><td align="center">–max-depth=1</td><td align="center">子目录深度</td></tr><tr><td align="center">-c</td><td align="center">列出明细的同时，增加汇总值</td></tr></tbody></table><h3 id="磁盘工作实用指令"><a href="#磁盘工作实用指令" class="headerlink" title="磁盘工作实用指令"></a>磁盘工作实用指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计/home文件夹下[文件]的个数（^为定位符）</span><br>ls –l /home/ | grep <span class="hljs-string">"^-"</span> | wc -l<br><span class="hljs-comment"># 统计/home文件夹下[目录]的个数</span><br>ls –l /home/ | grep <span class="hljs-string">"^d"</span> | wc -l<br><span class="hljs-comment"># 统计/home文件夹下[文件]的个数，包括子文件夹里的</span><br>ls –lR /home/ | grep <span class="hljs-string">"^-"</span> | wc -l<br><span class="hljs-comment"># 统计/home文件夹下[目录]的个数，包括子文件夹里的</span><br>ls –lR /home/ | grep <span class="hljs-string">"^d"</span> | wc -l<br><span class="hljs-comment"># 以树状显示home目录结构，使用yum来安装tree指令</span><br>yum install -y tree<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;树状显示home结构：<br><img src="/2020/06/23/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E3%80%81%E6%8C%82%E8%BD%BD/tree.png" alt="tree"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux crond任务调度</title>
      <link href="/2020/06/23/Linux%20crond%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
      <url>/2020/06/23/Linux%20crond%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#概述">概述</a></li><li><a href="#基本语法">基本语法</a></li><li><a href="#举例说明">举例说明</a></li><li><a href="#5个占位符">5个占位符</a></li><li><a href="#参数细节">参数细节</a></li><li><a href="#特定时间执行任务案例">特定时间执行任务案例</a></li><li><a href="#任务调度应用实例">任务调度应用实例</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&#8195;&#8195;任务调度：是指系统在某个时间执行的特定的命令或程序。<br>&#8195;&#8195;任务调度分类：</p><ol><li>系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等。</li><li>个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。</li></ol><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">crontab [选项]<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;crontab常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">编辑crontab定时任务</td></tr><tr><td align="center">-l</td><td align="center">查询crontab任务</td></tr><tr><td align="center">-r</td><td align="center">删除当前用户所有的crontab任务</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">service crond restart  <span class="hljs-comment"># 重启任务调度</span><br></code></pre></td></tr></table></figure><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>&#8195;&#8195;每小时的每分钟执行“ls –l /etc/ &gt; /tmp/to.txt”命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">crontab –e  <span class="hljs-comment"># 设置个人任务调度</span><br>*/<span class="hljs-number">1</span> * * * * ls –l  /etc/ &gt; /tmp/to.txt  <span class="hljs-comment"># 接着输入任务到调度文件（注意*号之间均有一个空格）</span><br>:wq<br></code></pre></td></tr></table></figure><hr><h2 id="5个占位符"><a href="#5个占位符" class="headerlink" title="5个占位符"></a>5个占位符</h2><table><thead><tr><th align="center">项目</th><th align="center">含义</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">第一个“*”</td><td align="center">一小时当中的第几分钟</td><td align="center">0-59</td></tr><tr><td align="center">第二个“*”</td><td align="center">一天当中的第几小时</td><td align="center">0-23</td></tr><tr><td align="center">第三个“*”</td><td align="center">一个月当中的第几天</td><td align="center">1-31</td></tr><tr><td align="center">第四个“*”</td><td align="center">一年当中的第几月</td><td align="center">1-12</td></tr><tr><td align="center">第五个“*”</td><td align="center">一周当中的星期几</td><td align="center">0-7（0和7都代表星期日）</td></tr></tbody></table><hr><h2 id="参数细节"><a href="#参数细节" class="headerlink" title="参数细节"></a>参数细节</h2><table><thead><tr><th align="center">特殊符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次的意思。</td></tr><tr><td align="center">,</td><td align="center">代表不连续的时间。比如“0 8,12,16 * * * 命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令</td></tr><tr><td align="center">-</td><td align="center">代表连续的时间范围。比如“0 5 * * 1-6命令”，代表在周一到周六的凌晨5点0分执行命令</td></tr><tr><td align="center">*/n</td><td align="center">代表每隔多久执行一次。比如“*/10 * * * *”命令，代表每隔10分钟就执行一遍命令</td></tr></tbody></table><hr><h2 id="特定时间执行任务案例"><a href="#特定时间执行任务案例" class="headerlink" title="特定时间执行任务案例"></a>特定时间执行任务案例</h2><table><thead><tr><th align="center">时间</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">45 22 * * *</td><td align="center">在22点45分执行命令</td></tr><tr><td align="center">0 17 * * 1</td><td align="center">每周一的17点0分执行命令</td></tr><tr><td align="center">0 5 1,15 * *</td><td align="center">每月1号和15号的凌晨5点0分执行命令</td></tr><tr><td align="center">40 4 * * 1-5</td><td align="center">每周一到周五的凌晨4点40分执行命令</td></tr><tr><td align="center">*/10 4 * * *</td><td align="center">每天的凌晨4点，每隔10分钟执行一次命令</td></tr><tr><td align="center">0 0 1,15 * 1</td><td align="center">每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。非常容易让管理员混乱</td></tr></tbody></table><hr><h2 id="任务调度应用实例"><a href="#任务调度应用实例" class="headerlink" title="任务调度应用实例"></a>任务调度应用实例</h2><p>&#8195;&#8195;案例1：每隔1分钟，就将当前的日期信息，追加到/tmp/mydate.log文件中。</p><ol><li>编写文件/home/mytask1.sh内容为“date &gt;&gt; /tmp/mydate.log”<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">touch /home/mystack1.sh<br>vim /home/mystack1.sh<br>文件中输入date &gt;&gt; /tmp/mydate.log<br>:wq<br></code></pre></td></tr></table></figure></li><li>给mytask1.sh一个可执行权限<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chmod <span class="hljs-number">744</span> /home/mystack1.sh<br></code></pre></td></tr></table></figure></li><li>设置个人任务调度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">crontab -e<br>输入*/<span class="hljs-number">1</span> * * * * /home/mystack1.sh<br></code></pre></td></tr></table></figure></li><li>退出保存<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">:wq<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux组管理和权限管理</title>
      <link href="/2020/06/23/Linux%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2020/06/23/Linux%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#查看文件的所有者">查看文件的所有者</a></li><li><a href="#修改文件所有者">修改文件所有者</a></li><li><a href="#修改文件所在的组">修改文件所在的组</a></li><li><a href="#改变用户所在组">改变用户所在组</a></li><li><a href="#linux权限">Linux权限</a><ul><li><a href="#基本介绍">基本介绍</a></li><li><a href="#rwx权限详解">rwx权限详解</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="查看文件的所有者"><a href="#查看文件的所有者" class="headerlink" title="查看文件的所有者"></a>查看文件的所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ls -l<br>ls -al<br>ls –ahl<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chown 用户名 文件名<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root创建一个文件apple.txt，然后将其所有者修改成tom。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch apple.txt<br>chown tom apple.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="修改文件所在的组"><a href="#修改文件所在的组" class="headerlink" title="修改文件所在的组"></a>修改文件所在的组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">chgrp 组名 文件名<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;使用root用户创建文件orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">su root<br>touch orange.txt<br>ls -al<br>chgrp police orange.txt<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h2><p>&#8195;&#8195;在添加用户时，可以指定将该用户添加到哪个组中，同样的用 <code>root的管理权限</code>可以改变某个用户所在的组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">usermod –g 组名 用户名<br>usermod –d 目录名 用户名  <span class="hljs-comment"># 改变该用户登陆的初始目录</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;创建一个bandit（土匪组）将tom这个用户从原来所在的police组，修改到 bandit。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">groupadd bandit<br>usermod -g bandit tom<br>ls -al<br></code></pre></td></tr></table></figure><hr><h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p>-rwxrw-r– 1 root police 1213 Feb 2 09:39 abc.txt</p></blockquote><p>&#8195;&#8195;<strong>说明：</strong></p><ol><li><code>第0位</code>确定文件类型（说明：<code>-:普通文件</code>，<code>d:目录</code>，<code>l: 连接文件</code>，<code>c: 字符设备文件[键盘,鼠标]</code>， <code>b: 块设备文件[硬盘]</code>）。</li><li><code>第1-3位</code>确定<code>所有者</code>（该文件的所有者）拥有该文件的权限。<code>r：读</code> ， <code>w：写权限</code>，<code>x：执行权限</code>。  </li><li><code>第4-6位</code>确定<code>所属组</code>（同用户组的）拥有该文件的权限。</li><li><code>第7-9位</code>确定<code>其他用户</code>拥有该文件的权限。 </li><li><code>1</code>：如果是<code>文件</code>，表示<code>硬链接的数目</code>， 如果是<code>目录</code>，则表示<code>有多少个子目录</code>。</li><li><code>1213</code>： 表示<code>文件大小（字节）</code>，如果是<code>目录</code>，则统一为<code>4096</code>字节。</li><li><code>其余内容</code>：<code>最后修改时间</code>和<code>文件名</code>。</li></ol><hr><h3 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h3><p>&#8195;&#8195;<strong>rwx作用到<code>文件</code>：</strong></p><ol><li>[r]代表可读(read): 可以读取，查看。</li><li>[w]代表可写(write): <code>可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</code>。</li><li>[x]代表可执行(execute):可以被执行。<br>&#8195;&#8195;<strong>rwx作用到<code>目录</code>：</strong></li><li>[r]代表可读(read): 可以读取，ls查看目录内容。</li><li>[w]代表可写(write): 可以修改，目录内创建 + 删除 + 重命名目录。</li><li>[x]代表可执行(execute):可以进入该目录。 </li></ol><ul><li><font color="red">注意rwx可用数字表示为：r = 4，w = 2，x = 1 因此rwx = 4 + 2 + 1 = 7</font>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/06/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/06/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#开机重启和用户登录">开机、重启和用户登录</a></li><li><a href="#用户注销">用户注销</a></li><li><a href="#用户管理">用户管理</a></li><li><a href="#用户组管理">用户组管理</a></li><li><a href="#用户和组的相关文件">用户和组的相关文件</a></li><li><a href="#指定运行级别">指定运行级别</a><ul><li><a href="#应用">应用</a></li></ul></li><li><a href="#帮助指令">帮助指令</a></li><li><a href="#文件目录指令">文件目录指令</a></li><li><a href="#日期时间指令">日期时间指令</a></li><li><a href="#搜索查找指令">搜索查找指令</a><ul><li><a href="#find">find</a></li><li><a href="#locate">locate</a></li><li><a href="#grep">grep</a></li></ul></li><li><a href="#压缩和解压指令">压缩和解压指令</a><ul><li><a href="#gizp">gizp</a></li><li><a href="#gunzip">gunzip</a></li><li><a href="#zip">zip</a></li><li><a href="#unzip">unzip</a></li><li><a href="#tar">tar</a></li></ul></li></ul><!-- /TOC --><a id="more"></a><h2 id="开机、重启和用户登录"><a href="#开机、重启和用户登录" class="headerlink" title="开机、重启和用户登录"></a>开机、重启和用户登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">shutdwon -h now  <span class="hljs-comment"># 立刻关机</span><br>shutdwon -h <span class="hljs-number">1</span>  <span class="hljs-comment"># 1分钟以后关机</span><br>shutdwon -r now  <span class="hljs-comment"># 立刻重启计算机</span><br>halt  <span class="hljs-comment"># 立刻关机，同1</span><br>reboot  <span class="hljs-comment"># 立刻重启，同3</span><br>sync  <span class="hljs-comment"># 把内存的数据同步到磁盘</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<font color="red">注意：不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中，防止数据丢失。</font></p><hr><h2 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">logout  <span class="hljs-comment"># 注意该命令在图形运行界面无效</span><br></code></pre></td></tr></table></figure><hr><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">useradd [选项] 用户名  <span class="hljs-comment"># 默认家里目录路径为/home/用户名</span><br>useradd -d 路径 用户名  <span class="hljs-comment"># 为创建用户名并指定家目录路径</span><br>passwd 用户名  <span class="hljs-comment"># 为该用户名添加密码</span><br>userdel 用户名  <span class="hljs-comment"># 删除用户名并且保留该用户的家目录</span><br>userdel -r 用户名  <span class="hljs-comment"># 删除用户名以及该用户的家目录</span><br>id 用户名  <span class="hljs-comment"># 查看用户信息</span><br>su - 用户名  <span class="hljs-comment"># 切换用户名，输入exit返回原用户</span><br></code></pre></td></tr></table></figure><p><font color="red">&#8195;&#8195;删除用户时，一般会保留家目录。</font></p><hr><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><blockquote><p>组，类似于角色，系统可以对有共性的多个用户进行管理。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">groupadd 组名  <span class="hljs-comment"># 创建组</span><br>groupdel 组名  <span class="hljs-comment"># 删除组</span><br>uesradd -g 用户组 用户名  <span class="hljs-comment"># 创建用户名同时指定其所属组名（不加-g参数，默认用户名所属组名和用户名相同）</span><br>uesrmod -g 用户组 用户名  <span class="hljs-comment"># 修改用户的组</span><br></code></pre></td></tr></table></figure><hr><h2 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a>用户和组的相关文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /etc/passwd<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;以上路径下的文件为<code>用户（user）</code>的配置文件，记录用户的各种信息。<br>&#8195;&#8195;其中每行的含义为：<br>&#8195;&#8195;<font color="red">用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录Shell</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /etc/shadow<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;以上路径下的文件为<code>口令</code>配置文件。<br>&#8195;&#8195;其中每行的含义为：<br>&#8195;&#8195;<font color="red">登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /etc/group<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;以上路径下的文件为<code>组（group）</code>的配置文件，记录Linux包含组的各种信息。<br>&#8195;&#8195;其中每行的含义为：<br>&#8195;&#8195;<font color="red">组名：口令：组标识号：组内用户表</font></p><hr><h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><ul><li>0：关机</li><li>1：单用户（找回丢失密码）</li><li>2：多用户状态没有网络服务</li><li>3：<font color="red">多用户状态有网络服务</font></li><li>4：系统未使用保留给用户（保留）</li><li>5：<font color="red">图形界面</font></li><li>6：系统重启</li></ul><p>&#8195;&#8195;常用运行级别为3和5。<br>&#8195;&#8195;要修改默认的运行级别可修改文件<code>/etc/inittab的id:5:initdefault:这一行中的数字。</code><br>&#8195;&#8195;切换运行级别命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">init[<span class="hljs-number">0123456</span>]  <span class="hljs-comment"># 切换运行级别</span><br></code></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>&#8195;&#8195;问：如果忘记了root密码，如何找回root密码？<br>&#8195;&#8195;答：进入<code>单用户模式</code>，然后修改root密码，因为进入单用户模式，root不需要密码就可以登陆。具体过程如下：</p><ol><li>开机<br></li><li>在引导时输入<code>回车键</code><br></li><li>在界面输入<code>e</code><br></li><li>选中界面第二行（编辑内核）<br></li><li>输入<code>e</code><br></li><li>在界面最后一行输入<code>空格和1</code><br></li><li>输入<code>回车键</code><br></li><li>输入<code>b</code><br></li><li>此时进入单用户模式<br></li><li>单用户模式下利用<code>passwd</code>修改root密码<br></li></ol><hr><h2 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">man [命令或配置文件]  <span class="hljs-comment"># 功能描述，获得帮助信息</span><br>help 命令  <span class="hljs-comment"># 共能描述：获得shell内置命令的帮助信息</span><br></code></pre></td></tr></table></figure><hr><h2 id="文件目录指令"><a href="#文件目录指令" class="headerlink" title="文件目录指令"></a>文件目录指令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">pwd  <span class="hljs-comment"># 显示当前工作目录的绝对路径</span><br>ls -[a l]  <span class="hljs-comment"># -a：显示当前目录所有的文件和目录，包括隐藏文件；-l：以列表的方式显示信息</span><br>cd 路径  <span class="hljs-comment"># 切换到指定的路径</span><br>cd ~或者cd :  <span class="hljs-comment"># 回到家目录</span><br>cd ..  <span class="hljs-comment"># 回到当前路径的上一级目录</span><br>mkdir [-p] 要创建的目录  <span class="hljs-comment"># -p表示要创建多级目录</span><br>rmdir 空目录  <span class="hljs-comment"># 删除空目录</span><br>rm -rf 非空目录或文件  <span class="hljs-comment"># 删除非空目录或文件，-r表示递归删除，-f强制删除不提示</span><br>touch 文件名称.后缀名  <span class="hljs-comment"># 创建文件</span><br>[\]cp [-r] 文件 目标路径  <span class="hljs-comment"># 拷贝文件到指定目录，\表示强制覆盖，-r表示递归复制</span><br>scp -r $pdir/$fname $user@hadoop$host:$pdir/$fname  <span class="hljs-comment"># scp（secure copy）安全拷贝，可以实现服务器与服务器之间的数据拷贝。（from server1 to server2）</span><br><span class="hljs-comment"># 命令 递归 要拷贝的文件路径/名称 目的用户@主机:目的路径/名称</span><br>rsync -rvl $pdir/$fname $user@hadoop$host:$pdir/$fname  <span class="hljs-comment"># rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点（参数详情见下面表格）</span><br><span class="hljs-comment"># 命令 选项参数 要拷贝的文件路径/名称 目的用户@主机:目的路径/名称</span><br>mv 文件 目标路径 <span class="hljs-comment"># 移动文件与目录</span><br>mv 旧文件名 新文件名  <span class="hljs-comment"># 文件重命名</span><br>cat [-n] 文件 [| more] <span class="hljs-comment"># 查看文件内容（只能查看不能修改），-n表示显示行号，more表示分页显示（用空格换页）</span><br>tac 文件名  <span class="hljs-comment"># 从文件最后一行显示信息，与cat相反</span><br>nl 文件名  <span class="hljs-comment"># 查看文件内容，默认显示行号</span><br>more 文件名  <span class="hljs-comment"># 查看文件内容（详情见下面表格）</span><br>less 文件名  <span class="hljs-comment"># 查看文件内容（详情见下面表格）</span><br>&gt;  <span class="hljs-comment"># 输出重定向</span><br>&gt;&gt;  <span class="hljs-comment"># 追加</span><br>ls -l &gt; 文件  <span class="hljs-comment"># 列表的内容写入文件中（覆盖写），文件不存在就创建文件，否则覆盖</span><br>ls -al &gt;&gt; 文件  <span class="hljs-comment"># 列表的内容追加到文件的末尾</span><br>cat 文件<span class="hljs-number">1</span> &gt; 文件<span class="hljs-number">2</span>  <span class="hljs-comment"># 将文件1的内容覆盖到文件2</span><br>echo  <span class="hljs-comment"># 输出内容到控制台</span><br>echo $PATH  <span class="hljs-comment"># 输出环境变量</span><br>echo 内容 &gt;&gt; 文件  <span class="hljs-comment"># 将内容追加到文件</span><br>head [-n] [行数] 文件  <span class="hljs-comment"># 默认显示文件前10行，利用参数可以指定输出前多少行</span><br>tail [-n] [行数] 文件  <span class="hljs-comment"># 默认显示文件后10行，利用参数可以指定输出后多少行</span><br>tail -n +行数 文件  <span class="hljs-comment"># 从规定的“行数”开始显示，显示后面的文件内容</span><br>tail -f 文件  <span class="hljs-comment"># 实时追踪文件的所有更新</span><br>ln  <span class="hljs-comment"># 软连接符号</span><br>ln -s [原文件或目录][软链接名]  <span class="hljs-comment"># 给原文件创建一个软链接（快捷方式）</span><br>rm -rf 软链接  <span class="hljs-comment"># 删除软链接（注意软链接后面不要跟/，否则报错“资源忙”）</span><br>history  <span class="hljs-comment"># 查看已执行过的历史命令，也可以执行历史命令</span><br>history n  <span class="hljs-comment"># 查看后n行历史指令</span><br>!n  <span class="hljs-comment"># 执行第n个历史指令</span><br></code></pre></td></tr></table></figure><p><code>rsync</code>参数含义：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">递归</td></tr><tr><td align="center">-v</td><td align="center">显示复制过程</td></tr><tr><td align="center">-l</td><td align="center">拷贝符号链接</td></tr></tbody></table><p><code>more</code>指令</p><table><thead><tr><th align="center">操作</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">向下换一页</td></tr><tr><td align="center">Enter</td><td align="center">向下翻一行</td></tr><tr><td align="center">q</td><td align="center">立刻离开more，不再显示该文件内容</td></tr><tr><td align="center">Ctrl + f</td><td align="center">向下滚动一屏</td></tr><tr><td align="center">Ctrl + b</td><td align="center">返回上一屏</td></tr><tr><td align="center">=</td><td align="center">输出当前的行号</td></tr><tr><td align="center">:f</td><td align="center">输出文件名和当前的行号</td></tr></tbody></table><p><code>less</code>指令：</p><table><thead><tr><th align="center">操作</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">向下换一页</td></tr><tr><td align="center">Enter</td><td align="center">向下翻一行</td></tr><tr><td align="center">[pagedown]</td><td align="center">向下翻动一页</td></tr><tr><td align="center">[pageup]</td><td align="center">向上翻动一页</td></tr><tr><td align="center">/字串</td><td align="center">向下搜寻[字串]的共能；n：向下查找，N：向上查找</td></tr><tr><td align="center">?字串</td><td align="center">向上搜寻[字串]的共能；n：向上查找，N：向下查找</td></tr><tr><td align="center">q</td><td align="center">离开less</td></tr></tbody></table><p><font color="red">注意：less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据需要显示加载内容，对于显示大型文件具有较高的效率。</font><br>&#8195;&#8195;补充<code>xsync</code>脚本，它的作用是：循环复制文件到所有节点的相同目录下。具体脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#1 获取输入参数个数，如果没有参数，直接退出</span><br>pcount=$<span class="hljs-comment">#</span><br><span class="hljs-keyword">if</span>((pcount==<span class="hljs-number">0</span>)); then<br>echo no args;<br>exit;<br>fi<br><br><span class="hljs-comment">#2 获取文件名称</span><br>p1=$<span class="hljs-number">1</span><br>fname=`basename $p1`<br>echo fname=$fname<br><br><span class="hljs-comment">#3 获取上级目录到绝对路径</span><br>pdir=`cd -P $(dirname $p1); pwd`<br>echo pdir=$pdir<br><br><span class="hljs-comment">#4 获取当前用户名称</span><br>user=`whoami`<br><br><span class="hljs-comment">#5 循环</span><br><span class="hljs-keyword">for</span>((host=<span class="hljs-number">103</span>; host&lt;<span class="hljs-number">105</span>; host++)); do<br>        echo ------------------- hadoop$host --------------<br>        rsync -rvl $pdir/$fname $user@hadoop$host:$pdir<br>done<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;<code>cat</code>进阶使用：显示文件的1000行到3000行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cat filename | tail -n + <span class="hljs-number">1000</span> | head -n <span class="hljs-number">2000</span><br>cat filename | head -n <span class="hljs-number">3000</span> | tail -n +<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><blockquote><p>head -n 1000：显示前1000行<br>tail -n 1000：显示后1000行<br>tail -n + 1000：从第1000行开始显示，显示1000行以后的内容</p></blockquote><p>&#8195;&#8195;如果使用<code>sed</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sed -n <span class="hljs-string">'1000, 3000p'</span> filename<br></code></pre></td></tr></table></figure><hr><h2 id="日期时间指令"><a href="#日期时间指令" class="headerlink" title="日期时间指令"></a>日期时间指令</h2><table><thead><tr><th align="center">基本语法</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">date</td><td align="center">显示当前时间</td></tr><tr><td align="center">date “+%Y”</td><td align="center">显示当前年份</td></tr><tr><td align="center">date “+%m”</td><td align="center">显示当前月份</td></tr><tr><td align="center">date “+%d”</td><td align="center">显示当前是哪一天</td></tr><tr><td align="center"><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code></td><td align="center">显示年月日时分秒</td></tr><tr><td align="center"><code>date -s 字符串时间</code></td><td align="center">设置系统时间</td></tr><tr><td align="center">cal</td><td align="center">显示日历</td></tr><tr><td align="center">cal 年份</td><td align="center">显示所指年份的全部日历</td></tr></tbody></table><hr><h2 id="搜索查找指令"><a href="#搜索查找指令" class="headerlink" title="搜索查找指令"></a>搜索查找指令</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>&#8195;&#8195;<code>从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">find [搜索范围] [选项] 文件名或文件用户或文件大小<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;find命令常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">-name 文件名</td><td align="center">按照指定的文件名查找文件</td></tr><tr><td align="center">-user 文件用户</td><td align="center">查找属于指定用户名的所有文件</td></tr><tr><td align="center">-size +n[K, M, …]</td><td align="center">按照指定的文件大小查找文件（+n：大于n，-n：小于n，n：等于n），注意单位要大写</td></tr></tbody></table><p>&#8195;&#8195;注意：其中文件名、用户名支持<code>通配符</code>。</p><hr><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>&#8195;&#8195;快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。<br>&#8195;&#8195;<font color="red">由于locate指令基于数据库进行查询，所以第一次运行前，必须使用<code>updatedb</code>指令创建locate数据库。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">updatedb  <span class="hljs-comment"># 创建locate数据库</span><br>locate 文件名  <span class="hljs-comment"># 查找文件名</span><br></code></pre></td></tr></table></figure><hr><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>&#8195;&#8195;过滤查找，<code>管道符“|”</code>，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">grep [选项] 查找内容或源文件<br><span class="hljs-comment"># 举例</span><br>cat hello.txt | grep [选项] hello<br></code></pre></td></tr></table></figure><p>&#8195;&#8195;grep命令常用选项：</p><table><thead><tr><th align="center">选项</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">-n</td><td align="left">显示匹配行及行号</td></tr><tr><td align="center">-i</td><td align="left">忽略大小写</td></tr></tbody></table><hr><h2 id="压缩和解压指令"><a href="#压缩和解压指令" class="headerlink" title="压缩和解压指令"></a>压缩和解压指令</h2><h3 id="gizp"><a href="#gizp" class="headerlink" title="gizp"></a>gizp</h3><p>&#8195;&#8195;压缩文件，只能将文件压缩为<code>*.gz</code>文件，且<code>不保留原文件</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gzip 文件名<br></code></pre></td></tr></table></figure><hr><h3 id="gunzip"><a href="#gunzip" class="headerlink" title="gunzip"></a>gunzip</h3><p>&#8195;&#8195;解压gz压缩文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gunzip 文件名.gz<br></code></pre></td></tr></table></figure><hr><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>&#8195;&#8195;压缩文件或<code>目录</code>为<code>*.zip</code>文件，且保留<code>原文件</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">zip [-r] 文件名.zip 将要压缩的内容  <span class="hljs-comment"># -r表示递归压缩（压缩目录时使用）</span><br></code></pre></td></tr></table></figure><hr><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>&#8195;&#8195;解压zip文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">unzip [-d 目录] 文件名.zip  <span class="hljs-comment"># -d指定解压后文件的存放目录</span><br></code></pre></td></tr></table></figure><hr><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>&#8195;&#8195;打包指令，最后打包的文件是<code>.tar.gz</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">tar [选项] 文件名.tar.gz 打包内容<br><span class="hljs-comment"># 举例1：将当前目录下的a.txt和b.txt文件打包压缩成a.tar.gz文件</span><br>tar -zcvf a.tar.zg a.txt b.txt<br><span class="hljs-comment"># 举例2：将a.tar.zg解压当当前目录</span><br>tar -zxvf a.tar.gz<br><span class="hljs-comment"># 举例3：将a.tar.zg解压到/opt/目录</span><br>tar -zxvf a.tar.zg -C /opt/  <span class="hljs-comment"># 解压到指定目录，则该目录必须存在</span><br></code></pre></td></tr></table></figure><p>&#8195;&#8195;tar指令常用选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">产生.tar打包文件</td></tr><tr><td align="center">-v</td><td align="center">显示详细信息</td></tr><tr><td align="center">-f</td><td align="center">指定压缩后的文件名</td></tr><tr><td align="center">-z</td><td align="center">打包同时压缩</td></tr><tr><td align="center">-x</td><td align="center">解包.tar文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS高可用(HA)理论概述</title>
      <link href="/2020/06/19/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/06/19/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#ha概述">HA概述</a></li><li><a href="#hdfs-ha的工作机制">HDFS HA的工作机制</a></li><li><a href="#hdfs-ha的工作要点">HDFS HA的工作要点</a></li><li><a href="#hdfs-ha自动故障转移工作机制">HDFS-HA自动故障转移工作机制</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="HA概述"><a href="#HA概述" class="headerlink" title="HA概述"></a>HA概述</h2><ul><li>所谓HA（High Available），即高可用（7*24小时不中断服务）。</li><li>实现高可用最关键的策略是<font color="red">消除单点故障</font>。HA严格来说应该分成各个组件的HA机制：HDFS的HA和YARN的HA。</li><li>在老版本Hadoop2.0之前，在HDFS集群中<code>NameNode存在单点故障（SPOF）</code>。</li><li>NameNode主要在以下两个方面影响HDFS集群：<ol><li><em>NameNode机器发生意外，如宕机，集群将无法使用，直到管理员重启。</em></li><li><em>NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用。</em></li></ol></li><li>HDFS HA功能通过配置<code>Active/Standby</code>两个NameNodes实现在集群中对NameNode的<code>热备</code>来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器。</li></ul><hr><h2 id="HDFS-HA的工作机制"><a href="#HDFS-HA的工作机制" class="headerlink" title="HDFS HA的工作机制"></a>HDFS HA的工作机制</h2><p>&#8195;&#8195;通过双NameNode消除单点故障。</p><hr><h2 id="HDFS-HA的工作要点"><a href="#HDFS-HA的工作要点" class="headerlink" title="HDFS HA的工作要点"></a>HDFS HA的工作要点</h2><blockquote><p><strong>元数据管理方式需要改变：</strong><br>内存中各自保存一份元数据；Edits日志只有<code>active状态</code>的NameNode节点可以做<code>写</code>操作；两个NameNode都可以读取Edits；共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）。</p><p><strong>需要一个状态管理功能模块：</strong><br><font color="red">实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在NameNode节点，利用zk进行状态标识，当需要进行状态切换时，由zkfailover来负责切换，切换时需要防止brain split现象的发生。</font></p><p><strong>必须保证两个NameNode之间能够ssh无密码登录。</strong></p><p><strong>隔离（Fence），即同一时刻仅仅有一个NameNode对外提供服务。</strong></p></blockquote><hr><h2 id="HDFS-HA自动故障转移工作机制"><a href="#HDFS-HA自动故障转移工作机制" class="headerlink" title="HDFS-HA自动故障转移工作机制"></a>HDFS-HA自动故障转移工作机制</h2><p>&#8195;&#8195;自动故障转移为HDFS部署增加了两个新组件：<code>ZooKeeper</code>和<code>ZKFailoverController（ZKFC）</code>进程。<br>&#8195;&#8195;<font color="red">ZooKeeper是维护少量协调数据，通知客户端这些数据的改变和监视客户端故障的高可用服务。</font> HA的自动故障转移依赖于ZooKeeper的以下功能：  </p><ol><li><strong>故障检测：</strong> 集群中的每个NameNode在ZooKeeper中维护了一个持久会话，如果机器崩溃，ZooKeeper中的会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移。  </li><li><strong>现役NameNode选择：</strong> ZooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的<code>排外锁以表明它应该成为现役NameNode。</code><br></li></ol><p>&#8195;&#8195;ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p><ol><li><strong>健康监测：</strong> ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。<br></li><li><strong>ZooKeeper会话管理：</strong> 当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个<code>特殊的znode锁</code>，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除。<br></li><li><strong>基于ZooKeeper的选择：</strong> 如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为Active。故障转移进程与前面描述的手动故障转移相似，首先如果必要保护之前的现役NameNode，然后本地NameNode转换为Active状态。<br><br>&#8195;&#8195;HDFS-HA故障转移机制如下图所示：<img src="/2020/06/19/HDFS%E9%AB%98%E5%8F%AF%E7%94%A8%E7%90%86%E8%AE%BA%E6%A6%82%E8%BF%B0/HDFS-HA%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E6%9C%BA%E5%88%B6.png" alt="HDFS-HA故障转移机制"></li></ol><blockquote><p>说明：上述内容是我学习b站<a href="https://space.bilibili.com/302417610?spm_id_from=333.788.b_765f7570696e666f.2" target="_blank" rel="noopener">尚硅谷官方</a>分享的公开课<a href="https://www.bilibili.com/video/BV1cW411r7c5" target="_blank" rel="noopener">尚硅谷Hadoop教程(hadoop框架精讲)</a>总结得出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分组查询</title>
      <link href="/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#分组查询语法">分组查询语法</a></li><li><a href="#简单的分组查询">简单的分组查询</a></li><li><a href="#添加筛选条件">添加筛选条件</a></li><li><a href="#按表达式或函数分组">按表达式或函数分组</a></li><li><a href="#按多个字段进行分组">按多个字段进行分组</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="分组查询语法"><a href="#分组查询语法" class="headerlink" title="分组查询语法"></a>分组查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>select 分组函数, 列(要求出现在group by的后面)<br>    <span class="hljs-keyword">from</span> 表<br>    [where 筛选条件]<br>    group by 分组的列表<br>    [order by 子句]<br>    <br>注意：<br>查询列表必须特殊，要求是分组函数和group by后出现的字段<br>    <br>特点：<br><span class="hljs-number">1</span>、分组查询中的筛选条件分为两类<br>   数据源                       位置                           关键字<br>分组前的筛选        原始表                       group by子句的前面              where<br>    分组后的筛选        分组后的结果集                group by子句的后面              having<br>    <br>    a、分组函数做条件肯定是放在having子句中<br>    b、能用分组前筛选的，优先选用分组前筛选<br>    <span class="hljs-number">2</span>、group by子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开没有顺序要求），表达式或函数（用的较少）<br>    <span class="hljs-number">3</span>、也可以添加排序（排序放在分组查询最后面）<br>*/<br><br>-- 引入：查询每个部门的平均工资<br>SELECT <br>    ROUND(AVG(salary), <span class="hljs-number">2</span>), department_id<br>FROM<br>    employees<br>GROUP BY department_id;<br></code></pre></td></tr></table></figure><hr><h2 id="简单的分组查询"><a href="#简单的分组查询" class="headerlink" title="简单的分组查询"></a>简单的分组查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询每个工种的最高工资<br>SELECT <br>    MAX(salary), job_id<br>FROM<br>    employees<br>GROUP BY job_id;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询每个位置上的部门个数<br>SELECT <br>    COUNT(*), location_id<br>FROM<br>    departments<br>GROUP BY location_id;<br></code></pre></td></tr></table></figure><hr><h2 id="添加筛选条件"><a href="#添加筛选条件" class="headerlink" title="添加筛选条件"></a>添加筛选条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询邮箱中包含a的字符的，每个部门的平均工资<br>SELECT <br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>, department_id<br>FROM<br>    employees<br>WHERE<br>    email LIKE <span class="hljs-string">'%a%'</span><br>GROUP BY department_id;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询有奖金的每个领导手下员工的最高工资<br>SELECT <br>    MAX(salary) AS <span class="hljs-string">'最高工资'</span>, manager_id<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL<br>GROUP BY manager_id;<br><br><br>-- 添加复杂的筛选条件<br>-- 案例<span class="hljs-number">1</span>：查询哪个部门的员工个数&gt;<span class="hljs-number">2</span><br>/*<br>分解：<br><span class="hljs-number">1</span>、查询每个部门的员工数<br>    SELECT <br>    COUNT(*), department_id<br>FROM<br>    employees<br>GROUP BY department_id;<br>    <span class="hljs-number">2</span>、根据<span class="hljs-number">1</span>的结果进行筛选，查询哪个部门的员工个数&gt;<span class="hljs-number">2</span><br>*/<br><br>SELECT <br>    COUNT(*), department_id<br>FROM<br>    employees<br>GROUP BY department_id<br>HAVING COUNT(*) &gt; <span class="hljs-number">2</span>;<br><br><br>-- 案例<span class="hljs-number">2</span>：查询每个工种有奖金的员工的最高工资&gt;<span class="hljs-number">12000</span>的工种编号和最高工资<br>/*<br>分解：<br><span class="hljs-number">1</span>、查询每个工种有奖金的员工的最高工资<br>SELECT <br>MAX(salary) AS <span class="hljs-string">'最高工资'</span>, job_id<br>FROM<br>employees<br>WHERE<br>commission_pct IS NOT NULL<br>GROUP BY job_id; <br><br><span class="hljs-number">2</span>、根据<span class="hljs-number">1</span>的结果继续筛选，最高工资&gt;<span class="hljs-number">12000</span><br>*/<br><br>SELECT <br>    MAX(salary) AS <span class="hljs-string">'最高工资'</span>, job_id<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL<br>GROUP BY job_id<br>HAVING MAX(salary) &gt; <span class="hljs-number">12000</span>;<br><br><br>-- 案例<span class="hljs-number">3</span>：查询领导编号&gt;<span class="hljs-number">102</span>的每个领导手下的最低工资&gt;<span class="hljs-number">5000</span>的领导编号是哪些，以及其最低工资<br>SELECT <br>    MIN(salary) AS <span class="hljs-string">'最低工资'</span>, manager_id<br>FROM<br>    employees<br>WHERE<br>    manager_id &gt; <span class="hljs-number">102</span><br>GROUP BY manager_id<br>HAVING MIN(salary) &gt; <span class="hljs-number">5000</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="按表达式或函数分组"><a href="#按表达式或函数分组" class="headerlink" title="按表达式或函数分组"></a>按表达式或函数分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;<span class="hljs-number">5</span><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'员工个数'</span>, LENGTH(last_name)<br>FROM<br>    employees<br>GROUP BY LENGTH(last_name)<br>HAVING 员工个数 &gt; <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="按多个字段进行分组"><a href="#按多个字段进行分组" class="headerlink" title="按多个字段进行分组"></a>按多个字段进行分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询每个部门每个工种的员工的平均工资<br>-- 分组字段调换顺序没有影响<br>SELECT <br>    ROUND(avg(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>,<br>    department_id,<br>    job_id<br>FROM<br>    employees<br>GROUP BY department_id , job_id;<br><br><br>-- 添加排序<br>-- 案例：查询每个部门每个工种的员工的平均工资并按工资由高到低排序<br>SELECT <br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>, department_id, job_id<br>FROM<br>    employees<br>GROUP BY department_id , job_id<br>ORDER BY 平均工资 DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    MAX(salary) AS <span class="hljs-string">'最大工资'</span>,<br>    MIN(salary) AS <span class="hljs-string">'最小工资'</span>,<br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>,<br>    SUM(salary) AS <span class="hljs-string">'总工资'</span>,<br>    job_id<br>FROM<br>    employees<br>GROUP BY job_id<br>ORDER BY job_id ASC;<br><br><br>SELECT <br>    MAX(salary) - MIN(salary) AS DIFFERENCE<br>FROM<br>    employees;<br><br><br>SELECT <br>    MIN(salary) AS <span class="hljs-string">'最低工资'</span>, manager_id<br>FROM<br>    employees<br>WHERE<br>    manager_id IS NOT NULL<br>GROUP BY manager_id<br>HAVING 最低工资 &gt; <span class="hljs-number">6000</span>;<br><br><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'员工数量'</span>,<br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均工资'</span>,<br>    department_id AS <span class="hljs-string">'部门编号'</span><br>FROM<br>    employees<br>GROUP BY 部门编号<br>ORDER BY 平均工资 DESC;<br><br><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'员工人数'</span>, job_id<br>FROM<br>    employees<br>GROUP BY job_id;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分组函数</title>
      <link href="/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0)/"/>
      <url>/2020/04/12/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#分组函数语法">分组函数语法</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="分组函数语法"><a href="#分组函数语法" class="headerlink" title="分组函数语法"></a>分组函数语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>功能：用作统计使用，又称为聚合函数或者统计函数或组函数<br><br>分类：<br>sum 求和、avg 平均值、max 最大值、min 最小值、count 计算个数<br><br>特点：<br><span class="hljs-number">1</span>、sum、avg一般用于处理数值型，max、min、count可以处理任何类型<br><span class="hljs-number">2</span>、以上函数均忽略null值<br><span class="hljs-number">3</span>、可以和distinct函数（去重）搭配使用<br><span class="hljs-number">4</span>、一般使用count(*)用作统计函数<br><span class="hljs-number">5</span>、和分组函数一同查询的字段要求是group by后的字段<br>*/<br><br>-- <span class="hljs-number">1</span>、简单的使用<br>SELECT <br>    SUM(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    AVG(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    MIN(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    MAX(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    COUNT(salary)<br>FROM<br>    employees;<br><br>SELECT <br>    SUM(salary) AS <span class="hljs-string">'和'</span>, ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'平均'</span><br>FROM<br>    employees;<br>    <br><br>-- <span class="hljs-number">2</span>、和distinct搭配<br>-- 统计有多少种工资<br>SELECT <br>    COUNT(DISTINCT salary)<br>FROM<br>    employees;<br>    <br><br>-- <span class="hljs-number">3</span>、count函数的详细介绍<br>SELECT <br>    COUNT(salary)<br>FROM<br>    employees;<br><br>-- 统计指定表有多少行，只要一行中有一个非null值就认为是一行<br>SELECT <br>    COUNT(*)<br>FROM<br>    employees;<br><br>-- 统计指定表有多少行，将表增添一列<span class="hljs-number">1</span>（某一行中有非null值就为<span class="hljs-number">1</span>），将<span class="hljs-number">1</span>换为其它数也行<br>SELECT <br>    COUNT(<span class="hljs-number">1</span>)<br>FROM<br>    employees;<br><br>-- 效率：<br>/*<br>MYISAM存储引擎下，count(*)效率高<br>INNODB存储引擎下，count(*)和count(<span class="hljs-number">1</span>)的效率差不多，比count(<span class="hljs-string">'字段'</span>)要高一些<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    MAX(salary) AS <span class="hljs-string">'工资最大值'</span>,<br>    MIN(salary) AS <span class="hljs-string">'工资最小值'</span>,<br>    ROUND(AVG(salary), <span class="hljs-number">2</span>) AS <span class="hljs-string">'工资平均值'</span>,<br>    SUM(salary) AS <span class="hljs-string">'工资总和'</span><br>FROM<br>    employees;<br>    <br>    <br>SELECT <br>    DATEDIFF(MAX(hiredate), MIN(hiredate)) AS <span class="hljs-string">'DIFFRENCE'</span><br>FROM<br>    employees;<br>    <br><br>SELECT <br>    COUNT(*) AS <span class="hljs-string">'个数'</span><br>FROM<br>    employees<br>WHERE<br>    department_id = <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql常见函数</title>
      <link href="/2020/04/11/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0)/"/>
      <url>/2020/04/11/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#常见函数汇总">常见函数汇总</a></li><li><a href="#字符函数">字符函数</a><ul><li><a href="#length获取参数值的字节个数">length（获取参数值的字节个数）</a></li><li><a href="#concat拼接字符串">concat（拼接字符串）</a></li><li><a href="#upper转化为大写lower转化为小写">upper（转化为大写）、lower（转化为小写）</a></li><li><a href="#substrsubstring字符串截取">substr、substring（字符串截取）</a></li><li><a href="#instr返回子串第一次出现的索引如果找不到返回0">instr（返回子串第一次出现的索引，如果找不到返回0）</a></li><li><a href="#trim-去掉前尾相应的字符">trim （去掉前、尾相应的字符）</a></li><li><a href="#lpad用指定的字符实现左填充指定的长度不是字节数">lpad（用指定的字符实现左填充指定的长度（不是字节数））</a></li><li><a href="#rpad用指定的字符实现右填充指定的长度不是字节数">rpad（用指定的字符实现右填充指定的长度（不是字节数））</a></li><li><a href="#replace替换">replace（替换）</a></li></ul></li><li><a href="#数学函数">数学函数</a><ul><li><a href="#round四舍五入">round（四舍五入）</a></li><li><a href="#ceil向上取整返回该参数的最小整数">ceil（向上取整，返回&gt;=该参数的最小整数）</a></li><li><a href="#floor向下取整返回该参数的最大整数">floor（向下取整，返回&lt;=该参数的最大整数）</a></li><li><a href="#truncate截断">truncate（截断）</a></li><li><a href="#mod取余">mod（取余）</a></li></ul></li><li><a href="#日期函数">日期函数</a><ul><li><a href="#now返回当前系统日期时间">now（返回当前系统日期+时间）</a></li><li><a href="#curdate返回当前系统日期不包含时间">curdate（返回当前系统日期，不包含时间）</a></li><li><a href="#curtime返回当前时间不包含日期">curtime（返回当前时间，不包含日期）</a></li><li><a href="#指获取指定的部分年月日小时分钟秒">指获取指定的部分，年、月、日、小时、分钟、秒</a></li><li><a href="#str_to_date将字符通过指定的格式转换为日期">str_to_date（将字符通过指定的格式转换为日期）</a></li><li><a href="#data_format将日期转化为字符">data_format（将日期转化为字符）</a></li></ul></li><li><a href="#其它函数">其它函数</a></li><li><a href="#流程控制函数">流程控制函数</a><ul><li><a href="#if-函数if-else-的效果">if 函数（if else 的效果）</a></li><li><a href="#case函数的使用一switch-case-的效果">case函数的使用一（switch case 的效果）</a></li><li><a href="#case-函数的使用二类似于-多重if">case 函数的使用二（类似于 多重if）</a></li></ul></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="常见函数汇总"><a href="#常见函数汇总" class="headerlink" title="常见函数汇总"></a>常见函数汇总</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>概念：类似于python中的方法，将一组逻辑语句封装在方法体中，对外暴露方法名<br><br>好处：<br><span class="hljs-number">1</span>、隐藏了实现的具体细节<br><span class="hljs-number">2</span>、提高代码的重用性<br><br>调用：<br>SELECT <br>    函数名(实参列表)<br>[FROM<br>    表];<br>    <br>特点：<br><span class="hljs-number">1</span>、叫什么（函数名）<br><span class="hljs-number">2</span>、干什么（函数功能）<br><br>分类：<br><span class="hljs-number">1</span>、单行函数，如：cancat、length、ifnull等<br><span class="hljs-number">2</span>、分组函数（功能做统计使用，又称为统计函数、聚合函数、组函数）<br><br>常见函数：<br>字符函数：<br>        length<br>        concat<br>        substr<br>        instr<br>        trim<br>        upper<br>        lower<br>        lpad<br>        rpad<br>        replace<br>        <br>        数学函数：<br>        round<br>        ceil<br>        floor<br>        truncate<br>        mod<br>        <br>        日期函数：<br>        now<br>        curdate<br>        curtime<br>        year<br>        month<br>        monthname<br>        day<br>        hour<br>        minute<br>        second<br>        str_to_date<br>        date_format<br>datediff<br>        <br>        其它函数：<br>        version<br>        database<br>        user<br>password<br>MD5<br>        <br>        控制函数：<br>        <span class="hljs-keyword">if</span> <br>        case<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><h3 id="length（获取参数值的字节个数）"><a href="#length（获取参数值的字节个数）" class="headerlink" title="length（获取参数值的字节个数）"></a>length（获取参数值的字节个数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">-- length  获取参数值的字节个数<br>SELECT length(<span class="hljs-string">'john'</span>);<br>SELECT length(<span class="hljs-string">'张三丰'</span>);<br><br>-- utf8一个字母占一个字节，一个汉字占<span class="hljs-number">3</span>个字节<br>SHOW VARIABLES LIKE <span class="hljs-string">'%char%'</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="concat（拼接字符串）"><a href="#concat（拼接字符串）" class="headerlink" title="concat（拼接字符串）"></a>concat（拼接字符串）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    CONCAT(last_name, <span class="hljs-string">'_'</span>, first_name) AS <span class="hljs-string">'姓名'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="upper（转化为大写）、lower（转化为小写）"><a href="#upper（转化为大写）、lower（转化为小写）" class="headerlink" title="upper（转化为大写）、lower（转化为小写）"></a>upper（转化为大写）、lower（转化为小写）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT UPPER(<span class="hljs-string">'john'</span>);<br><br>SELECT LOWER(<span class="hljs-string">'joHn'</span>);<br><br>-- 示例：将姓变大写，名变小写，然后拼接<br>SELECT <br>    CONCAT(UPPER(last_name), <span class="hljs-string">'_'</span>, LOWER(first_name)) AS <span class="hljs-string">'姓名'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="substr、substring（字符串截取）"><a href="#substr、substring（字符串截取）" class="headerlink" title="substr、substring（字符串截取）"></a>substr、substring（字符串截取）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">-- mysql中索引从<span class="hljs-number">1</span>开始<br><br>-- 截取从指定索引处后面的所有字符<br>SELECT substr(<span class="hljs-string">'李莫愁爱上了陆展元'</span>, <span class="hljs-number">7</span>) out_put;<br><br>-- 截取从指定索引处指定字符长度的字符<br>SELECT substr(<span class="hljs-string">'李莫愁爱上了陆展元'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) out_put;<br><br>-- 案例：姓名中首字母大写，其它字符小写然后用_拼接，显示出来<br>SELECT <br>    CONCAT(UPPER(SUBSTR(last_name, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),<br>            <span class="hljs-string">'_'</span>,<br>            LOWER(SUBSTR(last_name, <span class="hljs-number">2</span>))) AS <span class="hljs-string">'姓名'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="instr（返回子串第一次出现的索引，如果找不到返回0）"><a href="#instr（返回子串第一次出现的索引，如果找不到返回0）" class="headerlink" title="instr（返回子串第一次出现的索引，如果找不到返回0）"></a>instr（返回子串第一次出现的索引，如果找不到返回0）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    INSTR(<span class="hljs-string">'杨不悔爱上了殷六侠'</span>,<br>            <span class="hljs-string">'殷六侠'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="trim-（去掉前、尾相应的字符）"><a href="#trim-（去掉前、尾相应的字符）" class="headerlink" title="trim （去掉前、尾相应的字符）"></a>trim （去掉前、尾相应的字符）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT LENGTH(TRIM(<span class="hljs-string">'   张翠山    '</span>)) AS out_put;  <span class="hljs-comment"># 默认去掉空格</span><br><br>SELECT TRIM(<span class="hljs-string">'a'</span> FROM <span class="hljs-string">'aaaaaaaaaaaaaaaaaa张aaaaa翠山aaaaaaaaaaaaaa'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="lpad（用指定的字符实现左填充指定的长度（不是字节数））"><a href="#lpad（用指定的字符实现左填充指定的长度（不是字节数））" class="headerlink" title="lpad（用指定的字符实现左填充指定的长度（不是字节数））"></a>lpad（用指定的字符实现左填充指定的长度（不是字节数））</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">-- lpad 用指定的字符实现左填充指定的长度（不是字节数）<br>SELECT LPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'*'</span>) AS out_put;<br><br>-- 如果给定的字符数超过了要求的字符数，就会从右边截断到相应的字符数<br>SELECT LPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'*'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="rpad（用指定的字符实现右填充指定的长度（不是字节数））"><a href="#rpad（用指定的字符实现右填充指定的长度（不是字节数））" class="headerlink" title="rpad（用指定的字符实现右填充指定的长度（不是字节数））"></a>rpad（用指定的字符实现右填充指定的长度（不是字节数））</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">-- rpad 用指定的字符实现右填充指定的长度（不是字节数）<br>SELECT RPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'*'</span>) AS out_put;<br><br>SELECT RPAD(<span class="hljs-string">'殷素素'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'*'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h3 id="replace（替换）"><a href="#replace（替换）" class="headerlink" title="replace（替换）"></a>replace（替换）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    REPLACE(<span class="hljs-string">'张无忌爱上了周芷若'</span>,<br>        <span class="hljs-string">'周芷若'</span>,<br>        <span class="hljs-string">'赵敏'</span>) AS out_put;<br></code></pre></td></tr></table></figure><hr><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><h3 id="round（四舍五入）"><a href="#round（四舍五入）" class="headerlink" title="round（四舍五入）"></a>round（四舍五入）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT ROUND(<span class="hljs-number">1.45</span>);<br><br>SELECT ROUND(- <span class="hljs-number">1.55</span>);<br><br>SELECT ROUND(<span class="hljs-number">1.567</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="ceil（向上取整，返回-gt-该参数的最小整数）"><a href="#ceil（向上取整，返回-gt-该参数的最小整数）" class="headerlink" title="ceil（向上取整，返回&gt;=该参数的最小整数）"></a>ceil（向上取整，返回&gt;=该参数的最小整数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">-- ceil 向上取整，返回&gt;=该参数的最小整数<br>SELECT CEIL(<span class="hljs-number">1.45</span>);<br><br>SELECT CEIL(- <span class="hljs-number">1.65</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="floor（向下取整，返回-lt-该参数的最大整数）"><a href="#floor（向下取整，返回-lt-该参数的最大整数）" class="headerlink" title="floor（向下取整，返回&lt;=该参数的最大整数）"></a>floor（向下取整，返回&lt;=该参数的最大整数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">-- floor 向下取整，返回&lt;=该参数的最大整数<br>SELECT floor(<span class="hljs-number">-9.99</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="truncate（截断）"><a href="#truncate（截断）" class="headerlink" title="truncate（截断）"></a>truncate（截断）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">-- truncate 截断<br>SELECT TRUNCATE(<span class="hljs-number">1.69999</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="mod（取余）"><a href="#mod（取余）" class="headerlink" title="mod（取余）"></a>mod（取余）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">-- mod 取余<br>-- mod(a, b): a-a/b*b<br>SELECT MOD(<span class="hljs-number">-10</span>, <span class="hljs-number">-3</span>);<br><br>SELECT <span class="hljs-number">10</span> % <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id="now（返回当前系统日期-时间）"><a href="#now（返回当前系统日期-时间）" class="headerlink" title="now（返回当前系统日期+时间）"></a>now（返回当前系统日期+时间）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT NOW();<br></code></pre></td></tr></table></figure><hr><h3 id="curdate（返回当前系统日期，不包含时间）"><a href="#curdate（返回当前系统日期，不包含时间）" class="headerlink" title="curdate（返回当前系统日期，不包含时间）"></a>curdate（返回当前系统日期，不包含时间）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT CURDATE();<br></code></pre></td></tr></table></figure><hr><h3 id="curtime（返回当前时间，不包含日期）"><a href="#curtime（返回当前时间，不包含日期）" class="headerlink" title="curtime（返回当前时间，不包含日期）"></a>curtime（返回当前时间，不包含日期）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">-- curtime 返回当前时间，不包含日期<br>SELECT CURTIME();<br></code></pre></td></tr></table></figure><hr><h3 id="指获取指定的部分，年、月、日、小时、分钟、秒"><a href="#指获取指定的部分，年、月、日、小时、分钟、秒" class="headerlink" title="指获取指定的部分，年、月、日、小时、分钟、秒"></a>指获取指定的部分，年、月、日、小时、分钟、秒</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT YEAR(NOW()) AS 年;<br><br>SELECT year(<span class="hljs-string">'1988-1-1'</span>) <span class="hljs-keyword">as</span> 年;<br><br>SELECT <br>    YEAR(hiredate)<br>FROM<br>    employees;<br>    <br><br>SELECT MONTH(NOW()) AS 月;<br>SELECT MONTHNAME(NOW()) AS 月;<br></code></pre></td></tr></table></figure><hr><h3 id="str-to-date（将字符通过指定的格式转换为日期）"><a href="#str-to-date（将字符通过指定的格式转换为日期）" class="headerlink" title="str_to_date（将字符通过指定的格式转换为日期）"></a>str_to_date（将字符通过指定的格式转换为日期）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT STR_TO_DATE(<span class="hljs-string">'1988-3-2'</span>, <span class="hljs-string">'%Y-%c-%d'</span>) AS out_put;<br><br>-- 查询入职信息为<span class="hljs-number">1992</span><span class="hljs-number">-4</span><span class="hljs-number">-3</span>的员工信息<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    hiredate = STR_TO_DATE(<span class="hljs-string">'4-3 1992'</span>, <span class="hljs-string">'%c-%d %Y'</span>);<br></code></pre></td></tr></table></figure><hr><h3 id="data-format（将日期转化为字符）"><a href="#data-format（将日期转化为字符）" class="headerlink" title="data_format（将日期转化为字符）"></a>data_format（将日期转化为字符）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT DATE_FORMAT(NOW(), <span class="hljs-string">'%y年%m月%d日'</span>) AS out_put;<br><br>-- 查询有奖金的员工名和入职日期（xx月/xx日 xx年）<br>SELECT <br>    last_name AS <span class="hljs-string">'员工名'</span>,<br>    DATE_FORMAT(hiredate, <span class="hljs-string">'%m月/%d日 %Y年'</span>) AS <span class="hljs-string">'入职日期'</span><br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL;<br></code></pre></td></tr></table></figure><hr><h2 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT VERSION();<br><br>SELECT DATABASE();<br><br>SELECT USER();<br></code></pre></td></tr></table></figure><hr><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><h3 id="if-函数（if-else-的效果）"><a href="#if-函数（if-else-的效果）" class="headerlink" title="if 函数（if else 的效果）"></a>if 函数（if else 的效果）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT IF(<span class="hljs-number">10</span> &lt; <span class="hljs-number">5</span>, <span class="hljs-string">'大'</span>, <span class="hljs-string">'小'</span>);<br><br>SELECT <br>    last_name,<br>    commission_pct,<br>    IF(commission_pct IS NULL,<br>        <span class="hljs-string">'没奖金'</span>,<br>        <span class="hljs-string">'有奖金'</span>) AS 备注<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="case函数的使用一（switch-case-的效果）"><a href="#case函数的使用一（switch-case-的效果）" class="headerlink" title="case函数的使用一（switch case 的效果）"></a>case函数的使用一（switch case 的效果）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>java中：<br>switch(变量或表达式)&#123;<br>case 常量<span class="hljs-number">1</span>：语句<span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br>...<br>default:语句n; <span class="hljs-keyword">break</span>;<br>&#125;<br><br>mysql中：<br>case 要判断的字段或表达式<br>when 常量<span class="hljs-number">1</span> then 要显示的值<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span>;（如果是值就不用加;，如果是表达式就需要加;）<br>when 常量<span class="hljs-number">2</span> then 要显示的值<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span>;<br>...<br><span class="hljs-keyword">else</span> 要显示的值n或语句n;<br>end<br>*/<br><br>/*案例：查询员工的工资，要求：<br>部门号=<span class="hljs-number">30</span>，显示的工资为<span class="hljs-number">1.1</span>倍<br>部门号=<span class="hljs-number">40</span>，显示的工资为<span class="hljs-number">1.2</span>倍<br>部门号=<span class="hljs-number">50</span>，显示的工资为<span class="hljs-number">1.3</span>倍<br>其他部门，显示的工资为原工资<br>*/<br>SELECT <br>    salary AS <span class="hljs-string">'原始工资'</span>,<br>    department_id,<br>    CASE department_id<br>        WHEN <span class="hljs-number">30</span> THEN salary * <span class="hljs-number">1.1</span><br>        WHEN <span class="hljs-number">40</span> THEN salary * <span class="hljs-number">1.2</span><br>        WHEN <span class="hljs-number">50</span> THEN salary * <span class="hljs-number">1.3</span><br>        ELSE salary<br>    END AS <span class="hljs-string">'新工资'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h3 id="case-函数的使用二（类似于-多重if）"><a href="#case-函数的使用二（类似于-多重if）" class="headerlink" title="case 函数的使用二（类似于 多重if）"></a>case 函数的使用二（类似于 多重if）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>case <br>when 条件<span class="hljs-number">1</span> then 要显示的值<span class="hljs-number">1</span>或者语句<span class="hljs-number">1</span>;<br>when 条件<span class="hljs-number">2</span> then 要显示的值<span class="hljs-number">2</span>或者语句<span class="hljs-number">2</span>;<br>...<br><span class="hljs-keyword">else</span> 要显示的值或者语句;<br>end<br>*/<br><br>-- 案例：查询员工的工资的情况<br>/*<br>如果工资&gt;<span class="hljs-number">20000</span>,显示A级别<br>如果工资&gt;<span class="hljs-number">15000</span>,显示B级别<br>如果工资&gt;<span class="hljs-number">10000</span>,显示C级别<br>否则，显示D级别<br>*/<br>SELECT <br>    salary AS <span class="hljs-string">'工资'</span>,<br>    CASE<br>        WHEN salary &gt; <span class="hljs-number">20000</span> THEN <span class="hljs-string">'A'</span><br>        WHEN salary &gt; <span class="hljs-number">15000</span> THEN <span class="hljs-string">'B'</span><br>        WHEN salary &gt; <span class="hljs-number">10000</span> THEN <span class="hljs-string">'C'</span><br>        ELSE <span class="hljs-string">'D'</span><br>    END AS <span class="hljs-string">'工资等级'</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT NOW();<br><br>SELECT <br>    employee_id AS <span class="hljs-string">'员工号'</span>,<br>    last_name AS <span class="hljs-string">'姓名'</span>,<br>    salary AS <span class="hljs-string">'工资'</span>,<br>    salary * <span class="hljs-number">1.2</span> AS <span class="hljs-string">'NEW salary'</span><br>FROM<br>    employees;<br><br><br>SELECT <br>    last_name, LENGTH(last_name) AS <span class="hljs-string">'名字的长度'</span><br>FROM<br>    employees<br>ORDER BY SUBSTR(last_name, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) ASC;<br><br><br>SELECT <br>    CONCAT(last_name,<br>            <span class="hljs-string">' earns '</span>,<br>            salary,<br>            <span class="hljs-string">' monthly but wants '</span>,<br>            salary * <span class="hljs-number">3</span>) AS <span class="hljs-string">'dream salary'</span><br>FROM<br>    employees;<br><br><br>SELECT <br>    last_name,<br>    job_id AS <span class="hljs-string">'job'</span>,<br>    CASE job_id<br>        WHEN <span class="hljs-string">'AD_PRES'</span> THEN <span class="hljs-string">'A'</span><br>        WHEN <span class="hljs-string">'ST_MAN'</span> THEN <span class="hljs-string">'B'</span><br>        WHEN <span class="hljs-string">'IT_PROG'</span> THEN <span class="hljs-string">'C'</span><br>        WHEN <span class="hljs-string">'SA_PRE'</span> THEN <span class="hljs-string">'D'</span><br>        WHEN <span class="hljs-string">'ST_CLERK'</span> THEN <span class="hljs-string">'E'</span><br>        ELSE job_id<br>    END AS <span class="hljs-string">'grade'</span><br>FROM<br>    employees<br>WHERE<br>    job_id = <span class="hljs-string">'AD_PRES'</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql排序查询</title>
      <link href="/2020/04/03/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5(%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/03/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5(%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#排序查询语法">排序查询语法</a></li><li><a href="#按表达式排序">按表达式排序</a></li><li><a href="#按别名排序">按别名排序</a></li><li><a href="#按函数排序">按函数排序</a></li><li><a href="#升降混合排序">升降混合排序</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="排序查询语法"><a href="#排序查询语法" class="headerlink" title="排序查询语法"></a>排序查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>SELECT <br>    查询列表<br>FROM<br>    表<br>（WHERE<br>    筛选条件）<br>ORDER BY 排序列表 ASC（升序，可省略） | DESC（降序）<br><br>特点：<br><span class="hljs-number">1</span>、ASC表示升序，DESC表示降序，不写默认表示升序<br><span class="hljs-number">2</span>、ORDER BY子句中可以支持单个字段、多个字段、表达式、函数、别名<br><span class="hljs-number">3</span>、ORDER BY子句一般是放在查询语句的最后面，但是LIMIT子句除外<br>*/<br><br>-- 案例一<br>SELECT <br>    *<br>FROM<br>    employees<br>ORDER BY salary DESC;<br><br><br>SELECT <br>    *<br>FROM<br>    employees<br>ORDER BY salary ASC;<br><br><br>-- 案例二<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    department_id &gt;= <span class="hljs-number">90</span><br>ORDER BY hiredate ASC;<br></code></pre></td></tr></table></figure><hr><h2 id="按表达式排序"><a href="#按表达式排序" class="headerlink" title="按表达式排序"></a>按表达式排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    *, salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + ifnull(commission_pct, <span class="hljs-number">0</span>)) AS <span class="hljs-string">'年薪'</span><br>FROM<br>    employees<br>ORDER BY salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + ifnull(commission_pct, <span class="hljs-number">0</span>)) DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="按别名排序"><a href="#按别名排序" class="headerlink" title="按别名排序"></a>按别名排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    *, salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + ifnull(commission_pct, <span class="hljs-number">0</span>)) AS <span class="hljs-string">'年薪'</span><br>FROM<br>    employees<br>ORDER BY <span class="hljs-string">'年薪'</span> DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="按函数排序"><a href="#按函数排序" class="headerlink" title="按函数排序"></a>按函数排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name, LENGTH(last_name) AS <span class="hljs-string">'字节长度'</span>, salary<br>FROM<br>    employees<br>ORDER BY LENGTH(last_name) ASC;<br></code></pre></td></tr></table></figure><hr><h2 id="升降混合排序"><a href="#升降混合排序" class="headerlink" title="升降混合排序"></a>升降混合排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询员工信息，要求先按工资排序（升序），再按员工编号排序（降序）<br>SELECT <br>    *<br>FROM<br>    employees<br>ORDER BY salary ASC , employee_id DESC;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name,<br>    department_id,<br>    salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + IFNULL(commission_pct, <span class="hljs-number">0</span>)) AS <span class="hljs-string">'年薪'</span><br>FROM<br>    employees<br>ORDER BY <span class="hljs-string">'年薪'</span> DESC , last_name ASC;<br><br>SELECT <br>    last_name, salary<br>FROM<br>    employees<br>WHERE<br>    NOT (salary BETWEEN <span class="hljs-number">8000</span> AND <span class="hljs-number">17000</span>)<br>ORDER BY salary DESC;<br><br>SELECT <br>    *, LENGTH(email)<br>FROM<br>    employees<br>WHERE<br>    email LIKE <span class="hljs-string">'%e%'</span><br>ORDER BY LENGTH(email) DESC , department_id ASC;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql条件查询</title>
      <link href="/2020/04/02/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/02/Mysql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#条件查询语法">条件查询语法</a></li><li><a href="#按条件表达式筛选">按条件表达式筛选</a></li><li><a href="#按逻辑表示筛选">按逻辑表示筛选</a></li><li><a href="#模糊查询">模糊查询</a></li><li><a href="#like">like</a></li><li><a href="#between-and">between and</a></li><li><a href="#in">in</a></li><li><a href="#is-nullis-not-null">is null、is not null</a></li><li><a href="#安全等于判断是否等于null或者数值如果等于返回true但可读性很差">安全等于（&lt;=&gt;），判断是否等于null或者数值，如果等于返回true，但可读性很差</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="条件查询语法"><a href="#条件查询语法" class="headerlink" title="条件查询语法"></a>条件查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>SELECT <br>    查询列表<br>FROM<br>    表名<br>WHERE<br>    筛选条件;<br>    <br>分类：<br><span class="hljs-number">1</span>、按条件表达式筛选：条件运算符：&gt; &lt; = （!= &lt;&gt;） &gt;= &lt;=<br><span class="hljs-number">2</span>、按逻辑表达式筛选：逻辑运算符：&amp;&amp; || ！<span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span><br><span class="hljs-number">3</span>、模糊查询：ilke between <span class="hljs-keyword">and</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">is</span> null<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="按条件表达式筛选"><a href="#按条件表达式筛选" class="headerlink" title="按条件表达式筛选"></a>按条件表达式筛选</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询工资&gt;<span class="hljs-number">12000</span>的员工信息<br>SELECT <br>*<br>FROM<br>    employees<br>WHERE<br>    salary &gt; <span class="hljs-number">12000</span>;<br><br>-- 案例<span class="hljs-number">2</span>：查询部门编号不等于<span class="hljs-number">90</span>号的员工名和部门编号<br>SELECT <br>    employee_id, department_id<br>FROM<br>    employees<br>WHERE<br>    department_id != <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="按逻辑表示筛选"><a href="#按逻辑表示筛选" class="headerlink" title="按逻辑表示筛选"></a>按逻辑表示筛选</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询部门编号不是在<span class="hljs-number">90</span>到<span class="hljs-number">110</span>之间，或者工资高于<span class="hljs-number">15000</span>的员工信息<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    NOT (<span class="hljs-number">90</span> &lt;= department_id<br>        AND department_id &lt;= <span class="hljs-number">110</span>)<br>        OR salary &gt; <span class="hljs-number">15000</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>like<br>特点：<br><span class="hljs-number">1</span>、一般和通配符搭配使用。<br>通配符：<br>% 任意多个字符，包含<span class="hljs-number">0</span>个字符<br>        _ 任意单个字符<br><br>between <span class="hljs-keyword">and</span><br>特点：<br><span class="hljs-number">1</span>、提升代码简洁度<br><span class="hljs-number">2</span>、包含临界值<br><span class="hljs-number">3</span>、临界值不要调换顺序<br><br><span class="hljs-keyword">in</span> <br>特点：<br><span class="hljs-number">1</span>、提升语句简洁度<br><span class="hljs-number">2</span>、<span class="hljs-keyword">in</span>列表的值类型必须一致或兼容<br><span class="hljs-number">3</span>、不能使用通用符<br><br><span class="hljs-keyword">is</span> null、<span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> null<br>特点：<br><span class="hljs-number">1</span>、=或者&lt;&gt;不能用于判断null值<br><span class="hljs-number">2</span>、<span class="hljs-keyword">is</span> null或者<span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> null 可以判断null值<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询员工名中包含字符a的员工信息<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'%a%'</span>;<br>    <br>-- 案例<span class="hljs-number">2</span>：查询员工名中第三个字符为e，第五个字符为a的员工名和工资<br>SELECT <br>    last_name, salary<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'__e_a%'</span>;<br><br>-- 案例<span class="hljs-number">3</span>：查询员工名中第二个字符串为_的员工名<br>-- 方法一<br>SELECT <br>    last_name<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'_\_%'</span>;<br><br>-- 方法二<br>-- escape关键词表示后面的符号为转义符<br>SELECT <br>    last_name<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'_$_%'</span> ESCAPE <span class="hljs-string">'$'</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">3</span>：查询员工编号在<span class="hljs-number">100</span>到<span class="hljs-number">120</span>之间的员工信息<br>-- 方法一<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    employee_id &gt;= <span class="hljs-number">100</span><br>        AND employee_id &lt;= <span class="hljs-number">120</span>;<br><br>-- 方法二<br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    employee_id BETWEEN <span class="hljs-number">100</span> AND <span class="hljs-number">120</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">4</span>：查询员工的工种编号是IT_PROG、AD_VP、AD_PRES中的一个的员工名和工种编号<br>-- 方法一<br>SELECT <br>    last_name, job_id<br>FROM<br>    employees<br>WHERE<br>    job_id = <span class="hljs-string">'IT_PROG'</span> OR job_id = <span class="hljs-string">'AD_VP'</span><br>        OR job_id = <span class="hljs-string">'AD_PRES'</span>;<br><br>-- 方法二<br>SELECT <br>    last_name, job_id<br>FROM<br>    employees<br>WHERE<br>    job_id IN (<span class="hljs-string">'IT_PROG'</span> , <span class="hljs-string">'AD_VP'</span>, <span class="hljs-string">'AD_PRES'</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="is-null、is-not-null"><a href="#is-null、is-not-null" class="headerlink" title="is null、is not null"></a>is null、is not null</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例<span class="hljs-number">1</span>：查询没有奖金的员工名和奖金率<br>SELECT <br>    last_name, commission_pct<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NULL;<br>    <br>-- 案例<span class="hljs-number">2</span>：查询有奖金的员工名和奖金率<br>SELECT <br>    last_name, commission_pct<br>FROM<br>    employees<br>WHERE<br>    commission_pct IS NOT NULL;<br></code></pre></td></tr></table></figure><hr><h2 id="安全等于（-lt-gt-），判断是否等于null或者数值，如果等于返回true，但可读性很差"><a href="#安全等于（-lt-gt-），判断是否等于null或者数值，如果等于返回true，但可读性很差" class="headerlink" title="安全等于（&lt;=&gt;），判断是否等于null或者数值，如果等于返回true，但可读性很差"></a>安全等于（&lt;=&gt;），判断是否等于null或者数值，如果等于返回true，但可读性很差</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name, commission_pct<br>FROM<br>    employees<br>WHERE<br>    commission_pct &lt;=&gt; NULL;<br>```    <br>---<br><br><span class="hljs-comment">## 练习</span><br>```python<br>-- 查询员工为<span class="hljs-number">176</span>号的员工的姓名、部门号和年薪<br>SELECT <br>    last_name,<br>    department_id,<br>    salary * <span class="hljs-number">12</span> * (<span class="hljs-number">1</span> + IFNULL(commission_pct, <span class="hljs-number">0</span>)) AS 年薪<br>FROM<br>    employees<br>WHERE<br>    employee_id = <span class="hljs-number">176</span>;<br>    <br>-- 选择工资不在<span class="hljs-number">5000</span>到<span class="hljs-number">12000</span>的员工的姓名和工资 <br>SELECT <br>    last_name, salary<br>FROM<br>    employees<br>WHERE<br>    NOT (salary BETWEEN <span class="hljs-number">5000</span> AND <span class="hljs-number">12000</span>);<br>    <br>-- 选择姓名中有字母a和e的员工姓名 <br>SELECT <br>    last_name<br>FROM<br>    employees<br>WHERE<br>    last_name LIKE <span class="hljs-string">'%a%e%'</span>;<br>    <br>-- 显示出表employees的manager_id是<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span> 的员工姓名、职位 <br>SELECT <br>    last_name, job_id<br>FROM<br>    employees<br>WHERE<br>    manager_id IN (<span class="hljs-number">100</span> , <span class="hljs-number">101</span>, <span class="hljs-number">110</span>);<br><br>-- 查询没有奖金，且工资小于<span class="hljs-number">18000</span>的salary，last_name<br>SELECT <br>    salary, last_name<br>FROM<br>    employees<br>WHERE<br>    salary &lt; <span class="hljs-number">18000</span><br>        AND commission_pct IS NULL;<br> <br><br>SELECT <br>    *<br>FROM<br>    employees<br>WHERE<br>    job_id != <span class="hljs-string">'IT'</span> OR salary = <span class="hljs-number">12000</span>;<br>    <br>desc departments;<br><br>SELECT DISTINCT<br>    location_id<br>FROM<br>    departments;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础查询</title>
      <link href="/2020/04/02/Mysq%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2)/"/>
      <url>/2020/04/02/Mysq%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80(%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2)/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#基础查询语法">基础查询语法</a></li><li><a href="#使用指定的数据库">使用指定的数据库</a></li><li><a href="#查询表中的单个多个字段">查询表中的单个、多个字段</a></li><li><a href="#查询常量值">查询常量值</a></li><li><a href="#查询表达式">查询表达式</a></li><li><a href="#查询函数">查询函数</a></li><li><a href="#给字段取别名">给字段取别名</a></li><li><a href="#去重distinct">去重（distinct）</a></li><li><a href="#号的作用">+号的作用</a></li><li><a href="#连接多个字段concat">连接多个字段（concat）</a></li><li><a href="#练习">练习</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="基础查询语法"><a href="#基础查询语法" class="headerlink" title="基础查询语法"></a>基础查询语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>语法：<br>SELECT <br>    查询列表<br>FROM<br>    表名;<br><br>特点：<br><br><span class="hljs-number">1</span>、查询列表可以是：表中的字段、常量值、表达式、函数<br><span class="hljs-number">2</span>、查询的结果是一个虚拟的表格（类似于python中的视图）<br>*/<br></code></pre></td></tr></table></figure><hr><h2 id="使用指定的数据库"><a href="#使用指定的数据库" class="headerlink" title="使用指定的数据库"></a>使用指定的数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">USE myemployees;<br></code></pre></td></tr></table></figure><hr><h2 id="查询表中的单个、多个字段"><a href="#查询表中的单个、多个字段" class="headerlink" title="查询表中的单个、多个字段"></a>查询表中的单个、多个字段</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name<br>FROM<br>    employees;<br><br>-- <span class="hljs-number">2.</span>查询表中的多个字段<br>SELECT <br>    last_name, salary, email<br>FROM<br>    employees;<br><br>-- <span class="hljs-number">3.</span>查询表中所有字段<br>-- 方法一：可以更改查询表的顺序<br>SELECT <br>    employee_id,<br>    first_name,<br>    last_name,<br>    email,<br>    phone_number,<br>    job_id,<br>    salary,<br>    commission_pct,<br>    manager_id,<br>    department_id,<br>    hiredate<br>FROM<br>    employees;<br>    <br>-- 方法二：不可以更改查询表的顺序<br>SELECT <br>    *<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="查询常量值"><a href="#查询常量值" class="headerlink" title="查询常量值"></a>查询常量值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <span class="hljs-number">100</span>;<br>SELECT <span class="hljs-string">'john'</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <span class="hljs-number">100</span> % <span class="hljs-number">98</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT version();<br></code></pre></td></tr></table></figure><hr><h2 id="给字段取别名"><a href="#给字段取别名" class="headerlink" title="给字段取别名"></a>给字段取别名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br><span class="hljs-number">1</span>、便于理解<br><span class="hljs-number">2</span>、如果要查询的字段有重名的情况，使用别名可以区分开来<br>*/<br><br>-- 方式一：使用As <br>SELECT <span class="hljs-number">100</span> % <span class="hljs-number">98</span> AS 结果;<br><br>SELECT <br>    last_name AS 姓, first_name AS 名<br>FROM<br>    employees;<br><br>-- 方式二：使用空格<br>SELECT <br>    last_name 姓, first_name 名<br>FROM<br>    employees;<br><br>-- 案例：查询salary，显示列名的别名为out put（当别名中有空格等特殊字符，则别名需要用引号，否则会报错）<br>SELECT <br>    salary AS <span class="hljs-string">"out put"</span><br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="去重（distinct）"><a href="#去重（distinct）" class="headerlink" title="去重（distinct）"></a>去重（distinct）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询员工表中涉及到的所有的部门编号<br>SELECT DISTINCT<br>    department_id<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="号的作用"><a href="#号的作用" class="headerlink" title="+号的作用"></a>+号的作用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>python中+号：<br><span class="hljs-number">1</span>、运算符，两个操作数都为数值型<br><span class="hljs-number">2</span>、连接符，只要有一个操作数为字符串<br><br>mysql中的+号：<br>仅仅只有一个功能：运算符<br>*/<br><br>-- 两个操作数都为数值型，则做加法运算<br>SELECT <span class="hljs-number">100</span> + <span class="hljs-number">90</span>; <br><br>-- 其中一方为字符型，试图将字符型转换成数值型，如果转换成功，则继续做加法运算<br>SELECT <span class="hljs-string">"123"</span> + <span class="hljs-number">90</span>; <br><br>-- 如果转换失败，则将字符串转换为<span class="hljs-number">0</span><br>SELECT <span class="hljs-string">"john"</span> + <span class="hljs-number">90</span>; <br><br>-- 只要一方为null，结果肯定为null <br>SELECT null + <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><hr><h2 id="连接多个字段（concat）"><a href="#连接多个字段（concat）" class="headerlink" title="连接多个字段（concat）"></a>连接多个字段（concat）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">-- 案例：查询员工名和姓连接成一个字段，并显示为 姓名<br>SELECT <br>    CONCAT(last_name, first_name) AS 姓名<br>FROM<br>    employees;<br><br>-- 如果连接的字段中有值为null（ifnull）<br>SELECT <br>    IFNULL(commission_pct, <span class="hljs-number">0</span>) AS 奖金率, <br>    commission_pct<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure><hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">SELECT <br>    last_name, job_id, salary AS sal<br>FROM<br>    employees;<br>    <br>SELECT <br>    employee_id, last_name, salary * <span class="hljs-number">12</span> AS <span class="hljs-string">'ANNUAL SALARY'</span><br>FROM<br>    employees;<br>    <br>DESC departments;<br>SELECT <br>    *<br>FROM<br>    departments;<br>    <br>SELECT DISTINCT<br>    job_id<br>FROM<br>    employees;<br><br>SELECT <br>    CONCAT(employee_id,<br>            <span class="hljs-string">','</span>,<br>            first_name,<br>            <span class="hljs-string">','</span>,<br>            last_name,<br>            <span class="hljs-string">','</span>,<br>            email,<br>            <span class="hljs-string">','</span>,<br>            phone_number,<br>            <span class="hljs-string">','</span>,<br>            IFNULL(commission_pct, <span class="hljs-number">0</span>)) AS OUT_PUT<br>FROM<br>    employees;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xshell命令大全</title>
      <link href="/2020/03/27/Xsell%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/03/27/Xsell%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#xshell命令大全">Xshell命令大全</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="Xshell命令大全"><a href="#Xshell命令大全" class="headerlink" title="Xshell命令大全"></a>Xshell命令大全</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python">***********************************常用操作*********************************<br>----------------------------------------------------------------------------<br>//文本复制:Ctrl+Insert<br>//文本粘贴:Shift+Insert<br>----------------------------------------------------------------------------<br>//文件复制：<br>cp file1 file1.bak --把文件file1复制为新文件file1.bak<br>cp file1 /home/bin --把file1文件从当前位置复制到/home/bin目录下<br>cp *   /home/bin   --把当前文件下所有文件复制一份到/home/bin目录下<br>----------------------------------------------------------------------------<br>//文件移动<br>mv * /home/bin   --把当前目录下的所有文件移动到/home/bin目录下<br>mv file1 /home/bin --把file1文件从当前位置下移动到/home/bin目录下 <br> <br>//文件重命名<br>mv file1 file2  --把file1名称改为file2<br>----------------------------------------------------------------------------<br>//文件列表<br>ls          --列出当前目录下所有文件名<br>ls -l       --列出当前目录下所有文件的一个长列表<br>ls -la      --列出当前目录下所有文件的一个长列表，包括以句点开头的隐藏文件<br>ls a*       --列出当前目录下以字母a开头的所有文件<br>ls -l *.doc --列出当前目录下以.doc结尾的所有文件<br> <br>find -name *.rpm 在当前目录中查找rpm包<br>----------------------------------------------------------------------------<br>//文件删除：<br>rm file1,file2,...    --删除当前目录文件file1,file2等<br>rm *   --删除当前目录下所有非隐藏文件，不删除目录，除非指定了-r（递归参数）<br>rm -rf /home 删除home目录及它所包含的所有内容<br>rm -r /home 删除home目录，会让你确认是否删除目录下的文件<br>rm -i a* <br>----------------------------------------------------------------------------<br>//文件上传：rz 回车<br>//文件下载：sz file1<br>//提示：如果连接linux虚拟机上，rz命令不起作用，需要安装一个rz和sz的程序：yum install -y lrzsz<br>----------------------------------------------------------------------------<br>//进入文件<br>cd ../  或者  cd /      --进入根目录下<br>cd ..                   --当前目录的上一级目录<br>cd ../..                --切换到上两级目录<br>cd ~                    --切换用户目录，如果是root用户，则切换到/root下<br>cd /home/bin            --进入当前目录的/home/bin目录下<br>----------------------------------------------------------------------------<br>//建立目录<br>mkdir <span class="hljs-number">001</span>  --在当前目录下建立<span class="hljs-number">001</span>目录<br>mkdir -p /<span class="hljs-number">001</span>/<span class="hljs-number">002</span>/<span class="hljs-number">003</span>  --在当前目录下嵌套建立指定目录(要带上当前目录)<br>----------------------------------------------------------------------------<br>//创建文件<br>touch a.html --在当前目录创建一个空的a.html文件<br>----------------------------------------------------------------------------<br>//查看文件内容<br>more file1 --查看file1文件的内容，支持分页显示<br>less file1 --查看file1文件的内容<br>cat file1  --显示file1文件的内容<br>tail -f file1   --查看file1的内容<br>tail <span class="hljs-number">-100</span> file1 --查看file1的后<span class="hljs-number">100</span>行内容<br>----------------------------------------------------------------------------<br>//搜索文件的内容<br>grep aaa /home/bin/file1 --在file1文件中查询包含aaa的所有行<br> <br>----------------------------------------------------------------------------<br>//窗口切换+全屏<br>Alt+<span class="hljs-number">1</span>     --切换窗口<span class="hljs-number">1</span><br>Alt+<span class="hljs-number">2</span>     --切换窗口<span class="hljs-number">2</span><br>Alt+Enter --全屏<br> <br>----------------------------------------------------------------------------<br>//编辑文件<br>vi file1 --编辑file1文件内容<br> <br>esc      --退出vi模式，跳入命令模式<br> <br>:w       --保存，但不退出vi模式<br>:w!      --强保存，但不退出vi模式<br> <br>:wq      --保存，并退出vi<br>:wq!     --强保存，并退出vi<br>:q       --不保存，退出vi<br>:q!      --不保存，强制退出vi<br>:e!      --放弃所有修改，从上次保存文件开始再编辑<br>Ctrl+Z   --将vi暂停（挂起）<br>ctrl+c   --进入命令模式<br>----------------------------------------------------------------------------<br>//查看当前的路径：pwd<br>----------------------------------------------------------------------------<br>//打包文件<br>tar -cvf file1.zip file1   --将file1打包成file1.zip格式，此处可以打包成任意格式，即后缀可以为任意的，.aaa,.bbb,.zip,.tar 等<br>//解包文件<br>tar -xvf file1.zip         --解压包file1.zip,如果当前目录已经有文件了，覆盖原文件，否则正常显示<br> <br> <br><br>*********************************系统命令*******************************<br>man rm  --显示rm命令的使用说明<br>w       --显示登录用户的详细信息，类似于who<br>who     --显示登录用户<br>last    --显示最近登录的用户<br> <br>date    --显示当前时期和时间<br> <br>su      --切换root用户<br>su zy   --切换到zy用户<br> <br>clear   --清屏<br> <br>free    --查看系统内存和Swap分区情况<br> <br>reboot  --重启虚拟机<br>shutdown -r now --停止服务后重启计算机<br>shutdown -h now --停止服务后关闭计算机<br>halt     -关闭计算机<br> <br> <br>tips:如果操作中有特殊的符号，比如()等，记得加\转义一下，如你要删除file1_(<span class="hljs-number">1</span>).html，要写成 rm file1_\(<span class="hljs-number">1</span>\).html<br></code></pre></td></tr></table></figure><blockquote><p>说明：转载自<a href="https://blog.csdn.net/u014074697/article/details/86241642" target="_blank" rel="noopener">博客</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop完全分布式搭建</title>
      <link href="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#准备工作">准备工作</a></li><li><a href="#安装vmwareworkstation-pro和centos-7">安装VMwareWorkstation Pro和CentOS 7</a></li><li><a href="#配置静态ip">配置静态IP</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&#8195;&#8195;下载三个软件：<br></p><ul><li><a href="https://www.vmware.com/" target="_blank" rel="noopener">VMwareWorkstation Pro</a>，软件的版本看自己的需求，我用的是<code>VMwareWorkstation Pro 15</code>，在下载的时候可能要求登录，但是有不登录下载的<a href="https://blog.csdn.net/ITloser_cartridge/article/details/91347452" target="_blank" rel="noopener">方法</a>。<br></li><li><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a>，同样的下什么版本看个人需求，我用的是<code>CentOS-7-x86_64-DVD-1908</code>，官网下载可能下载的很慢，我们可以通过<a href="https://blog.csdn.net/qq_35500685/article/details/92803963?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">阿里云镜像</a>下载。<br></li><li><a href="https://www.netsarang.com/zh/xshell-download/" target="_blank" rel="noopener">XSHELL6</a>。在界面的右栏的<code>家庭和学校用户的免费许可证</code>下点击<code>免费授权页面</code>，注册信息然后便可以收到下载链接（你注册时使用的邮箱）。</li></ul><hr><h2 id="安装VMwareWorkstation-Pro和CentOS-7"><a href="#安装VMwareWorkstation-Pro和CentOS-7" class="headerlink" title="安装VMwareWorkstation Pro和CentOS 7"></a>安装VMwareWorkstation Pro和CentOS 7</h2><p>&#8195;&#8195;这里推荐一个写的非常详细的<a href="https://www.cnblogs.com/double-K/p/10952233.html" target="_blank" rel="noopener">博客</a>，按照该博主的教程，不会出现什么问题。</p><h2 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h2><p>&#8195;&#8195;这里需要注意的是<code>centOS</code>版本不同，配置的方法也有些不同，但是大致过程是一样的。以下是<code>centOS7</code>的静态IP配置方法。<br><br>&#8195;&#8195;按照<a href="https://www.cnblogs.com/double-K/p/10952233.html" target="_blank" rel="noopener">博客</a>的过程安装好虚拟机以后，开启虚拟机（用户名和密码是之前安装的时候所设置的用户名和密码），在桌面右键<code>打开终端</code>，在终端中输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">su root  <span class="hljs-comment"># 如果本身已经是root用户跳过该命令行，否则就要切换为root用户，密码就是之前安装时设置的root密码</span><br>cd /etc/sysconfig/network-scripts/<br>ll<br></code></pre></td></tr></table></figure><p>然后就能看到如下所示：<img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/network-scripts.png" alt="network-scripts"><br>找到你的界面中类似<code>ifcfg- ens32</code>的文件（一般都在前面），然后通过一下命令打开编辑<code>ifcfg- ens32</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">vim ifcfg- ens32 <span class="hljs-comment"># vim 你的文件名</span><br></code></pre></td></tr></table></figure><p>就可以看到：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/ifcfg-ens32.png" alt="ifcfg-ens32"><br>然后在英文输入法下，按<code>i</code>进入编辑模式（按下i之后光标由粗变细），通过<code>上下左右键</code>移动光标，将划红线部分，改为和上图一致，改好以后按下<code>ESC</code>，再输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">:wq  <span class="hljs-comment"># 注意前面的冒号是英文的冒号</span><br></code></pre></td></tr></table></figure><p>保存并退出。上图重要参数的意思参考如下：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/%E5%8F%82%E6%95%B0%E8%A7%A3%E9%87%8A.png" alt="参数解释"><br>接下来，来到<code>VMware Worksation</code>点击左上角的<code>编辑</code>并进入<code>虚拟网络编辑器</code>。<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="虚拟网络编辑器"><br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/VMnet8.png" alt="VMnet8"><br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/NAT.png" alt="NAT"><br>记住上图中 <code>子网IP</code>、<code>子网掩码</code>以及<code>网关</code>三个数据，然后进入编辑之前的<code>ifcfg- ens32</code>文件，在文件末尾追加信息如下：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/IP%E5%9C%B0%E5%9D%80%E7%AD%89%E9%85%8D%E7%BD%AE.png" alt="IP地址等配置"><br>需要注意的是设置的<code>IPADDR</code>不要和网关一致并且要和<code>子网IP</code>一个网段。然后通过命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">systemctl restart network.service<br></code></pre></td></tr></table></figure><p>重启网络设置。<br><br>再通过命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ifconfig<br></code></pre></td></tr></table></figure><p>查看当前虚拟机的网络设置是否和设置的一致。<br><br>&#8195;&#8195;接下来关闭防火墙，不然虚拟机无法连接外网。<code>centOS7</code>中可以通过如下命令选择自行选择暂时关闭防火墙还是永久关闭防火墙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">systemctl start firewalld  <span class="hljs-comment"># 启动</span><br>systemctl status firewalld  <span class="hljs-comment"># 查看状态</span><br>systemctl disable firewalld  <span class="hljs-comment"># 停用</span><br>systemctl stop firewalld  <span class="hljs-comment"># 禁用</span><br></code></pre></td></tr></table></figure><p>如果你是<code>centOS6</code>可以通过如下命令关闭防火墙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">service iptables stop  <span class="hljs-comment"># 停用</span><br>service iptables start  <span class="hljs-comment"># 启动</span><br>service iptables restart  <span class="hljs-comment"># 重启</span><br>service iptables status  <span class="hljs-comment"># 查看状态</span><br>chkconfig iptables off  <span class="hljs-comment"># 禁用</span><br>chkconfig iptables on  <span class="hljs-comment"># 永久开启</span><br></code></pre></td></tr></table></figure><p>完成这一步之后，虚拟器就应该可以ping通外网了。可以在虚拟机的命令行输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ping www.baidu.com<br></code></pre></td></tr></table></figure><p>如果出现如下结果，说明成功了：<br><img src="/2020/03/24/hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/ping_baidu.png" alt="ping_baidu"><br>如果出现了可以ping通主机（就是你的电脑）,但是不能ping通外网，可以参考<a href="https://blog.csdn.net/Hi_alan/article/details/98633468?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1" target="_blank" rel="noopener">博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的安装与配置</title>
      <link href="/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#目的">目的</a></li><li><a href="#git的下载和安装">git的下载和安装</a></li><li><a href="#git的基本工作流程">git的基本工作流程</a></li><li><a href="#gti的基础设置">gti的基础设置</a></li><li><a href="#说明">说明</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>通过git可以管理github项目代码，个人博客的搭建过程中也需要git的环境配置。</p><hr><h2 id="git的下载和安装"><a href="#git的下载和安装" class="headerlink" title="git的下载和安装"></a>git的下载和安装</h2><p>在<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>下载对应版本的git软件：<br><img src="/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git%E4%B8%8B%E8%BD%BD.png" alt="image"><br>然后双击安装即可，在选择<code>Adjusting your PATH environment</code>时选择<code>Use Git from Git Bash only</code>（其余默认，如果不想安装在默认路径，记得更改安装路径）。<br>若在桌面鼠标右键有<code>Git GUI Here</code>和<code>Git Bash Here</code>两个选项，则说明安装成功。</p><hr><h2 id="git的基本工作流程"><a href="#git的基本工作流程" class="headerlink" title="git的基本工作流程"></a>git的基本工作流程</h2><p>详细可见<a href="https://www.bilibili.com/video/av39189147?p=7" target="_blank" rel="noopener">视频教学</a>，分享者：<a href="https://space.bilibili.com/346057315?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">Fm-C</a>。<br><img src="/2020/02/23/git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git%E6%93%8D%E4%BD%9C%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="git操作基本命令行"></p><hr><h2 id="gti的基础设置"><a href="#gti的基础设置" class="headerlink" title="gti的基础设置"></a>gti的基础设置</h2><p>在桌面新建一个文件夹（作为git工作路径），在该文件夹内鼠标右键选择<code>Git Bash Here</code>。<br>然后，在<code>Git Bash Here</code>界面通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">'github用户名'</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">'github绑定的邮箱'</span><br></code></pre></td></tr></table></figure><p>初始化你的个人信息， 你可以通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">git config --list<br></code></pre></td></tr></table></figure><p>查看<code>user.name</code>和<code>user.email</code>两个属性是否设置成功。</p><hr><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>上述内容是我学习b站<a href="https://space.bilibili.com/346057315?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">Fm-C</a>分享的公开课<a href="https://www.bilibili.com/video/av39189147?p=6" target="_blank" rel="noopener">Github使用教程-黑马程序员</a>总结得出。<br>该公开课讲解的非常详细，有兴趣的朋友可以去观看公开课视频！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo、github搭建个人博客</title>
      <link href="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#环境">环境</a></li><li><a href="#第一步安装notejs">第一步（安装note.js）</a></li><li><a href="#第二步安装cnpm">第二步（安装cnpm）</a></li><li><a href="#第三步安装hexo并初始化博客">第三步（安装hexo并初始化博客）</a></li><li><a href="#第四步新建一篇博文并上传到github">第四步（新建一篇博文并上传到github）</a></li><li><a href="#第五步设置主题">第五步（设置主题）</a></li><li><a href="#问题总结">问题总结</a></li><li><a href="#说明">说明</a></li></ul><!-- /TOC --><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>已下载并配置好<code>Git</code>环境的<code>Windows10</code>系统（可以参考我的另外一篇博客<code>git的安装与配置</code>），<br>当然后面的操作也适用于<code>Mac</code>系统，但需要注意<code>Win</code>和<code>Mac</code>终端命令行略有差别，不可照搬，如果在<code>Mac</code>上命令运行不了，则需要查找相应的<code>Mac</code>终端命令行。</p><hr><h2 id="第一步（安装note-js）"><a href="#第一步（安装note-js）" class="headerlink" title="第一步（安装note.js）"></a>第一步（安装note.js）</h2><p>下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>，如下图所示：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/node.png" alt="下载示意图"><br>下载下来以后，点击默认安装就可以了，如果不喜欢安装在C盘，可以自行更改安装目录。<br>安装好以后，在桌面任务栏点击搜索，输入cmd并选择以<code>管理员身份运行</code>，然后可进行如下操作：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E6%9F%A5%E8%AF%A2node%E5%92%8Cnpm%E7%89%88%E6%9C%AC.png" alt="image"><br>如果可以通过代码查找到node和npm的版本，那说明node.js已经安装好了。</p><hr><h2 id="第二步（安装cnpm）"><a href="#第二步（安装cnpm）" class="headerlink" title="第二步（安装cnpm）"></a>第二步（安装cnpm）</h2><p>国内通过npm下载东西很慢，我们可以通过npm全局安装cnpm并指定淘宝源，以提升后续操作的速度，相应命令行如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">npm install -g cnpm --registry=https://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure><p>然后通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cnpm -v<br></code></pre></td></tr></table></figure><p>查找到安装的cnpm版本。</p><hr><h2 id="第三步（安装hexo并初始化博客）"><a href="#第三步（安装hexo并初始化博客）" class="headerlink" title="第三步（安装hexo并初始化博客）"></a>第三步（安装hexo并初始化博客）</h2><p>通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>全局安装hexo框架，再通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo -v<br></code></pre></td></tr></table></figure><p>查询安装的hexo版本，然后在当前路径下，通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">mkdir 文件夹名称<br></code></pre></td></tr></table></figure><p>新建一个空文件夹（命名看个人，我将其命名为blog），后面这个文件夹会包含你博客的所有内容（如果不想在当前路径下工作，可以通过命令行<code>cd 路径</code>更改路径再新建文件夹），然后在blog的路径下通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo init<br></code></pre></td></tr></table></figure><p>初始化一个博客，等命令行运行完之后，便可以看到在blog文件夹内新增了许多文件，这些是hexo生成的博客基础框架。<br>最后通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo server<br></code></pre></td></tr></table></figure><p>生成初始博客界面，可以通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">http://localhost:<span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p>访问该初始博客界面。</p><hr><h2 id="第四步（新建一篇博文并上传到github）"><a href="#第四步（新建一篇博文并上传到github）" class="headerlink" title="第四步（新建一篇博文并上传到github）"></a>第四步（新建一篇博文并上传到github）</h2><p>通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo new <span class="hljs-string">"文件名"</span><br></code></pre></td></tr></table></figure><p>创建一个新的md文件（上述引号为英文输入法的引号，new和文件名之间有空格），该文件会保存在路径<code>blog\source\_posts</code>中，你可以通过下载<a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">Notepad++</a>或者<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>来编辑该md文件，需要注意的是博文一般都是以<a href="https://www.jianshu.com/p/b03a8d7b1719" target="_blank" rel="noopener">Markdown</a>格式编写。<br>例如，编辑test.md文件内容如下：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/test.png" alt="image"><br>（注意上面图片中<code>##</code>后面均有一个空格）保存以后在blog路径下按顺序运行命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo clean<br>hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><p>再打开本地链接<code>http://localhost:4000</code>，就可以看到：<br><img src="/2020/02/22/%E5%9F%BA%E4%BA%8Ehexo%E3%80%81github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/test%E7%BB%93%E6%9E%9C.png" alt="image"><br>看完之后记得<code>ctrl+c</code>打断<code>hexo server</code>。</p><p>点击<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册并登录，然后创建一个名为<code>github用户名.github.io</code>的仓库（仓库名必须是这个格式），如果不会可以在网上查询教程， 这里就不再详述。<br>完成上面这一步之后，回到终端界面，在blog路径下通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cnpm install hexo -deployer-git --save<br></code></pre></td></tr></table></figure><p>下载git部署插键，若安装过程中有warning提示不用管，等待安装完成即可。</p><p>接下来，我们找到blog文件夹里的<code>_config.yml</code>文件，右键选择<code>NotePad++</code>打开编辑，找到<code>deploy</code>设置（文件最下面），将其设置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">type: git<br>repo: https://github.com/github用户名/github用户名.github.io.git<br>branch: master<br></code></pre></td></tr></table></figure><p>（注意！注意！注意！冒号后面均有一个空格）然后保存并退出。然后在终端界面blog路径下通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo deploy<br></code></pre></td></tr></table></figure><p>将blog配置文件上传到github的<code>github用户名.github.io</code>库中（第一次上传会提示输入github用户名和密码），然后就可以通过<code>https://github用户名.github.io/</code>访问博客界面啦！（有时github网站访问比较慢或出现404错误，需要多刷新几次）。</p><hr><h2 id="第五步（设置主题）"><a href="#第五步（设置主题）" class="headerlink" title="第五步（设置主题）"></a>第五步（设置主题）</h2><p><code>hexo</code>自带主题比较简单，你可以自己下载开源主题。这里给一个推荐：<code>https://github.com/litten/hexo-theme-yilia</code>。</p><p>在blog路径下，通过命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">git clone https://github.com/litten/hexo-theme-yilia.git clone themes<br></code></pre></td></tr></table></figure><p>下载<code>yilia</code>主题到<code>blog\themes</code>路径下（有梯子的朋友可以打开梯子，这样会加快下载速度）。</p><p>然后再次找到blog文件夹里的<code>_config.yml</code>文件，右键选择<code>NotePad++</code>打开编辑，找到<code>theme</code>设置，将其改为：<code>theme: yilia</code>（同样的冒号后面有一个空格），保存退出。<br>最后在终端blog路径下，按顺序输入命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">hexo clean<br>hexo generate<br>hexo server<br>ctrl + c(组合键,打断)<br>hexo deploy<br></code></pre></td></tr></table></figure><p>你就可以通过<code>https://github用户名.github.io/</code>访问新主题的博客界面啦！（若博客界面没有变化，多刷新等待一会儿）</p><hr><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>1、如果上传的图片博客界面无法显示，参考<a href="https://www.jianshu.com/p/3db6a61d3782" target="_blank" rel="noopener">链接1</a>。<br>2、如果搭建 <code>hexo</code>，在执行<code>hexo deploy</code> 后,出现 <code>error deployer not found:git</code>的错误，参考<a href="https://blog.csdn.net/Qin605/article/details/71124757" target="_blank" rel="noopener">链接2</a>。</p><hr><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>上述内容是我学习b站<a href="https://space.bilibili.com/384068749?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">CodeSheep</a>制作的<a href="https://www.bilibili.com/video/av44544186?t=402" target="_blank" rel="noopener">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a>总结得出。<br>该up主讲解的非常详细，有兴趣的朋友可以去观看他的视频！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
